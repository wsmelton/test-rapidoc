{
  "swagger": "2.0",
  "info": {
    "title": "Secret Server Rest API",
    "description": "REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.",
    "termsOfService": "https://thycotic.com/company/eula/",
    "contact": {
      "name": "Support",
      "url": "https://thycotic.com"
    },
    "version": "10.9.64"
  },
  "basePath": "/SecretServer/api/v1",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/activations": {
      "post": {
        "tags": [
          "Activations"
        ],
        "summary": "Perform an online activation of Secret Server",
        "description": "Perform an online activation of Secret Server",
        "operationId": "ActivationsService_Activate",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OnlineActivationArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activation result object",
            "schema": {
              "$ref": "#/definitions/GenericResult",
              "description": "Activation result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/active-directory/domains": {
      "get": {
        "tags": [
          "ActiveDirectory"
        ],
        "summary": "Search Domains",
        "description": "Search, filter, sort, and page Domains",
        "operationId": "ActiveDirectoryService_Search",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive Domains in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfDomainSummary",
              "description": "Domain search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ActiveDirectory"
        ],
        "summary": "Create Domain",
        "description": "Create a new Domain",
        "operationId": "ActiveDirectoryService_CreateDomain",
        "parameters": [
          {
            "name": "domainCreateArgs",
            "in": "body",
            "description": "Domain creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DomainCreateData",
              "description": "Domain creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domain object",
            "schema": {
              "$ref": "#/definitions/DomainModel",
              "description": "Domain object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/active-directory/domains/{id}": {
      "get": {
        "tags": [
          "ActiveDirectory"
        ],
        "summary": "Get Domain",
        "description": "Get a single Domain by ID",
        "operationId": "ActiveDirectoryService_Load",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Domain ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain object",
            "schema": {
              "$ref": "#/definitions/DomainModel",
              "description": "Domain object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/active-directory/synchronize": {
      "post": {
        "tags": [
          "ActiveDirectory"
        ],
        "summary": "Synchronize Active Directory Groups and Users",
        "description": "Synchronize Members from Active Directory Groups that have Sync enabled",
        "operationId": "ActiveDirectoryService_Synchronize",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bool",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/app-clients": {
      "post": {
        "tags": [
          "AppClients"
        ],
        "summary": "Create App Client",
        "description": "Create a new app client",
        "operationId": "AppClientsService_CreateClient",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "App client creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AppClientCreateArgs",
              "description": "App client creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App client object",
            "schema": {
              "$ref": "#/definitions/AppClientModel",
              "description": "App client object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/app-clients/{id}": {
      "get": {
        "tags": [
          "AppClients"
        ],
        "summary": "Get App Client",
        "description": "Get a single app client by ID",
        "operationId": "AppClientsService_GetClient",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive app clients",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "App client ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "App client object",
            "schema": {
              "$ref": "#/definitions/AppClientModel",
              "description": "App client object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AppClients"
        ],
        "summary": "Update App Client",
        "description": "Update a single app client by ID",
        "operationId": "AppClientsService_UpdateClient",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "App client update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AppClientUpdateArgs",
              "description": "App client update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "App client ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "App client object",
            "schema": {
              "$ref": "#/definitions/AppClientModel",
              "description": "App client object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AppClients"
        ],
        "summary": "Delete App Client",
        "description": "Delete an app client by ID",
        "operationId": "AppClientsService_DeleteClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App client ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/app-clients/stub": {
      "get": {
        "tags": [
          "AppClients"
        ],
        "summary": "Get App Client Stub",
        "description": "Return the default values for a new app client",
        "operationId": "AppClientsService_Stub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "App client object",
            "schema": {
              "$ref": "#/definitions/AppClientModel",
              "description": "App client object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/application-access-request/{deviceId}": {
      "get": {
        "tags": [
          "ApplicationRequest"
        ],
        "summary": "Get Application Access Requests by Device Id.",
        "description": "Get Application Access Requests by Device Id.",
        "operationId": "ApplicationRequestService_GetRequestByDeviceId",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "deviceId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "schema": {
              "$ref": "#/definitions/ApplicationAccessRequestViewModel",
              "description": "Secret Access Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ApplicationRequest"
        ],
        "summary": "Get Application Access Requests by Device Id.",
        "description": "Get Application Access Requests by Device Id.",
        "operationId": "ApplicationRequestService_UpdateRequest",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ApplicationAccessRequestUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "deviceId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "schema": {
              "$ref": "#/definitions/ApplicationAccessRequestViewModel",
              "description": "Secret Access Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/application-access-request-audits": {
      "get": {
        "tags": [
          "ApplicationRequest"
        ],
        "summary": "Get Application Access Request Audits by Device Id.",
        "description": "Get Application Access Request Audits by Device Id.",
        "operationId": "ApplicationRequestService_GetAudits",
        "parameters": [
          {
            "name": "filter.deviceId",
            "in": "query",
            "description": "DeviceId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Application Access Request Audit View Model",
            "schema": {
              "$ref": "#/definitions/PagingOfApplicationAccessRequestAuditViewModel",
              "description": "Application Access Request Audit View Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/application-access-requests": {
      "get": {
        "tags": [
          "ApplicationRequest"
        ],
        "summary": "Get Application Access Requests by Status for Current User.",
        "description": "Get Application Access Requests by Status for Current User.",
        "operationId": "ApplicationRequestService_SearchRequestsByStatus",
        "parameters": [
          {
            "name": "filter.status",
            "in": "query",
            "description": "Status",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "schema": {
              "$ref": "#/definitions/PagingOfApplicationAccessRequestViewModel",
              "description": "Secret Access Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/application-accounts/lookup": {
      "get": {
        "tags": [
          "ApplicationAccounts"
        ],
        "summary": "Lookup Application Accounts",
        "description": "Search, filter, sort, and page application accounts, returning only user id and display",
        "operationId": "ApplicationAccountsService_LookupAccount",
        "parameters": [
          {
            "name": "filter.includeAll",
            "in": "query",
            "description": "IncludeAll",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Include inactive application accounts in the results. Inactive application accounts are included by default.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfUserLookup",
              "description": "User search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/application-settings": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the application settings configuration",
        "description": "Update the application settings configuration",
        "operationId": "ConfigurationService_PatchApplicationSettingsConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Application settings update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationApplicationSettingsPatchArgs",
              "description": "Application settings update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application Settings Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationApplicationSettingsViewModel",
              "description": "Application Settings Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/audit": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Audit of system configuration changes",
        "description": "Audit of system configuration changes",
        "operationId": "ConfigurationService_GetConfigurationAudit",
        "parameters": [
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration audit items",
            "schema": {
              "$ref": "#/definitions/PagingOfConfigurationAuditItem",
              "description": "Configuration audit items"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/backup": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Database Backup Configuration",
        "description": "Retrieve the settings and descriptions for the database backup configuration view model.",
        "operationId": "ConfigurationService_GetDatabaseBackupConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Database Backup Configuration",
            "schema": {
              "$ref": "#/definitions/BackupConfigurationModel",
              "description": "Database Backup Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Patch Backup Configuration",
        "description": "Patch Backup Configuration by sending one or more fields with dirty set to true.  This will return the actual updated view model.",
        "operationId": "ConfigurationService_PatchDatabaseBackupConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Backup Configuration Update Settings",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BackupConfigurationArgs",
              "description": "Backup Configuration Update Settings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Backup Configuration",
            "schema": {
              "$ref": "#/definitions/BackupConfigurationModel",
              "description": "Updated Backup Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/backup/run-now": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Start Database Backup",
        "description": "Start the database backup as configured",
        "operationId": "ConfigurationService_RunBackupNow",
        "parameters": [],
        "responses": {
          "200": {
            "description": "true if the job was queued",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/backup-logs": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Backup Logs",
        "description": "Retrieve the logs for the backups run.",
        "operationId": "ConfigurationService_GetBackupLogs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Backup Logs",
            "schema": {
              "description": "Backup Logs",
              "items": {
                "$ref": "#/definitions/BackupLogViewModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/email": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the email configuration",
        "description": "Update the email configuration",
        "operationId": "ConfigurationService_PatchEmailConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Email update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationEmailPatchArgs",
              "description": "Email update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationEmailViewModel",
              "description": "Email Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/folder": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Folder",
        "description": "Update Folder Configuration",
        "operationId": "ConfigurationService_PatchFolderConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Folders configuration args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationFoldersPatchArgs",
              "description": "Folders configuration args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationSessionRecordingModel",
              "description": "Folder Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/general": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the general configuration",
        "description": "Get configuration",
        "operationId": "ConfigurationService_GetGeneralConfiguration",
        "parameters": [
          {
            "name": "loadAll",
            "in": "query",
            "description": "Load all configuration sections",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadApplicationSettings",
            "in": "query",
            "description": "Load application settings section",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadEmail",
            "in": "query",
            "description": "Load email section",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadFolders",
            "in": "query",
            "description": "Load folder configuration section",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadLauncherSettings",
            "in": "query",
            "description": "Load launcher settings section",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadLocalUserPasswords",
            "in": "query",
            "description": "Load local user passwords section",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadPermissionOptions",
            "in": "query",
            "description": "Load permission options configuration section",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadUserExperience",
            "in": "query",
            "description": "Load user experience configuration section",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadUserInterface",
            "in": "query",
            "description": "Load user interface section",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationGeneralModel",
              "description": "Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update general configuration",
        "description": "Update general configuration",
        "operationId": "ConfigurationService_PatchGeneralConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Local user password update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationGeneralPatchArgs",
              "description": "Local user password update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationGeneralModel",
              "description": "Updated Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/internal-site-connector": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Internal Site Connector Configuration",
        "description": "Internal Site Connector Configuration",
        "operationId": "ConfigurationService_GetInternalSiteConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Internal Site Connector Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationInternalSiteConnectorModel",
              "description": "Internal Site Connector Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Internal Site Connector",
        "description": "Update Internal Site Connector",
        "operationId": "ConfigurationService_PatchInternalSiteConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Internal Site Connector Update Options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationInternalSiteConnectorPatchArgs",
              "description": "Internal Site Connector Update Options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Internal Site Connector Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationInternalSiteConnectorModel",
              "description": "Internal Site Connector Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/launcher-settings": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the launcher settings configuration",
        "description": "Update the launcher settings configuration",
        "operationId": "ConfigurationService_PatchLauncherSettingsConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Launcher settings update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationLauncherSettingsPatchArgs",
              "description": "Launcher settings update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "launcher settings Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationLauncherSettingsViewModel",
              "description": "launcher settings Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/local-user-passwords": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the local user password configuration",
        "description": "Get the local user password configuration.  Password requirements only require an authenticated user.  Extended fields will be null unless you have the View / Administer Configuration role permission.",
        "operationId": "ConfigurationService_GetLocalPasswordConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Local User Password Configuration Settings",
            "schema": {
              "$ref": "#/definitions/ConfigurationLocalUserPasswordsModel",
              "description": "Local User Password Configuration Settings"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the local user password configuration",
        "description": "Update the local user password configuration",
        "operationId": "ConfigurationService_PatchLocalPasswordConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Local user password update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationLocalPasswordPatchArgs",
              "description": "Local user password update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Local User Password Configuration Settings",
            "schema": {
              "$ref": "#/definitions/ConfigurationLocalUserPasswordsModel",
              "description": "Local User Password Configuration Settings"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/login": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Login configuration",
        "description": "Get Login Configuration",
        "operationId": "ConfigurationService_GetLoginConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Login Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationLoginModel",
              "description": "Login Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Login configuration",
        "description": "Update Login Configuration",
        "operationId": "ConfigurationService_PatchLoginConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Login update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationLoginPatchArgs",
              "description": "Login update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login configuration after updates",
            "schema": {
              "$ref": "#/definitions/ConfigurationLoginModel",
              "description": "Login configuration after updates"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/permission-options": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the permission options configuration",
        "description": "Update the permission options configuration",
        "operationId": "ConfigurationService_PatchPermissionOptionsConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Permission options update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationPermissionOptionsPatchArgs",
              "description": "Permission options update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission Options Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationPermissionOptionsViewModel",
              "description": "Permission Options Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/protocol-handler-settings": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the protocol handler settings configuration",
        "description": "Update the protocol handler settings configuration",
        "operationId": "ConfigurationService_PatchProtocolHandlerSettingsConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Protocol handler settings update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationProtocolHandlerSettingsPatchArgs",
              "description": "Protocol handler settings update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "protocol handler settings Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationProtocolHandlerSettingsViewModel",
              "description": "protocol handler settings Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/public-ssh-key": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Public SSH Key Expiration",
        "description": "Public SSH Key Expiration",
        "operationId": "ConfigurationService_GetPublicSshKeyExpiration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Public SSH Key Expiration Result",
            "schema": {
              "$ref": "#/definitions/PublicSshKeyConfigurationViewModel",
              "description": "Public SSH Key Expiration Result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/rpc": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get RPC configuration",
        "description": "Get Remote Password Configuration",
        "operationId": "ConfigurationService_GetRpcConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "RPC Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationRpcModel",
              "description": "RPC Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update RPC configuration",
        "description": "Update Remote Password Configuration",
        "operationId": "ConfigurationService_PatchRpcConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Local user password update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationRpcPatchArgs",
              "description": "Local user password update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RPC configuration after updates",
            "schema": {
              "$ref": "#/definitions/ConfigurationRpcModel",
              "description": "RPC configuration after updates"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/saml": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Saml configuration",
        "description": "Get Saml Configuration",
        "operationId": "ConfigurationService_GetSamlConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Saml Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationSamlModel",
              "description": "Saml Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Saml configuration",
        "description": "Update Saml Configuration",
        "operationId": "ConfigurationService_PatchSamlConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Saml update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationSamlPatchArgs",
              "description": "Saml update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Saml configuration after updates",
            "schema": {
              "$ref": "#/definitions/ConfigurationSamlModel",
              "description": "Saml configuration after updates"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/saml/identity-provider": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Create Saml configuration",
        "description": "Create Saml Configuration",
        "operationId": "ConfigurationService_PostSamlConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Saml create args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationSamlIdentityProviderCreateArgs",
              "description": "Saml create args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Saml configuration after create",
            "schema": {
              "$ref": "#/definitions/ConfigurationSamlIdentityProviderModel",
              "description": "Saml configuration after create"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Saml Identity Provider configuration",
        "description": "Update Saml Identity Provider Configuration",
        "operationId": "ConfigurationService_PatchSamlIdentityProviderConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Saml Identity Provider update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationSamlIdentityProviderPatchArgs",
              "description": "Saml Identity Provider update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Saml Identity Provider configuration after updates",
            "schema": {
              "$ref": "#/definitions/ConfigurationSamlIdentityProviderModel",
              "description": "Saml Identity Provider configuration after updates"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/saml/identity-provider/{id}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Saml Identity Provider configuration",
        "description": "Get Saml Identity Provider Configuration",
        "operationId": "ConfigurationService_GetSamlIdentityProviderConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Saml Identity Provider Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Saml Identity Provider configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationSamlIdentityProviderModel",
              "description": "Saml Identity Provider configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/secret-search-indexer": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Secret Search Indexer Configuration",
        "description": "Secret Search Indexer Configuration",
        "operationId": "ConfigurationService_GetSecretSearchIndexerConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Secret Search Indexer Configuration",
            "schema": {
              "$ref": "#/definitions/SearchIndexerModel",
              "description": "Secret Search Indexer Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Secret Search Indexer Configuration",
        "description": "Update Secret Search Indexer Configuration",
        "operationId": "ConfigurationService_PatchSecretSearchIndexerConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret Search Indexer Configuration Update Settings",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchIndexerUpdateArgs",
              "description": "Secret Search Indexer Configuration Update Settings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Secret Search Indexer Configuration",
            "schema": {
              "$ref": "#/definitions/SearchIndexerModel",
              "description": "Updated Secret Search Indexer Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/secret-search-indexer/rebuild-index": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Rebuild Secret Search Index",
        "description": "Start Rebuilding the Secret Search Index.  This method just indicates that a background process should start to process the index.",
        "operationId": "ConfigurationService_RebuildSecretSearchIndexerConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "true if the job was queued",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/security": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Security configuration",
        "description": "Get Security Configuration",
        "operationId": "ConfigurationService_GetSecurityConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Security Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationSecurityModel",
              "description": "Security Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Security configuration",
        "description": "Update Security Configuration",
        "operationId": "ConfigurationService_PatchSecurityConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Security update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationSecurityPatchArgs",
              "description": "Security update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Security configuration after updates",
            "schema": {
              "$ref": "#/definitions/ConfigurationSecurityModel",
              "description": "Security configuration after updates"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/sessionrecording": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Session Recording",
        "description": "Update Session Recording Configuration",
        "operationId": "ConfigurationService_PatchSessionRecordingConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Local user password update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationSessionRecordingPatchArgs",
              "description": "Local user password update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session Recording Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationSessionRecordingModel",
              "description": "Session Recording Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/site-connector": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Site Connectors",
        "description": "Site Connectors",
        "operationId": "ConfigurationService_GetSiteConnectors",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "includeInactive",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Site Connectors",
            "schema": {
              "description": "Site Connectors",
              "items": {
                "$ref": "#/definitions/SiteConnectorsSummaryModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/system-log": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get system log configuration",
        "description": "Get system log configuration",
        "operationId": "ConfigurationService_GetSystemLogConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "System log configuration",
            "schema": {
              "$ref": "#/definitions/SystemLogConfigurationViewModel",
              "description": "System log configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Patch system log configuration",
        "description": "Patch system log configuration",
        "operationId": "ConfigurationService_PatchSystemLogConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SystemLogConfigurationUpdateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System log configuration",
            "schema": {
              "$ref": "#/definitions/SystemLogConfigurationViewModel",
              "description": "System log configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/system-log/clear": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Clear system log",
        "description": "Clear system log",
        "operationId": "ConfigurationService_ClearSystemLog",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cleared System Log Result",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/ticket-system": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the ticket system configuration",
        "description": "Get the ticket system configuration",
        "operationId": "ConfigurationService_GetTicketSystemConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ticket System Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationTicketSystemViewModel",
              "description": "Ticket System Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the ticket system configuration",
        "description": "Update the ticket system configuration",
        "operationId": "ConfigurationService_PatchTicketSystemConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Ticket System update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationTicketSystemArgs",
              "description": "Ticket System update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket System Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationTicketSystemListCreateOrPatchModel",
              "description": "Ticket System Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/unlimited-admin": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Unlimited Admin",
        "description": "Update Unlimited Admin",
        "operationId": "ConfigurationService_UpdateUnlimitedAdmin",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Unlimited Admin Update Options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UnlimitedAdminUpdateArgs",
              "description": "Unlimited Admin Update Options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/user-experience": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the user experience configuration",
        "description": "Update the user experience configuration",
        "operationId": "ConfigurationService_PatchUserExperienceConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "User experience update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationUserExperiencePatchArgs",
              "description": "User experience update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Experience Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationUserExperienceViewModel",
              "description": "User Experience Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/configuration/user-interface": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the user interface configuration",
        "description": "Update the user interface configuration",
        "operationId": "ConfigurationService_PatchUserInterfaceConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "User interface update args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationUserInterfacePatchArgs",
              "description": "User interface update args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Interface Configuration",
            "schema": {
              "$ref": "#/definitions/ConfigurationUserInterfaceViewModel",
              "description": "User Interface Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/connection-manager-settings": {
      "get": {
        "tags": [
          "ConnectionManagerSettings"
        ],
        "summary": "Get Connection Manager Settings",
        "description": "Get Connection Manager Settings",
        "operationId": "ConnectionManagerSettingsService_Get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Connection Manager Settings",
            "schema": {
              "$ref": "#/definitions/ConnectionManagerSettingsModel",
              "description": "Connection Manager Settings"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/devops-secrets-vault/add-sync": {
      "post": {
        "tags": [
          "DevOpsSecretsVaultSync"
        ],
        "summary": "Sync a secret.",
        "description": "Create a sync between a secret and a DevOps Secrets Vault tenant.",
        "operationId": "DevOpsSecretsVaultSyncService_CreateSync",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultCreateSyncArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The status of the secret's sync.",
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultSyncStatusModel",
              "description": "The status of the secret's sync."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/devops-secrets-vault/sync": {
      "post": {
        "tags": [
          "DevOpsSecretsVaultSync"
        ],
        "summary": "Sync a secret.",
        "description": "Create a sync between a secret and a DevOps Secrets Vault tenant.",
        "operationId": "DevOpsSecretsVaultSyncService_SyncSecret",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultSyncSecretsArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The status of the secret's sync.",
            "schema": {
              "description": "The status of the secret's sync.",
              "items": {
                "$ref": "#/definitions/DevOpsSecretsVaultSyncStatusViewModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/devops-secrets-vault/sync/{syncSecretMapId}": {
      "put": {
        "tags": [
          "DevOpsSecretsVaultSync"
        ],
        "summary": "Sync a secret.",
        "description": "Create a sync between a secret and a DevOps Secrets Vault tenant.",
        "operationId": "DevOpsSecretsVaultSyncService_UpdateSync",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultCreateSyncArgs",
              "description": "args"
            }
          },
          {
            "name": "syncSecretMapId",
            "in": "path",
            "description": "syncSecretMapId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The status of the secret's sync.",
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultSyncStatusModel",
              "description": "The status of the secret's sync."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/devops-secrets-vault/sync/status": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultSync"
        ],
        "summary": "Information about secrets syncing.",
        "description": "Get which tenants a secret is syncing to, the current status of the sync, and the last sync time.",
        "operationId": "DevOpsSecretsVaultSyncService_GetSyncStatuses",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "If inactive sync maps should be returned.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.secretId",
            "in": "query",
            "description": "Search by the secret being synced.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.tenantId",
            "in": "query",
            "description": "Search by the tenant being pushed to.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of statuses for secret syncing.",
            "schema": {
              "$ref": "#/definitions/PagingOfDevOpsSecretsVaultSyncStatusSummary",
              "description": "A list of statuses for secret syncing."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/devops-secrets-vault/sync/status/{syncMapId}": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultSync"
        ],
        "summary": "Information about secrets syncing.",
        "description": "Get which tenants a secret is syncing to, the current status of the sync, and the last sync time.",
        "operationId": "DevOpsSecretsVaultSyncService_GetSyncStatus",
        "parameters": [
          {
            "name": "syncMapId",
            "in": "path",
            "description": "syncMapId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The status of a secret syncing to a tenant.",
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultSyncStatusModel",
              "description": "The status of a secret syncing to a tenant."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/devops-secrets-vault/tenant": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "Get DevOps Secrets Vault Tenants.",
        "description": "Search, filter, sort, and page DevOps Secrets Vault Tenants.",
        "operationId": "DevOpsSecretsVaultTenantService_GetList",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "If inactive tenants should be returned. Defaulted to false.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.nameSearch",
            "in": "query",
            "description": "Search by tenant names.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The DevOps Secrets Vault Tenants that were found.",
            "schema": {
              "$ref": "#/definitions/PagingOfDevOpsSecretsVaultTenantSummary",
              "description": "The DevOps Secrets Vault Tenants that were found."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "Save a DevOps Secrets Vault Tenant.",
        "description": "Updates an existing DevOps Secrets Vault Tenant, or creates a new one.",
        "operationId": "DevOpsSecretsVaultTenantService_Create",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultCreateTenantArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The DevOps Secrets Vault Tenant Id.",
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultTenantModel",
              "description": "The DevOps Secrets Vault Tenant Id."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/devops-secrets-vault/tenant/{id}": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "Get a DevOps Secrets Vault Tenant.",
        "description": "Get the DevOps Secrets Vault Tenant with the Tenant ID provided.",
        "operationId": "DevOpsSecretsVaultTenantService_GetTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The DevOps Secrets Vault Tenant model.",
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultTenantModel",
              "description": "The DevOps Secrets Vault Tenant model."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "Update a DevOps Secrets Vault Tenant.",
        "description": "Updates an existing DevOps Secrets Vault Tenant, or creates a new one.",
        "operationId": "DevOpsSecretsVaultTenantService_Update",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultUpdateTenantArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The DevOps Secrets Vault Tenant Id.",
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultTenantModel",
              "description": "The DevOps Secrets Vault Tenant Id."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/devops-secrets-vault/tenant/audits": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "DSV Tenant Audits.",
        "description": "Retrieves the changes made to your DSV Tenants.",
        "operationId": "DevOpsSecretsVaultTenantService_GetTenantAudits",
        "parameters": [
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search for text in the audit log.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.tenantId",
            "in": "query",
            "description": "Optional filter by tenant id.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The paginated list of DSV Tenant audits.",
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultTenantAuditSummary",
              "description": "The paginated list of DSV Tenant audits."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/devops-secrets-vault/tenant/stub": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "DevOps Secrets Vault Tenant Model.",
        "description": "Retrieve an empty instance of a DevOps Secrets Vault Tenant.",
        "operationId": "DevOpsSecretsVaultTenantService_GetTenantStub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A DevOps Secrets Vault Tenant with no values.",
            "schema": {
              "$ref": "#/definitions/DevOpsSecretsVaultTenantModel",
              "description": "A DevOps Secrets Vault Tenant with no values."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Diagnostic Information",
        "description": "Get Diagnostic Information",
        "operationId": "DiagnosticsService_GetDiagnosticInformation",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Diagnostics Info object",
            "schema": {
              "$ref": "#/definitions/DiagnosticsSummary",
              "description": "Diagnostics Info object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/app-settings": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get App Settings",
        "description": "Get App Settings",
        "operationId": "DiagnosticsService_GetAppSettings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "App Setting Dictionary",
            "schema": {
              "$ref": "#/definitions/DictionaryOfStringAndString",
              "description": "App Setting Dictionary"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/background-processes": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Background Processes",
        "description": "Get Background Process Information",
        "operationId": "DiagnosticsService_GetBackgroundProcesses",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Background Process Enumerable",
            "schema": {
              "description": "Background Process Enumerable",
              "items": {
                "$ref": "#/definitions/ThreadInformation"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/clear-quartz-job-errors": {
      "post": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Clear Quartz Job Errors",
        "description": "Clear Quartz Job Errors",
        "operationId": "DiagnosticsService_ClearQuartzJobErrors",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Clear Quartz Job Errors Success",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/clear-upgrade-in-progress": {
      "post": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Clear Upgrade In Progress",
        "description": "Clear Upgrade In Progress",
        "operationId": "DiagnosticsService_ClearUpgradeInProgress",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Clear Upgrade In Progress Success",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/computer-scan-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get ComputerScan Logs",
        "description": "Get ComputerScan Logs",
        "operationId": "DiagnosticsService_GetComputerScanLogs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get ComputerScan Logs",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/connectivity-report": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Connectivity Report",
        "description": "Get Connectivity Report",
        "operationId": "DiagnosticsService_GetConnectivityReport",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Connectivity Report",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/discovery-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Discovery Logs",
        "description": "Get Discovery Logs",
        "operationId": "DiagnosticsService_GetDiscoveryLogs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get Discovery Logs",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/general-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get General Logs",
        "description": "Get General Logs",
        "operationId": "DiagnosticsService_GetGeneralLogs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get General Logs",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/heartbeat-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Heartbeat Logs",
        "description": "Get Heartbeat Logs",
        "operationId": "DiagnosticsService_GetHeartbeatLogs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get Heartbeat Logs",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/quartz-jobs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Quartz Jobs",
        "description": "Get Quartz Jobs",
        "operationId": "DiagnosticsService_GetQuartzJobs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Enumerable of Quartz Jobs",
            "schema": {
              "description": "Enumerable of Quartz Jobs",
              "items": {
                "$ref": "#/definitions/QuartzTrigger"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/rpc-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get RPC Logs",
        "description": "Get RPC Logs",
        "operationId": "DiagnosticsService_GetRPCLogs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get RPC Logs",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/system-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get System Logs",
        "description": "Get System Logs",
        "operationId": "DiagnosticsService_GetSystemLogs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get System Logs",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/diagnostics/test-event-log": {
      "post": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Test Event Log",
        "description": "Test Event Log",
        "operationId": "DiagnosticsService_TestEventLog",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Test Event Log Success",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/configuration": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Directory Services Configuration",
        "description": "Retrieve the current settings for Directory Services configuration",
        "operationId": "DirectoryServicesService_GetDirectoryServicesConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Directory Services Configuration",
            "schema": {
              "$ref": "#/definitions/DirectoryServicesConfigurationModel",
              "description": "Directory Services Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Update Directory Services Configuration",
        "description": "Update the current settings for Directory Services configuration",
        "operationId": "DirectoryServicesService_PatchDirectoryServicesConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DirectoryServicesConfigurationUpdateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Directory Services Configuration",
            "schema": {
              "$ref": "#/definitions/DirectoryServicesConfigurationModel",
              "description": "Updated Directory Services Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/domains": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Search Domains",
        "description": "Search Domains",
        "operationId": "DirectoryServicesService_SearchDomains",
        "parameters": [
          {
            "name": "filter.domainName",
            "in": "query",
            "description": "DomainName",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Domains that matched",
            "schema": {
              "$ref": "#/definitions/IPagingOfDomainSummaryModel",
              "description": "Domains that matched"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Create a new domain",
        "description": "Create a new domain",
        "operationId": "DirectoryServicesService_CreateDomain",
        "parameters": [
          {
            "name": "args",
            "in": "path",
            "description": "args",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain that was just created",
            "schema": {
              "$ref": "#/definitions/DomainModel",
              "description": "Domain that was just created"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/domains/{domainId}": {
      "patch": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Patch a domain",
        "description": "Patch a domain",
        "operationId": "DirectoryServicesService_PatchDomain",
        "parameters": [
          {
            "name": "args",
            "in": "path",
            "description": "args",
            "required": true,
            "type": "object"
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain that was just updated",
            "schema": {
              "$ref": "#/definitions/DomainModel",
              "description": "Domain that was just updated"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/domains/{domainId}/group": {
      "post": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Link a group from the directory",
        "description": "Linking or adding a group to a domain will syncrhonize all users from the directory to SS that are members of this group.",
        "operationId": "DirectoryServicesService_LinkDomainGroup",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LinkDomainGroupArgs",
              "description": "args"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success status",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/domains/{domainId}/group/{groupId}": {
      "delete": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Unlink a group from domain",
        "description": "Unlinking a group from a domain will disable future synchronization updates. The group will also be disabled.",
        "operationId": "DirectoryServicesService_UnlinkDomainGroup",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success status",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/domains/{domainId}/groups/search-directory": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Search in the directory for groups",
        "description": "Using the credentials defined on the domain search within the directory for groups",
        "operationId": "DirectoryServicesService_SearchDirectoryForGroups",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search text. Use * for wildcards, ex: Admin*. Leave empty to return all.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of groups matching search criteria",
            "schema": {
              "$ref": "#/definitions/DirectoryServicesGroupViewModel",
              "description": "Array of groups matching search criteria"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/domains/{domainId}/members": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Search in the directory for members of a group",
        "description": "Using the credentials defined on the domain find members of a group within the directory",
        "operationId": "DirectoryServicesService_GetDirectoryGroupMembers",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "domainIdentifier",
            "in": "query",
            "description": "The unique directory identifier for the group to be linked.  For example, this is ADGuid in Active Directory",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "query",
            "description": "Name of the Group",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of users in the passed in group",
            "schema": {
              "$ref": "#/definitions/DirectoryServicesGroupMemberResponse",
              "description": "Array of users in the passed in group"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/domains/{id}": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Get a Domain",
        "description": "Get a Domain",
        "operationId": "DirectoryServicesService_GetDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain that was found",
            "schema": {
              "$ref": "#/definitions/DomainModel",
              "description": "Domain that was found"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/domains/ldap-settings/{domainId}": {
      "patch": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Patch Ldap Sync Settings for a domain",
        "description": "Patch Ldap Sync Settings for a domain",
        "operationId": "DirectoryServicesService_PatchLdapSyncSettings",
        "parameters": [
          {
            "name": "args",
            "in": "path",
            "description": "args",
            "required": true,
            "type": "object"
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain that was just updated",
            "schema": {
              "$ref": "#/definitions/LdapSyncSettingsViewModel",
              "description": "Domain that was just updated"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/domains/ldap-settings/{id}": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Get Ldap synchronization settings for a domain",
        "description": "Get Ldap synchronization settings for a domain",
        "operationId": "DirectoryServicesService_GetLdapSyncSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ldap synchronization settings for the domain",
            "schema": {
              "$ref": "#/definitions/LdapSyncSettingsViewModel",
              "description": "Ldap synchronization settings for the domain"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/domains/stub": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Get a Domain Stub",
        "description": "Get a Domain Stub",
        "operationId": "DirectoryServicesService_GetDomainStub",
        "parameters": [
          {
            "name": "domainType",
            "in": "query",
            "description": "domainType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain Stub",
            "schema": {
              "$ref": "#/definitions/DomainModel",
              "description": "Domain Stub"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/synchronization": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Directory Services Sync Status",
        "description": "Return status of directory services synchronization",
        "operationId": "DirectoryServicesService_GetSynchronizationStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Whether or not the sync has started",
            "schema": {
              "$ref": "#/definitions/DirectoryServicesSynchronizationStatus",
              "description": "Whether or not the sync has started"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/synchronization/log": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Get Synchronization Log",
        "description": "Get Synchronization Log",
        "operationId": "DirectoryServicesService_GetSynchronizationLog",
        "parameters": [
          {
            "name": "paging",
            "in": "path",
            "description": "paging",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "Synchronization log entries",
            "schema": {
              "$ref": "#/definitions/PagingOfDirectoryServicesSynchronizationLogEntry",
              "description": "Synchronization log entries"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/directory-services/synchronization-now": {
      "post": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Synchronize all directory services",
        "description": "Run synchronize to update users and groups for all configurated and enabled domains in all directories and domains",
        "operationId": "DirectoryServicesService_SynchronizeNow",
        "parameters": [],
        "responses": {
          "200": {
            "description": "True if the command was initiated successfully",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/configuration": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Discovery Configuration",
        "description": "Get Discovery Configuration",
        "operationId": "DiscoveryService_GetDiscoveryConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Discovery Configuration",
            "schema": {
              "$ref": "#/definitions/DiscoveryConfigurationModel",
              "description": "Discovery Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Discovery"
        ],
        "summary": "Update discovery configuration",
        "description": "Update discovery configuration",
        "operationId": "DiscoveryService_UpdateDiscoveryConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiscoveryConfigurationUpdateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated discovery configuration",
            "schema": {
              "$ref": "#/definitions/DiscoveryConfigurationModel",
              "description": "The updated discovery configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/run": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "summary": "Run a discovery command",
        "description": "Run a discovery command",
        "operationId": "DiscoveryService_RunDiscoveryNow",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiscoveryRunArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "true to indicate the command was triggered",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/scan-types": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Discovery Scan Types",
        "description": "Get all of the scan types",
        "operationId": "DiscoveryService_GetScanTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Discovery Scan Types",
            "schema": {
              "description": "Discovery Scan Types",
              "items": {
                "$ref": "#/definitions/DiscoveryScanTypeSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/source": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "summary": "Create a new discovery source",
        "description": "Creates a new discovery source",
        "operationId": "DiscoveryService_CreateDiscoverySource",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiscoverySourceCreateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new discovery source",
            "schema": {
              "$ref": "#/definitions/DiscoverySourceModel",
              "description": "The new discovery source"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/source/{discoverySourceId}/available-scanners": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Discovery Source Available Scanners",
        "description": "Get all of the scanners that can be created for this specific discovery source",
        "operationId": "DiscoveryService_GetAvailableDiscoverySourceScanners",
        "parameters": [
          {
            "name": "discoverySourceId",
            "in": "path",
            "description": "discoverySourceId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Discovery Scanner Types",
            "schema": {
              "description": "Discovery Scanner Types",
              "items": {
                "$ref": "#/definitions/DiscoveryScannerSettingTypeSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/source/{discoverySourceId}/filter/{memberId}": {
      "patch": {
        "tags": [
          "Discovery"
        ],
        "summary": "Patches discovery source filter",
        "description": "Patches the properties on a single discovery source filter",
        "operationId": "DiscoveryService_PatchDiscoverySourceFilter",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiscoverySourceFilterPatchArgs",
              "description": "args"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "memberId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "True",
            "schema": {
              "$ref": "#/definitions/DomainDiscoveryScopeFilterModel",
              "description": "True"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/source/{discoverySourceId}/filters": {
      "put": {
        "tags": [
          "Discovery"
        ],
        "summary": "Updates discovery source filters",
        "description": "Updates the full collection of discovery source filters for a discovery source",
        "operationId": "DiscoveryService_UpdateDiscoverySourceFilters",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiscoverySourceFiltersUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "discoverySourceId",
            "in": "path",
            "description": "discoverySourceId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The source filter for a discovery source",
            "schema": {
              "$ref": "#/definitions/DomainDiscoveryScopeModel",
              "description": "The source filter for a discovery source"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/source/{discoverySourceId}/ou": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get and include or exclude for discovery",
        "description": "Returns the discovery source OU",
        "operationId": "DiscoveryService_SearchForDomainOu",
        "parameters": [
          {
            "name": "discoverySourceId",
            "in": "path",
            "description": "discoverySourceId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Only return items that can be included",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search for OU items containing this text",
            "required": false,
            "type": "string"
          },
          {
            "name": "selectedIds",
            "in": "query",
            "description": "When include is false only include items within these exisitng IDs",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The Discovery OU",
            "schema": {
              "description": "The Discovery OU",
              "items": {
                "$ref": "#/definitions/OUModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/source/{discoverySourceId}/scanner-settings": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "summary": "Create scanner setting",
        "description": "Create a scanner setting on a discovery source",
        "operationId": "DiscoveryService_CreateDiscoverySourceScannerSettings",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiscoveryScannerSettingCreateArgs",
              "description": "args"
            }
          },
          {
            "name": "discoverySourceId",
            "in": "path",
            "description": "discoverySourceId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "New scanner setting",
            "schema": {
              "$ref": "#/definitions/DiscoveryScannerSettingViewModel",
              "description": "New scanner setting"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/source/{discoverySourceId}/scanner-settings/search": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Scanner Settings",
        "description": "Get all of the scanner settings for a specific discovery source",
        "operationId": "DiscoveryService_SearchDiscoverySourceScannerSettings",
        "parameters": [
          {
            "name": "discoverySourceId",
            "in": "path",
            "description": "discoverySourceId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of scanner settings",
            "schema": {
              "description": "Collection of scanner settings",
              "items": {
                "$ref": "#/definitions/DiscoveryScannerSettingSummaryModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/source/{id}": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get discovery source",
        "description": "Returns the discovery source",
        "operationId": "DiscoveryService_GetDiscoverySource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Discovery Source ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The Discovery Source View",
            "schema": {
              "$ref": "#/definitions/DiscoverySourceModel",
              "description": "The Discovery Source View"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Discovery"
        ],
        "summary": "Update a discovery source",
        "description": "Update an existing discovery source using the existing discovery source ID",
        "operationId": "DiscoveryService_UpdateDiscoverySource",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DiscoverySourceUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Discovery Source ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated discovery source",
            "schema": {
              "$ref": "#/definitions/DiscoverySourceModel",
              "description": "The updated discovery source"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/source/{id}/filter": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get the source filter for a discovery source",
        "description": "Get the source filter for a discovery source",
        "operationId": "DiscoveryService_GetDiscoverySourceFilter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The source filter for a discovery source",
            "schema": {
              "$ref": "#/definitions/DomainDiscoveryScopeModel",
              "description": "The source filter for a discovery source"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/source/stub/{typeId}": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get a Discovery Source Stub",
        "description": "Get a Discovery Source Stub",
        "operationId": "DiscoveryService_GetDiscoverySourceStub",
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "description": "Discovery Source Type ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Discovery Source Stub",
            "schema": {
              "$ref": "#/definitions/DiscoverySourceModel",
              "description": "Discovery Source Stub"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/sources": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get discovery sources",
        "description": "Returns discovery sources",
        "operationId": "DiscoveryService_SearchDiscoverySources",
        "parameters": [
          {
            "name": "filter.discoverySourceName",
            "in": "query",
            "description": "DiscoverySourceName",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.discoverySourceType",
            "in": "query",
            "description": "DiscoverySourceType",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The Discovery Source Views",
            "schema": {
              "$ref": "#/definitions/DiscoverySourceSummaryModel",
              "description": "The Discovery Source Views"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery/status": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Discovery Status",
        "description": "Get Discovery Status",
        "operationId": "DiscoveryService_GetDiscoveryStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Discovery Status",
            "schema": {
              "$ref": "#/definitions/DiscoveryStatusModel",
              "description": "Discovery Status"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/discovery-source/audit": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Discovery Source Audits",
        "description": "Get Discovery Source Audits",
        "operationId": "DiscoveryService_GetDiscoverySourceAudits",
        "parameters": [
          {
            "name": "filter.discoverySourceId",
            "in": "query",
            "description": "DiscoverySourceId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Discovery Source Audits",
            "schema": {
              "$ref": "#/definitions/IPagingOfDiscoverySourceAudit",
              "description": "Discovery Source Audits"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/{id}/server-capabilities": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Server Capabilities",
        "description": "Gets the server capabilities of an engine's server",
        "operationId": "DistributedEngineService_GetServerCapabilities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the server capabilities of an engine's server",
            "schema": {
              "description": "Returns the server capabilities of an engine's server",
              "items": {
                "$ref": "#/definitions/EngineServerCapabilitiesSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/configuration": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Distributed Engine Configuration",
        "description": "Retrieve the current settings for Distributed Engine configuration",
        "operationId": "DistributedEngineService_GetDistributedEngineConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Distributed Engines Configuration",
            "schema": {
              "$ref": "#/definitions/DistributedEngineConfigurationModel",
              "description": "Distributed Engines Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Update Distributed Engine Configuration",
        "description": "Update the current settings for Distributed Engine configuration",
        "operationId": "DistributedEngineService_PatchDistributedEngineConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DistributedEngineConfigurationUpdateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Distributed Engine Configuration",
            "schema": {
              "$ref": "#/definitions/DistributedEngineConfigurationModel",
              "description": "Updated Distributed Engine Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/download-distributed-engine": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Download Distributed Engine",
        "description": "Downloads Distributed Engine",
        "operationId": "DistributedEngineService_DownloadDistributedEngine",
        "parameters": [
          {
            "name": "is64Bit",
            "in": "path",
            "description": "is64Bit",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "siteId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "DistributedEngine File Download",
            "schema": {
              "$ref": "#/definitions/FileStream",
              "description": "DistributedEngine File Download"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/engines": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Search Engines",
        "description": "Search Engines",
        "operationId": "DistributedEngineService_SearchEngines",
        "parameters": [
          {
            "name": "filter.activationStatus",
            "in": "query",
            "description": "Only return engines with this activation status",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.connectionStatus",
            "in": "query",
            "description": "Only return engines with this connection status",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.friendlyName",
            "in": "query",
            "description": "Only return engines with a friendly name that contains this text",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.onlyIncludeRequiringAction",
            "in": "query",
            "description": "Only include engines that require action.  For example, pending but not deleted or no site assigned.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "Only return engines for this site",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Engines that matched",
            "schema": {
              "$ref": "#/definitions/IPagingOfEngineSummaryModel",
              "description": "Engines that matched"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site": {
      "post": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Create Site",
        "description": "Create Site and returns model",
        "operationId": "DistributedEngineService_CreateSite",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SiteCreateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site object",
            "schema": {
              "$ref": "#/definitions/SiteViewModel",
              "description": "Site object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site/{id}": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Site",
        "description": "Get Site for passed in Id",
        "operationId": "DistributedEngineService_GetSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Site if found",
            "schema": {
              "$ref": "#/definitions/SiteViewModel",
              "description": "Site if found"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Patch Site",
        "description": "Patch Site object having passed in Id",
        "operationId": "DistributedEngineService_PatchSite",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SiteUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Patch Site object",
            "schema": {
              "$ref": "#/definitions/SiteViewModel",
              "description": "Patch Site object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site/{id}/audit": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "GetSiteAudits",
        "description": "Get audits by Site Id",
        "operationId": "DistributedEngineService_GetSiteAudits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Audits",
            "schema": {
              "$ref": "#/definitions/PagingOfSiteAuditSummary",
              "description": "Paged List of Audits"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site/{id}/logs": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "SearchSiteLogs",
        "description": "Search site logs by Site Id",
        "operationId": "DistributedEngineService_SearchSiteLogs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.engineId",
            "in": "query",
            "description": "Filter by a specific engine ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "Term used to search the Engine Name and/or the Message of the Site Log",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Logs",
            "schema": {
              "$ref": "#/definitions/PagingOfSiteLogSummaryModel",
              "description": "Paged List of Logs"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site/{id}/reassign": {
      "post": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Reassign Secrets From the Site",
        "description": "Reassign Secrets From the Site",
        "operationId": "DistributedEngineService_ReassignSecrets",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReassignSecretsArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The site model",
            "schema": {
              "$ref": "#/definitions/SiteConnectorViewModel",
              "description": "The site model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site/stub": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Site Stub",
        "description": "Get Site for passed in args",
        "operationId": "DistributedEngineService_GetSiteStub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Stub of a Site model",
            "schema": {
              "$ref": "#/definitions/SiteConnectorViewModel",
              "description": "Stub of a Site model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site-connector": {
      "post": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Create Site Connector",
        "description": "Create Site Connector and returns model",
        "operationId": "DistributedEngineService_CreateSiteConnector",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SiteConnectorCreateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site Connector object",
            "schema": {
              "$ref": "#/definitions/SiteConnectorViewModel",
              "description": "Site Connector object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site-connector/{id}": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Site Connector",
        "description": "Get Site Connector for passed in Id",
        "operationId": "DistributedEngineService_GetSiteConnector",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Site Connector if found",
            "schema": {
              "$ref": "#/definitions/SiteConnectorViewModel",
              "description": "Site Connector if found"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Update Site Connector",
        "description": "Update Site Connector object with passed in Id",
        "operationId": "DistributedEngineService_UpdateSiteConnector",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SiteConnectorUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Site Connector object",
            "schema": {
              "$ref": "#/definitions/SiteConnectorViewModel",
              "description": "Updated Site Connector object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site-connector/{id}/download-memorymq": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Download Memory MQ",
        "description": "Downloads MemoryMQ",
        "operationId": "DistributedEngineService_DownloadMemoryMq",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "MemoryMQ File Download",
            "schema": {
              "$ref": "#/definitions/FileStream",
              "description": "MemoryMQ File Download"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site-connector/{siteConnectorId}/credentials": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Site Connector Credentials",
        "description": "Get Site Connector Credentials",
        "operationId": "DistributedEngineService_GetSiteConnectorCredentials",
        "parameters": [
          {
            "name": "siteConnectorId",
            "in": "path",
            "description": "siteConnectorId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Site Connector Credentials",
            "schema": {
              "$ref": "#/definitions/SiteConnectorCredentialsModel",
              "description": "Site Connector Credentials"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site-connector/{siteConnectorId}/validate": {
      "post": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Validate Site Connector",
        "description": "Validate Site Connector and returns model",
        "operationId": "DistributedEngineService_ValidateSiteConnector",
        "parameters": [
          {
            "name": "siteConnectorId",
            "in": "path",
            "description": "siteConnectorId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Site Connector validation result",
            "schema": {
              "$ref": "#/definitions/SiteConnectorValidationResult",
              "description": "Site Connector validation result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site-connector/stub": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Site Connector Stub",
        "description": "Get Site Connector for passed in args",
        "operationId": "DistributedEngineService_GetSiteConnectorStub",
        "parameters": [
          {
            "name": "queueType",
            "in": "query",
            "description": "QueueType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Stub of a Site Connector model",
            "schema": {
              "$ref": "#/definitions/SiteConnectorViewModel",
              "description": "Stub of a Site Connector model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/site-connectors": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Search Site Connectors",
        "description": "Search Site Connectors",
        "operationId": "DistributedEngineService_SearchSiteConnectors",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Site Connectors that matched",
            "schema": {
              "$ref": "#/definitions/IPagingOfSiteConnectorSummaryModel",
              "description": "Site Connectors that matched"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/sites": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Search Sites",
        "description": "Search Sites",
        "operationId": "DistributedEngineService_SearchSites",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Include inactive sites",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeSiteMetrics",
            "in": "query",
            "description": "When true metrics are included for returned sites such as how many inactive or active sites",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.onlyIncludeSitesThatCanAddNewEngines",
            "in": "query",
            "description": "Only returns sites that can have new engines added",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "Return the site with this ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.siteName",
            "in": "query",
            "description": "Return sites that partially match this name",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Sites that matched",
            "schema": {
              "$ref": "#/definitions/IPagingOfSiteSummaryModel",
              "description": "Sites that matched"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/distributed-engine/update-engine-status": {
      "post": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Activate Engine",
        "description": "Activate the specified engine",
        "operationId": "DistributedEngineService_UpdateEngineStatus",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EngineActivationRequestArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Engine Activation Result Model",
            "schema": {
              "$ref": "#/definitions/EngineActivationResultModel",
              "description": "Engine Activation Result Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/domain-index": {
      "get": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Get a domain name index",
        "description": "Returns the domain name index",
        "operationId": "DomainNameIndexService_GetDomainNameIndex",
        "parameters": [
          {
            "name": "filter.discoverySourceIdScanned",
            "in": "query",
            "description": "DiscoverySourceIdScanned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.domainName",
            "in": "query",
            "description": "DomainName",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.domainResolveType",
            "in": "query",
            "description": "DomainResolveType",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The Domain Name Index View",
            "schema": {
              "$ref": "#/definitions/DomainNameIndexModel",
              "description": "The Domain Name Index View"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/domain-index/{id}": {
      "patch": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Update a domain name index",
        "description": "Update an existing domain name index using the existing domain name index ID",
        "operationId": "DomainNameIndexService_UpdateDomainNameIndex",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DomainNameIndexUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Domain Name Index ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated domain name index",
            "schema": {
              "$ref": "#/definitions/DomainNameIndexModel",
              "description": "The updated domain name index"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/domain-index/create": {
      "post": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Create a new domain name index",
        "description": "Creates a new domain name index with suggested discovery source id",
        "operationId": "DomainNameIndexService_CreateDomainNameIndex",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DomainNameIndexCreateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new domain name index",
            "schema": {
              "$ref": "#/definitions/DomainNameIndexModel",
              "description": "The new domain name index"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/domain-index/delete/{id}": {
      "put": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Delete a domain name index",
        "description": "Delete an existing domain name index using the existing domain name index ID",
        "operationId": "DomainNameIndexService_DeleteSingleDomainNameIndex",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Delete success",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete success",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/domain-index/delete-all": {
      "delete": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Delete all domain name index records",
        "description": "Delete existing domain name index records",
        "operationId": "DomainNameIndexService_TruncateDomainNameIndex",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Delete success",
            "schema": {
              "$ref": "#/definitions/DomainNameIndexModel",
              "description": "Delete success"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/domain-index/expire/{id}": {
      "post": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Expire a domain name index",
        "description": "Expire an existing domain name index using the existing domain name index ID",
        "operationId": "DomainNameIndexService_ExpireSingleDomainNameIndex",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Domain Name Index ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated domain name index",
            "schema": {
              "$ref": "#/definitions/DomainNameIndexModel",
              "description": "The updated domain name index"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/domain-index/expire-all": {
      "post": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Expire all domain name index records",
        "description": "Expire existing domain name index records",
        "operationId": "DomainNameIndexService_ExpireAllDomainNameIndex",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DomainNameIndexExpireUpdateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expire success",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/domains": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Domains",
        "description": "Get Domains",
        "operationId": "UsersService_GetDomains",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain summary list",
            "schema": {
              "$ref": "#/definitions/PagingOfDomainSummary",
              "description": "Domain summary list"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/dual-controls": {
      "get": {
        "tags": [
          "DualControls"
        ],
        "summary": "Search Dual Controls",
        "description": "Search, filter, sort, and page dual controls",
        "operationId": "DualControlsService_SearchDualControls",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive items",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Dual control search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfDualControlSummary",
              "description": "Dual control search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "DualControls"
        ],
        "summary": "Create Dual Control",
        "description": "Create a new dual control",
        "operationId": "DualControlsService_Create",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Dual control creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DualControlCreateArgs",
              "description": "Dual control creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dual control object",
            "schema": {
              "$ref": "#/definitions/DualControlModel",
              "description": "Dual control object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/dual-controls/{id}": {
      "get": {
        "tags": [
          "DualControls"
        ],
        "summary": "Get Dual Control",
        "description": "Get a single dual control by ID",
        "operationId": "DualControlsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dual control ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Dual control object",
            "schema": {
              "$ref": "#/definitions/DualControlModel",
              "description": "Dual control object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "DualControls"
        ],
        "summary": "Update Dual Control",
        "description": "Update a single dual control by ID",
        "operationId": "DualControlsService_Update",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Dual control update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DualControlUpdateArgs",
              "description": "Dual control update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Dual control ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Dual control object",
            "schema": {
              "$ref": "#/definitions/DualControlModel",
              "description": "Dual control object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DualControls"
        ],
        "summary": "Delete Dual Control",
        "description": "Delete a dual control by ID",
        "operationId": "DualControlsService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dual control ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/dual-controls/auth/{dualControlType}/{id}": {
      "post": {
        "tags": [
          "DualControls"
        ],
        "summary": "Authorize a dual control",
        "description": "Authorize a dual control",
        "operationId": "DualControlsService_AuthorizeDualControl",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DualControlAuthArgs",
              "description": "args"
            }
          },
          {
            "name": "dualControlType",
            "in": "path",
            "description": "dualControlType",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Dual control authorization result",
            "schema": {
              "$ref": "#/definitions/DualControlAuthResult",
              "description": "Dual control authorization result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/dual-controls/state/{dualControlType}/{id}": {
      "get": {
        "tags": [
          "DualControls"
        ],
        "summary": "Get dual control state for the current item",
        "description": "Get dual control state for the current item",
        "operationId": "DualControlsService_GetAllReports",
        "parameters": [
          {
            "name": "dualControlType",
            "in": "path",
            "description": "dualControlType",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Dual Control State",
            "schema": {
              "$ref": "#/definitions/DualControlStateModel",
              "description": "Dual Control State"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/dual-controls/stub": {
      "get": {
        "tags": [
          "DualControls"
        ],
        "summary": "Get Dual Control Stub",
        "description": "Return the default values for a new dual control",
        "operationId": "DualControlsService_Stub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dual control object",
            "schema": {
              "$ref": "#/definitions/DualControlModel",
              "description": "Dual control object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/dual-controls/types": {
      "get": {
        "tags": [
          "DualControls"
        ],
        "summary": "Get Dual Control Types",
        "description": "Return a list of Dual Control Types",
        "operationId": "DualControlsService_GetTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dual control type objects",
            "schema": {
              "$ref": "#/definitions/DualControlModel",
              "description": "Dual control type objects"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/enterprise/search-request": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Request Enterprise Data",
        "description": "Initiate a search request for Enterprise Data",
        "operationId": "EnterpriseService_SearchRequestData",
        "parameters": [
          {
            "name": "args",
            "in": "path",
            "description": "args",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "Model of request",
            "schema": {
              "$ref": "#/definitions/EnterpriseSearchRequestModel",
              "description": "Model of request"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/enterprise/search-request/{requestId}": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "GetRequestData",
        "description": "Retrieve Enterprise Search Request Data",
        "operationId": "EnterpriseService_GetRequestData",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "requestId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "EnterpriseSummaryModel for given TaskId",
            "schema": {
              "$ref": "#/definitions/EnterpriseSearchResultModel",
              "description": "EnterpriseSummaryModel for given TaskId"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline": {
      "post": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Create a new Event Pipeline",
        "description": "Creates a new Event Pipeline with the provided object.",
        "operationId": "EventPipelineService_CreateEventPipelines",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelineCreateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new Event Pipeline",
            "schema": {
              "$ref": "#/definitions/EventPipelineModel",
              "description": "The new Event Pipeline"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline/{id}": {
      "get": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Get an Event Pipeline",
        "description": "Returns the Event Pipeline for the provided ID",
        "operationId": "EventPipelineService_GetEventPipeline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The Event Pipeline View",
            "schema": {
              "$ref": "#/definitions/EventPipelineModel",
              "description": "The Event Pipeline View"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Update an Event Pipeline",
        "description": "Update an existing Event Pipeline using the existing Event Pipeline's ID",
        "operationId": "EventPipelineService_UpdateEventPipelines",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelineUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated Event Pipeline",
            "schema": {
              "$ref": "#/definitions/EventPipelineModel",
              "description": "The updated Event Pipeline"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline/{id}/activate": {
      "put": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Update an Event Pipeline active value",
        "description": "Sets if an Event Pipeline is active or not",
        "operationId": "EventPipelineService_TogglePipelineActive",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelineActivateUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The Active value",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline/{id}/order": {
      "put": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Update an Event Pipeline",
        "description": "Update an existing Event Pipeline using the existing Event Pipeline's ID",
        "operationId": "EventPipelineService_ReorderPipeline",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelineOrderUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated Event Pipeline",
            "schema": {
              "description": "The updated Event Pipeline",
              "items": {
                "$ref": "#/definitions/EventPipelinePolicyMap"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline/{id}/trigger": {
      "get": {
        "tags": [
          "EventPipelineTrigger"
        ],
        "summary": "Get the triggers for an Event Pipeline",
        "description": "Returns the triggers for the Event Pipeline that has the provided ID",
        "operationId": "EventPipelineTriggerService_GetEventPipelineTriggers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Event Pipeline Triggers",
            "schema": {
              "description": "The list of Event Pipeline Triggers",
              "items": {
                "$ref": "#/definitions/EventPipelineTriggerSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline/list": {
      "get": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Get a list of Event Pipelines",
        "description": "Returns a list of Event Pipelines that meet the paging/searching criterea",
        "operationId": "EventPipelineService_GetEventPipelines",
        "parameters": [
          {
            "name": "filter.eventEntityTypeId",
            "in": "query",
            "description": "EventEntityTypeId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.eventPipelineName",
            "in": "query",
            "description": "EventPipelineName",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.eventPipelinePolicyId",
            "in": "query",
            "description": "EventPipelinePolicyId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Event Pipelines",
            "schema": {
              "$ref": "#/definitions/PagingOfEventPipelineViewModel",
              "description": "The list of Event Pipelines"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline/runs": {
      "get": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelineService_GetEventPipelineRuns",
        "parameters": [
          {
            "name": "filter.eventPipelineId",
            "in": "query",
            "description": "EventPipelineId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.eventPipelinePolicyRunId",
            "in": "query",
            "description": "EventPipelinePolicyRunId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PagingOfEventPipelinePolicyRunActivityViewModel",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline/stub": {
      "get": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Stub an empty Event Pipeline",
        "description": "Returns an empty Event Pipeline to be filled out.",
        "operationId": "EventPipelineService_GetEventPipelineStub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "An empty Event Pipeline",
            "schema": {
              "$ref": "#/definitions/EventPipeline",
              "description": "An empty Event Pipeline"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline/summaries": {
      "get": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Get summaries of Event Pipelines",
        "description": "Returns a list of Event Pipeline summaries that meet the searching criterea",
        "operationId": "EventPipelineService_GetEventPipelineSummaries",
        "parameters": [
          {
            "name": "filter.eventEntityTypeId",
            "in": "query",
            "description": "EventEntityTypeId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.eventPipelineName",
            "in": "query",
            "description": "EventPipelineName",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.eventPipelinePolicyId",
            "in": "query",
            "description": "EventPipelinePolicyId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The summaries of Event Pipelines",
            "schema": {
              "$ref": "#/definitions/PagingOfEventPipelineSummaryModel",
              "description": "The summaries of Event Pipelines"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline/trigger/options": {
      "get": {
        "tags": [
          "EventPipelineTrigger"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelineTriggerService_GetEventPipelineTriggerOptions",
        "parameters": [
          {
            "name": "eventEntityTypeId",
            "in": "path",
            "description": "eventEntityTypeId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "",
              "items": {
                "$ref": "#/definitions/EventPipelineTriggerSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline/trigger/stub": {
      "get": {
        "tags": [
          "EventPipelineTrigger"
        ],
        "summary": "Stub an Event Pipeline Trigger",
        "description": "Creates an empty Event Pipeline Trigger to be populated",
        "operationId": "EventPipelineTriggerService_GetEventPipelineStub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The empty Event Pipeline Trigger",
            "schema": {
              "$ref": "#/definitions/EventPipelineTrigger",
              "description": "The empty Event Pipeline Trigger"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-audit": {
      "get": {
        "tags": [
          "EventPipelineAudit"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelineAuditService_GetAllPipelineAndPolicyAudits",
        "parameters": [
          {
            "name": "filter.eventPipelinePolicyId",
            "in": "query",
            "description": "EventPipelinePolicyId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PagingOfEventPipelinePolicyAuditSummary",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy": {
      "post": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_CreateEventPipelinePolicy",
        "parameters": [
          {
            "name": "eventPipelinePolicy",
            "in": "body",
            "description": "eventPipelinePolicy",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyCreateArgs",
              "description": "eventPipelinePolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyModel",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/{id}": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_GetEventPipelinePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyModel",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_UpdateEventPipelinePolicy",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyModel",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_AddPipelineToEventPipelinePolicy",
        "parameters": [
          {
            "name": "eventPipelinePolicyAddPipelineArgs",
            "in": "body",
            "description": "eventPipelinePolicyAddPipelineArgs",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyAddPipelineArgs",
              "description": "eventPipelinePolicyAddPipelineArgs"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyMapModel",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/{id}/activate": {
      "put": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_ActivateEventPipelinePolicy",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyActivateArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/{id}/folders": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_GetFoldersForPipelinePolicies",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "",
              "items": {
                "$ref": "#/definitions/FolderSimpleViewModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_UpdateEventPipelinePolicyFolderMaps",
        "parameters": [
          {
            "name": "eventPipelinePolicyFolderMaps",
            "in": "body",
            "description": "eventPipelinePolicyFolderMaps",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyFolderMapUpdateArgs",
              "description": "eventPipelinePolicyFolderMaps"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/{id}/folders/{folderId}/childdata": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_GetChildFolderDataForPipelinePolicyFolder",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "Int32",
              "type": "integer",
              "format": "int32"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/{id}/groups": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_GetGroupsForPipelinePolicies",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "",
              "items": {
                "$ref": "#/definitions/UserGroupSearchResultModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_UpdateEventPipelinePolicyGroupMaps",
        "parameters": [
          {
            "name": "eventPipelinePolicyGroupMaps",
            "in": "body",
            "description": "eventPipelinePolicyGroupMaps",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyGroupMapUpdateArgs",
              "description": "eventPipelinePolicyGroupMaps"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/{id}/groups/count": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_GetGroupCountForPipelinePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "Int32",
              "type": "integer",
              "format": "int32"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/{id}/order": {
      "put": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_UpdateEventPipelinePolicySortOrder",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicySortOrderUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyModel",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/{id}/secretpolicies": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_GetSecretPoliciesForPipelinePolicies",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.eventPipelinePolicyId",
            "in": "query",
            "description": "EventPipelinePolicyId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.eventPipelinePolicyName",
            "in": "query",
            "description": "EventPipelinePolicyName",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretPolicyViewModel",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/{policyId}/pipeline/{pipelineId}": {
      "delete": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_RemoveEventPipelineFromPolicy",
        "parameters": [
          {
            "name": "pipelineId",
            "in": "path",
            "description": "Event Pipeline ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/activity": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_GetEventPipelinePolicyRunActivity",
        "parameters": [
          {
            "name": "eventPipelineId",
            "in": "path",
            "description": "eventPipelineId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "eventPipelinePolicyRunId",
            "in": "path",
            "description": "Event Pipeline Policy Run ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "",
              "items": {
                "$ref": "#/definitions/EventPipelinePolicyRunActivityViewModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/duplicate": {
      "post": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_DuplicateEventPipelinePolicy",
        "parameters": [
          {
            "name": "importPolicy",
            "in": "body",
            "description": "importPolicy",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyImportArgs",
              "description": "importPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyModel",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/export/{id}": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_ExportEventPipelinePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/import": {
      "post": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_ImportEventPipelinePolicy",
        "parameters": [
          {
            "name": "importPolicy",
            "in": "body",
            "description": "importPolicy",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyImportArgs",
              "description": "importPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EventPipelinePolicyModel",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/list": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_GetEventPipelinePolicies",
        "parameters": [
          {
            "name": "filter.eventPipelineId",
            "in": "query",
            "description": "EventPipelineId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.eventPipelinePolicyName",
            "in": "query",
            "description": "EventPipelinePolicyName",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "FolderId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PagingOfEventPipelinePolicySummary",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-policy/runs": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelinePolicyService_GetEventPipelinePolicyRuns",
        "parameters": [
          {
            "name": "filter.eventPipelinePolicyId",
            "in": "query",
            "description": "EventPipelinePolicyId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.eventPipelinePolicyRunId",
            "in": "query",
            "description": "EventPipelinePolicyRunId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PagingOfEventPipelineRunViewModel",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-settings/filter/options": {
      "get": {
        "tags": [
          "EventPipelineSettings"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelineSettingsService_GetPipelineFilterOptions",
        "parameters": [
          {
            "name": "eventEntityTypeId",
            "in": "path",
            "description": "eventEntityTypeId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "",
              "items": {
                "$ref": "#/definitions/EventPipelineFilterSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-settings/filter-settings/list/{id}": {
      "get": {
        "tags": [
          "EventPipelineSettings"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelineSettingsService_GetEventPipelineFilterSettings",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Event Pipeline Filter ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "",
              "items": {
                "$ref": "#/definitions/EventPipelineFilterSettingMapSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-settings/task/list": {
      "get": {
        "tags": [
          "EventPipelineSettings"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelineSettingsService_GetEventPipelineTasks",
        "parameters": [
          {
            "name": "filter.eventActionId",
            "in": "query",
            "description": "EventActionId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PagingOfEventPipelineTask",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-settings/tasks/options": {
      "get": {
        "tags": [
          "EventPipelineSettings"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelineSettingsService_GetPipelineTaskOptions",
        "parameters": [
          {
            "name": "eventEntityTypeId",
            "in": "path",
            "description": "eventEntityTypeId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "",
              "items": {
                "$ref": "#/definitions/EventPipelineTaskSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/event-pipeline-settings/task-settings/list/{id}": {
      "get": {
        "tags": [
          "EventPipelineSettings"
        ],
        "summary": "",
        "description": "",
        "operationId": "EventPipelineSettingsService_GetEventPipelineTaskSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Task ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "description": "",
              "items": {
                "$ref": "#/definitions/EventPipelineTaskSettingMapSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/extended-fields/regex/{secretId}": {
      "get": {
        "tags": [
          "ExtendedFields"
        ],
        "summary": "Get Extended Regex values by Secret",
        "description": "Retrieve Extended Regex values for a Secret",
        "operationId": "ExtendedFieldsService_GetRegexBySecret",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Regex Values Summary",
            "schema": {
              "$ref": "#/definitions/RegexValuesSummary",
              "description": "Regex Values Summary"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folder/{id}": {
      "patch": {
        "tags": [
          "Folders"
        ],
        "summary": "Patch a Folder",
        "description": "Patch a single secret folder by ID",
        "operationId": "FoldersService_PatchFolder",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Folder update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FolderPatchArgs",
              "description": "Folder update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder object",
            "schema": {
              "$ref": "#/definitions/FolderBasicModel",
              "description": "Folder object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folder-details/{id}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get Folder Details",
        "description": "Get Folder Details",
        "operationId": "FoldersService_GetFolderDetail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "returnEmptyInsteadOfNoAccessException",
            "in": "query",
            "description": "returnEmptyInsteadOfNoAccessException",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder Details",
            "schema": {
              "$ref": "#/definitions/FolderDetailViewModel",
              "description": "Folder Details"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folder-permissions": {
      "get": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Search Folder Permissions",
        "description": "Search, filter, sort, and page folder permissions",
        "operationId": "FolderPermissionsService_Search",
        "parameters": [
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "Limit results to a certain folder",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.groupId",
            "in": "query",
            "description": "Limit results to a certain group",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "Limit results to a certain user",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder permission search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfFolderPermissionSummary",
              "description": "Folder permission search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Create Folder Permission",
        "description": "Create a new folder permission",
        "operationId": "FolderPermissionsService_Create",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Folder permission creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FolderPermissionCreateArgs",
              "description": "Folder permission creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder permission object",
            "schema": {
              "$ref": "#/definitions/FolderPermissionModel",
              "description": "Folder permission object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folder-permissions/{id}": {
      "get": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Get Folder Permission",
        "description": "Get a single folder permission by ID",
        "operationId": "FolderPermissionsService_Get",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive folder permissions in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Folder permission ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder permission object",
            "schema": {
              "$ref": "#/definitions/FolderPermissionModel",
              "description": "Folder permission object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Update Folder Permission",
        "description": "Update a single folder permission by ID",
        "operationId": "FolderPermissionsService_Update",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Folder permission update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FolderPermissionUpdateArgs",
              "description": "Folder permission update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Folder permission ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder permission object",
            "schema": {
              "$ref": "#/definitions/FolderPermissionModel",
              "description": "Folder permission object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Delete Folder Permission",
        "description": "Delete a folder permission by ID",
        "operationId": "FolderPermissionsService_Delete",
        "parameters": [
          {
            "name": "breakInheritance",
            "in": "query",
            "description": "Include to remove permission inheritance",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Folder permission ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folder-permissions/stub": {
      "get": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Get Folder Permission Stub",
        "description": "Return the default values for a new folder permission",
        "operationId": "FolderPermissionsService_Stub",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "description": "Folder for which to generate a permission stub",
            "required": true,
            "type": "integer",
            "format": "int32",
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Folder permission bject",
            "schema": {
              "$ref": "#/definitions/FolderPermissionModel",
              "description": "Folder permission bject"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folders": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Search Folders",
        "description": "Search, filter, sort, and page secret folders",
        "operationId": "FoldersService_Search",
        "parameters": [
          {
            "name": "filter.folderTypeId",
            "in": "query",
            "description": "FolderTypeId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.parentFolderId",
            "in": "query",
            "description": "ParentFolderId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.permissionRequired",
            "in": "query",
            "description": "Specify whether to filter by Owner, Edit, AddSecret, View folder permission. Default is View.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfFolderSummary",
              "description": "Folder search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Create Folder",
        "description": "Create a new secret folder",
        "operationId": "FoldersService_Create",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Folder creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FolderCreateArgs",
              "description": "Folder creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder object",
            "schema": {
              "$ref": "#/definitions/FolderModel",
              "description": "Folder object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folders/{id}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get Folder",
        "description": "Get a single folder by ID",
        "operationId": "FoldersService_Get",
        "parameters": [
          {
            "name": "getAllChildren",
            "in": "query",
            "description": "Whether to retrieve all child folders of the requested folder",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeAssociatedTemplates",
            "in": "query",
            "description": "Whether to list associated secret templates",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder object",
            "schema": {
              "$ref": "#/definitions/FolderModel",
              "description": "Folder object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Folders"
        ],
        "summary": "Update Folder",
        "description": "Update a single secret folder by ID",
        "operationId": "FoldersService_Update",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Folder update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FolderUpdateArgs",
              "description": "Folder update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder object",
            "schema": {
              "$ref": "#/definitions/FolderModel",
              "description": "Folder object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Folders"
        ],
        "summary": "Delete Folder",
        "description": "Delete a folder by ID",
        "operationId": "FoldersService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folders/{id}/audit": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Folder Audits",
        "description": "Retrieve a list of audits for folder by ID.",
        "operationId": "FoldersService_GetAudits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Specify paging and sorting options for querying records and returning results",
            "schema": {
              "$ref": "#/definitions/PagingOfFolderAuditSummary",
              "description": "Specify paging and sorting options for querying records and returning results"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folders/{id}/templates": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Associate Template to Folder",
        "description": "Allow secrets based on the template to be created in the folder. If the folder has no associated templates, then any template can be used.",
        "operationId": "FoldersService_AssociateTemplateToFolder",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Folder template association options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FolderTemplateArgs",
              "description": "Folder template association options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder object",
            "schema": {
              "$ref": "#/definitions/FolderTemplateModel",
              "description": "Folder object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folders/{id}/templates/{templateId}": {
      "delete": {
        "tags": [
          "Folders"
        ],
        "summary": "Disassociate Template from Folder",
        "description": "Remove the ability to create secrets based on the template in this folder. If the folder has no associated templates, then any template can be used.",
        "operationId": "FoldersService_DissassociateTemplateToFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder object",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Folder object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folders/lookup": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Lookup Folders",
        "description": "Search, filter, sort, and page secret folders, returning only folder ID and name",
        "operationId": "FoldersService_Lookup",
        "parameters": [
          {
            "name": "filter.folderTypeId",
            "in": "query",
            "description": "FolderTypeId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.parentFolderId",
            "in": "query",
            "description": "ParentFolderId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.permissionRequired",
            "in": "query",
            "description": "Specify whether to filter by Owner, Edit, AddSecret, View folder permission. Default is View.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfFolderLookup",
              "description": "Folder search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/folders/stub": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get Folder Stub",
        "description": "Return the default values for a new secret folder",
        "operationId": "FoldersService_Stub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Folder object",
            "schema": {
              "$ref": "#/definitions/FolderModel",
              "description": "Folder object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Search Groups",
        "description": "Search, filter, sort, and page groups",
        "operationId": "GroupsService_Search",
        "parameters": [
          {
            "name": "filter.domainId",
            "in": "query",
            "description": "Active Directory domain ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive groups in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.limitToViewableGroups",
            "in": "query",
            "description": "Limit groups to groups that current user can view details of",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfGroupSummary",
              "description": "Group search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create Group",
        "description": "Create a new group",
        "operationId": "GroupsService_Create",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Group creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupCreateArgs",
              "description": "Group creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group object",
            "schema": {
              "$ref": "#/definitions/GroupModel",
              "description": "Group object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/{groupId}": {
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Patch Group",
        "description": "Update a single group by ID",
        "operationId": "GroupsService_PatchGroup",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Group update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupPatchArgs",
              "description": "Group update options"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group object",
            "schema": {
              "$ref": "#/definitions/GroupModel",
              "description": "Group object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/{groupId}/users": {
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update all members of a group",
        "description": "Update all members of a group",
        "operationId": "GroupsService_UpdateGroupMembers",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupMemberAssignmentRequest",
              "description": "args"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/GroupMembershipAssignmentResponse",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group",
        "description": "Get a single group by ID",
        "operationId": "GroupsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group object",
            "schema": {
              "$ref": "#/definitions/GroupModel",
              "description": "Group object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update Group",
        "description": "Update a single group by ID",
        "operationId": "GroupsService_Update",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Group update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupUpdateArgs",
              "description": "Group update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group object",
            "schema": {
              "$ref": "#/definitions/GroupModel",
              "description": "Group object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group",
        "description": "Delete a group by ID",
        "operationId": "GroupsService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/{id}/ipaddress-restrictions": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Search IP Address restrictions assigned to a group",
        "description": "Search, filter, sort, and page IP Address restriction assigned to a group",
        "operationId": "IpAddressRestrictionsService_GetAllByGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group and IP Address restriction search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfGroupIpAddressRestrictionModel",
              "description": "Group and IP Address restriction search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/{id}/roles": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets roles for group",
        "description": "Gets roles for group",
        "operationId": "GroupsService_GetRoles",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/PagingOfRoleSummary",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update all roles on group",
        "description": "Update all roles on group",
        "operationId": "GroupsService_UpdateUserRoles",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleAssignments",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/RoleChangeStatusModel",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add roles to existing group",
        "description": "Add roles to existing group",
        "operationId": "GroupsService_CreateUserRoles",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleAssignments",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/RoleChangeStatusModel",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Remove roles from existing group",
        "description": "Remove roles from existing group",
        "operationId": "GroupsService_DeleteUserRoles",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleRemovals",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/RoleChangeStatusModel",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/{id}/users": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group Membership",
        "description": "Get group membership will return all of the users that are assigned as members of the group",
        "operationId": "GroupsService_GetGroupMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeInactiveUsersForGroup",
            "in": "query",
            "description": "Whether to include inactive users in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.userDomainId",
            "in": "query",
            "description": "Filter only users in a specific domain",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group membership results",
            "schema": {
              "$ref": "#/definitions/PagingOfGroupUserSummary",
              "description": "Group membership results"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add User To Group",
        "description": "Add a user to a group",
        "operationId": "GroupsService_AddUserToGroup",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Group user add options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupUserCreateArgs",
              "description": "Group user add options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User group membership object",
            "schema": {
              "$ref": "#/definitions/GroupUserModel",
              "description": "User group membership object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Patch Group Membership",
        "description": "Update group memberships by sending a list of add and remove IDs",
        "operationId": "GroupsService_PatchGroupMembership",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Group update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupMembershipPatchModel",
              "description": "Group update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group model",
            "schema": {
              "$ref": "#/definitions/GroupMembershipPatchResult",
              "description": "Group model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/{id}/users/{userId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get User In Group",
        "description": "Get a user in a group",
        "operationId": "GroupsService_GetGroupUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User group membership object",
            "schema": {
              "$ref": "#/definitions/GroupUserModel",
              "description": "User group membership object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Remove User From Group",
        "description": "Remove a user from a group",
        "operationId": "GroupsService_RemoveUserFromGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/audit": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get group audits",
        "description": "Audit records for group assignments",
        "operationId": "GroupsService_GetAuditGroupAssignments",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Audit records for group assignments",
            "schema": {
              "$ref": "#/definitions/PagingOfAdminAuditItem",
              "description": "Audit records for group assignments"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/lookup": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Lookup Groups",
        "description": "Search, filter, sort, and page groups, returning only group ID and name",
        "operationId": "GroupsService_Lookup",
        "parameters": [
          {
            "name": "filter.domainId",
            "in": "query",
            "description": "Active Directory domain ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive groups in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.limitToViewableGroups",
            "in": "query",
            "description": "Limit groups to groups that current user can view details of",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfGroupLookup",
              "description": "Group search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/groups/stub": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group Stub",
        "description": "Return the default values for a new group",
        "operationId": "GroupsService_Stub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Group object",
            "schema": {
              "$ref": "#/definitions/GroupModel",
              "description": "Group object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "tags": [
          "HealthCheck"
        ],
        "summary": "Health Check",
        "description": "",
        "operationId": "HealthCheckService_Get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/HealthCheckModel",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/hsm-configuration/audit": {
      "get": {
        "tags": [
          "HsmConfiguration"
        ],
        "summary": "Audit of hsm configuration changes",
        "description": "Audit of hsm configuration changes",
        "operationId": "HsmConfigurationService_GetHsmConfigurationAudit",
        "parameters": [
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Hsm Configuration audit items",
            "schema": {
              "$ref": "#/definitions/PagingOfHsmConfigurationAuditViewModel",
              "description": "Hsm Configuration audit items"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ipaddress-restrictions": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Search IP Address restrictions",
        "description": "Search, filter, sort, and page IP Address restrictions",
        "operationId": "IpAddressRestrictionsService_Search",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "IP Address restriction search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfIpAddressRestrictionSummary",
              "description": "IP Address restriction search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Create IP Address restriction",
        "description": "Create a new IP Address restriction",
        "operationId": "IpAddressRestrictionsService_Create",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "IP Address restriction",
            "required": false,
            "schema": {
              "$ref": "#/definitions/IpAddressRestrictionCreateArgs",
              "description": "IP Address restriction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IP Address restriction object",
            "schema": {
              "$ref": "#/definitions/IpAddressRestrictionModel",
              "description": "IP Address restriction object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ipaddress-restrictions/{id}": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Get IP Address restriction",
        "description": "Get a single IP Address restriction by ID",
        "operationId": "IpAddressRestrictionsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "IP Address restriction object",
            "schema": {
              "$ref": "#/definitions/IpAddressRestrictionModel",
              "description": "IP Address restriction object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Update IP Address restriction",
        "description": "Update a new IP Address restriction",
        "operationId": "IpAddressRestrictionsService_Update",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "IP Address restriction",
            "required": false,
            "schema": {
              "$ref": "#/definitions/IpAddressRestrictionUpdateArgs",
              "description": "IP Address restriction"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "IP Address restriction object",
            "schema": {
              "$ref": "#/definitions/IpAddressRestrictionModel",
              "description": "IP Address restriction object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Delete IP Address restriction",
        "description": "Delete an IP Address restriction by ID",
        "operationId": "IpAddressRestrictionsService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ipaddress-restrictions/{id}/groups": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Search groups assigned to an IP Address restriction",
        "description": "Search, filter, sort, and page groups assigned to an IP Address restriction",
        "operationId": "IpAddressRestrictionsService_SearchGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group and IP Address restriction search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfGroupIpAddressRestrictionModel",
              "description": "Group and IP Address restriction search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Create Group IP Address restriction",
        "description": "Create a new Group IP Address restriction",
        "operationId": "IpAddressRestrictionsService_CreateGroupIpRestriction",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Group IP Address restriction",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupIpAddressRestrictionCreateArgs",
              "description": "Group IP Address restriction"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group IP Address restriction object",
            "schema": {
              "$ref": "#/definitions/GroupIpAddressRestrictionModel",
              "description": "Group IP Address restriction object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ipaddress-restrictions/{id}/groups/{groupId}": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Get Group IP Address restriction",
        "description": "Get a single Group IP Address restriction by restriction and group ID",
        "operationId": "IpAddressRestrictionsService_GetGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group and IP Address restriction object",
            "schema": {
              "$ref": "#/definitions/GroupIpAddressRestrictionModel",
              "description": "Group and IP Address restriction object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Delete Group IP Address restriction",
        "description": "Delete a Group IP Address restriction by ID",
        "operationId": "IpAddressRestrictionsService_DeleteGroupIpRestriction",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ipaddress-restrictions/{id}/users": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Search users assigned to an IP Address restriction",
        "description": "Search, filter, sort, and page users assigned to an IP Address restriction",
        "operationId": "IpAddressRestrictionsService_SearchUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User and IP Address restriction search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfUserIpAddressRestrictionModel",
              "description": "User and IP Address restriction search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Create User IP Address restriction",
        "description": "Create a new User IP Address restriction",
        "operationId": "IpAddressRestrictionsService_CreateUserIpRestriction",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "User IP Address restriction",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserIpAddressRestrictionCreateArgs",
              "description": "User IP Address restriction"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User IP Address restriction object",
            "schema": {
              "$ref": "#/definitions/UserIpAddressRestrictionModel",
              "description": "User IP Address restriction object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ipaddress-restrictions/{id}/users/{userId}": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Get User IP Address restriction",
        "description": "Get a single User IP Address restriction by restriction and user ID",
        "operationId": "IpAddressRestrictionsService_GetUserIpRestriction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User and IP Address restriction object",
            "schema": {
              "$ref": "#/definitions/UserIpAddressRestrictionModel",
              "description": "User and IP Address restriction object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Delete User IP Address restriction",
        "description": "Delete a User IP Address restriction by ID",
        "operationId": "IpAddressRestrictionsService_DeleteUserIpRestriction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/key-management": {
      "get": {
        "tags": [
          "KeyManagement"
        ],
        "summary": "Get Key Management Configuration",
        "description": "Get the current or previous Key Management configuration",
        "operationId": "KeyManagementService_Get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "KeyManagementConfigModel object",
            "schema": {
              "$ref": "#/definitions/KeyManagementConfigModel",
              "description": "KeyManagementConfigModel object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "KeyManagement"
        ],
        "summary": "Update Key Management Configuration",
        "description": "Update the Key Management configuration",
        "operationId": "KeyManagementService_Update",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Key Management Config update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/KeyManagementConfigUpdateArgs",
              "description": "Key Management Config update options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "KeyManagementConfigModel object",
            "schema": {
              "$ref": "#/definitions/KeyManagementConfigModel",
              "description": "KeyManagementConfigModel object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/key-management/stub": {
      "get": {
        "tags": [
          "KeyManagement"
        ],
        "summary": "Get Key Management Config Stub",
        "description": "Return the default values for a new Key Management Config",
        "operationId": "KeyManagementService_Stub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "KeyManagementConfigModel object",
            "schema": {
              "$ref": "#/definitions/KeyManagementConfigModel",
              "description": "KeyManagementConfigModel object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/launcheragents": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Search Launcher Agents",
        "description": "Search, filter, sort, and page Launcher Agent s",
        "operationId": "LauncherAgentsService_Search",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.launcherAgentCollectionId",
            "in": "query",
            "description": "LauncherAgentCollectionId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.outOfDate",
            "in": "query",
            "description": "OutOfDate",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Agent  search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfLauncherAgentSummary",
              "description": "Launcher Agent  search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/launcheragents/{id}": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Get Launcher Agent ",
        "description": "Get a single Launcher Agent  by ID",
        "operationId": "LauncherAgentsService_Get",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive Launcher Agents in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Launcher Agent ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "LauncherAgent object",
            "schema": {
              "$ref": "#/definitions/LauncherAgentModel",
              "description": "LauncherAgent object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Update Launcher Agent ",
        "description": "Update a single Launcher Agent by ID",
        "operationId": "LauncherAgentsService_Update",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Launcher Agent update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LauncherAgentUpdateArgs",
              "description": "Launcher Agent update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Launcher Agent ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Agent object",
            "schema": {
              "$ref": "#/definitions/LauncherAgentModel",
              "description": "Launcher Agent object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/launcheragents/collections": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Search Launcher Agent Collections",
        "description": "Search, filter, sort, and page Launcher Agent Collections",
        "operationId": "LauncherAgentsService_SearchCollections",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive Launcher Agent Collections in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Agent Collection search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfLauncherAgentCollectionSummary",
              "description": "Launcher Agent Collection search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Create Launcher Agent Collection",
        "description": "Create a new Launcher Agent Collection",
        "operationId": "LauncherAgentsService_CreateCollection",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Launcher Agent Collection creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LauncherAgentCollectionCreateArgs",
              "description": "Launcher Agent Collection creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Agent Collection object",
            "schema": {
              "$ref": "#/definitions/LauncherAgentCollectionModel",
              "description": "Launcher Agent Collection object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/launcheragents/collections/{id}": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Get Launcher Agent Collection",
        "description": "Get a single Launcher Agent Collection by ID",
        "operationId": "LauncherAgentsService_GetByCollectionId",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive Launcher Agent Collections in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Launcher Agent Collection ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "LauncherAgentCollection object",
            "schema": {
              "$ref": "#/definitions/LauncherAgentCollectionModel",
              "description": "LauncherAgentCollection object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Update Launcher Agent Collection",
        "description": "Update a single Launcher Agent Collection by ID",
        "operationId": "LauncherAgentsService_UpdateCollection",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Launcher Agent Collection update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LauncherAgentCollectionUpdateArgs",
              "description": "Launcher Agent Collection update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Launcher Agent Collection ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Agent Collection object",
            "schema": {
              "$ref": "#/definitions/LauncherAgentCollectionModel",
              "description": "Launcher Agent Collection object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/launcheragents/collections/stub": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Get Launcher Agent Collection Stub",
        "description": "Return the default values for a new Launcher Agent Collection",
        "operationId": "LauncherAgentsService_Stub",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Agent Collection object",
            "schema": {
              "$ref": "#/definitions/LauncherAgentCollectionModel",
              "description": "Launcher Agent Collection object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/launcheragents/issues": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Search Launcher Agents",
        "description": "Search, filter, sort, and page Launcher Agent s",
        "operationId": "LauncherAgentsService_SearchAgentsWithIssues",
        "parameters": [
          {
            "name": "filter.launcherAgentCollectionId",
            "in": "query",
            "description": "LauncherAgentCollectionId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Agent  search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfLauncherAgentSummary",
              "description": "Launcher Agent  search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/launchers": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Search Launchers",
        "description": "Search, filter, sort, and page launchers",
        "operationId": "LaunchersService_SearchLaunchers",
        "parameters": [
          {
            "name": "filter.application",
            "in": "query",
            "description": "Associated application",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive launchers",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfLauncherSummary",
              "description": "Launcher search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/launchers/{id}": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Get Launcher",
        "description": "Get a single launcher by ID",
        "operationId": "LaunchersService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Launcher ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher object",
            "schema": {
              "$ref": "#/definitions/LauncherModel",
              "description": "Launcher object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/launchers/lookup": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Lookup Launchers",
        "description": "Search, filter, sort, and page launchers, returning only launcher ID and name",
        "operationId": "LaunchersService_Lookup",
        "parameters": [
          {
            "name": "filter.application",
            "in": "query",
            "description": "Associated application",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive launchers",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfLauncherLookup",
              "description": "Launcher search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/launchers/protocol-handler": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Triggers a download of the Protocol Handler",
        "description": "Triggers a download of the Protocol Handler",
        "operationId": "LaunchersService_TriggerDownload",
        "parameters": [
          {
            "name": "forceMsi",
            "in": "query",
            "description": "forceMsi",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "is32Bit",
            "in": "query",
            "description": "is32Bit",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Unknown or empty response"
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/launchers/secret": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Get secret launcher details.",
        "description": "Get the details and fields needed for the launchers a secret can use.",
        "operationId": "LaunchersService_SearchLauncherDetails",
        "parameters": [
          {
            "name": "filter.secretId",
            "in": "query",
            "description": "The secret to get launch information about",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret's Launcher details",
            "schema": {
              "$ref": "#/definitions/PagingOfLauncherDetails",
              "description": "Secret's Launcher details"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Launchers"
        ],
        "summary": "Launch a secret.",
        "description": "Launch a the secret using the provided secret id, and required fields.",
        "operationId": "LaunchersService_Create",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LaunchSecretArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Launched Secret details",
            "schema": {
              "$ref": "#/definitions/LaunchedSecretModel",
              "description": "Launched Secret details"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/license/validforconnectionmanager": {
      "get": {
        "tags": [
          "License"
        ],
        "summary": "Get Valid License",
        "description": "Get License Information",
        "operationId": "LicenseService_Get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "License information to determine if the license is valid",
            "schema": {
              "$ref": "#/definitions/ValidLicenseModel",
              "description": "License information to determine if the license is valid"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/metadata": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Search metadata",
        "description": "Search, filter, sort, and page metadata",
        "operationId": "MetadataService_SearchMetadata",
        "parameters": [
          {
            "name": "filter.itemId",
            "in": "query",
            "description": "ItemId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.metaDataFieldId",
            "in": "query",
            "description": "MetaDataFieldId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.metadataType",
            "in": "query",
            "description": "MetadataType",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata results",
            "schema": {
              "$ref": "#/definitions/PagingOfMetadataSummaryModel",
              "description": "Metadata results"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/metadata/{itemType}/{itemId}": {
      "post": {
        "tags": [
          "Metadata"
        ],
        "summary": "Create or update a metadata field for an item",
        "description": "Create or update a metadata field for an item",
        "operationId": "MetadataService_CreateMetadata",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MetadataCreateArgs",
              "description": "args"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "itemId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "itemType",
            "in": "path",
            "description": "itemType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created or updated MetadataModel",
            "schema": {
              "$ref": "#/definitions/MetadataModel",
              "description": "Newly created or updated MetadataModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Metadata"
        ],
        "summary": "Create or update a metadata field for an item",
        "description": "Create or update a metadata field for an item",
        "operationId": "MetadataService_UpdateMetadata",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MetadataUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "itemId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "itemType",
            "in": "path",
            "description": "itemType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created or updated MetadataModel",
            "schema": {
              "$ref": "#/definitions/MetadataModel",
              "description": "Newly created or updated MetadataModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/metadata/fields": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "MetadataFieldSummaryModel",
        "description": "MetadataFieldSummaryModel",
        "operationId": "MetadataService_GetFields",
        "parameters": [],
        "responses": {
          "200": {
            "description": "MetadataFieldSummaryModel",
            "schema": {
              "$ref": "#/definitions/PagingOfMetadataFieldSummaryModel",
              "description": "MetadataFieldSummaryModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/metadata/field-sections": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "MetadataFieldSectionSummaryModel",
        "description": "MetadataFieldSectionSummaryModel",
        "operationId": "MetadataService_GetFieldSections",
        "parameters": [
          {
            "name": "filter.itemId",
            "in": "query",
            "description": "ItemId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.metadataSectionFilterId",
            "in": "query",
            "description": "MetadataSectionFilterId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.metadataType",
            "in": "query",
            "description": "MetadataType",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "MetadataFieldSectionSummaryModel",
            "schema": {
              "$ref": "#/definitions/PagingOfMetadataFieldSectionSummaryModel",
              "description": "MetadataFieldSectionSummaryModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/metadata/field-sections/{fieldSectionId}": {
      "patch": {
        "tags": [
          "Metadata"
        ],
        "summary": "Update a metadata field section",
        "description": "Update a metadata field section",
        "operationId": "MetadataService_UpdateMetadataFieldSection",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MetadataFieldSectionUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "fieldSectionId",
            "in": "path",
            "description": "fieldSectionId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "itemId",
            "in": "query",
            "description": "itemId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "itemType",
            "in": "query",
            "description": "itemType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "updated MetadataFieldSectionSummaryModel",
            "schema": {
              "$ref": "#/definitions/MetadataFieldSectionSummaryModel",
              "description": "updated MetadataFieldSectionSummaryModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/metadata/history": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Search metadata history",
        "description": "Search, filter, sort, and page metadata history",
        "operationId": "MetadataService_SearchMetadataHistory",
        "parameters": [
          {
            "name": "filter.endDate",
            "in": "query",
            "description": "EndDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.itemId",
            "in": "query",
            "description": "ItemId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.metaDataFieldId",
            "in": "query",
            "description": "MetaDataFieldId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.metadataType",
            "in": "query",
            "description": "MetadataType",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.startDate",
            "in": "query",
            "description": "StartDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata history results",
            "schema": {
              "$ref": "#/definitions/PagingOfMetadataHistorySummaryModel",
              "description": "Metadata history results"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/mobile-configuration": {
      "get": {
        "tags": [
          "Mobile"
        ],
        "summary": "Get the mobile configuration",
        "description": "Get the mobile configuration",
        "operationId": "MobileService_GetMobileConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Mobile Configuration",
            "schema": {
              "$ref": "#/definitions/MobileConfigurationModel",
              "description": "Mobile Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/nodes": {
      "get": {
        "tags": [
          "ServerNodes"
        ],
        "summary": "Get Server Nodes",
        "description": "Get Server Nodes",
        "operationId": "ServerNodesService_GetList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Server Node List",
            "schema": {
              "description": "Server Node List",
              "items": {
                "$ref": "#/definitions/ServerNodeModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/nodes/{nodeId}": {
      "get": {
        "tags": [
          "ServerNodes"
        ],
        "summary": "Get Server Node",
        "description": "Get Server Node",
        "operationId": "ServerNodesService_Get",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "nodeId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Server Node List",
            "schema": {
              "$ref": "#/definitions/ServerNodeModel",
              "description": "Server Node List"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/nodes/{nodeId}/configuration": {
      "post": {
        "tags": [
          "ServerNodes"
        ],
        "summary": "Update Server Node Configuration",
        "description": "Update Server Node Configuration",
        "operationId": "ServerNodesService_UpdateNodeConfiguration",
        "parameters": [
          {
            "name": "nodeConfiguration",
            "in": "body",
            "description": "nodeConfiguration",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServerNodeConfigurationModel",
              "description": "nodeConfiguration"
            }
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "nodeId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Unknown or empty response"
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/oauth-expiration": {
      "post": {
        "tags": [
          "OAuthExpiration"
        ],
        "summary": "Expire Session",
        "description": "Expire the current user session",
        "operationId": "OAuthExpirationService_ExpireSession",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Whether the expiration succeeded",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/one-time-password-code/{id}": {
      "get": {
        "tags": [
          "OneTimePasswordCode"
        ],
        "summary": "Get one time password code and seconds",
        "description": "Get one time password code by secret id",
        "operationId": "OneTimePasswordCodeService_Get",
        "parameters": [
          {
            "name": "numberOfCodesToGenerate",
            "in": "query",
            "description": "NumberOfCodesToGenerate",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "One time password code model",
            "schema": {
              "description": "One time password code model",
              "items": {
                "$ref": "#/definitions/OneTimePasswordCodeModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/pba-configuration": {
      "get": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Get Pba Configuration",
        "description": "Get Pba Configuration",
        "operationId": "PbaConfigurationService_GetPbaConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Pba Configuration object",
            "schema": {
              "$ref": "#/definitions/PbaConfigurationModel",
              "description": "Pba Configuration object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Update Pba Configuration",
        "description": "Update Pba Configuration",
        "operationId": "PbaConfigurationService_UpdatePbaConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Pba Configuration Update Options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PbaConfigurationUpdateArgs",
              "description": "Pba Configuration Update Options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pba Configuration",
            "schema": {
              "$ref": "#/definitions/PbaConfigurationModel",
              "description": "Pba Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/pba-confirm-pair": {
      "post": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Confirm Pba Pair",
        "description": "Confirm SS Key Pair with Pba",
        "operationId": "PbaConfigurationService_ConfirmPbaPair",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Pba Confirm Pair Model",
            "schema": {
              "$ref": "#/definitions/PbaConfirmPairModel",
              "description": "Pba Confirm Pair Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/pba-history-import": {
      "post": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Process Pba Historical Import",
        "description": "Process Pba Historical Import",
        "operationId": "PbaConfigurationService_ProcessPbaHistoryImport",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Pba Historical Import Options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PbaHistoricalImportArgs",
              "description": "Pba Historical Import Options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pba Historical Import",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/pba-sync-metadata": {
      "post": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Sync Pba Metadata",
        "description": "Sync Pba Metadata",
        "operationId": "PbaConfigurationService_SyncPbaMetadata",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/pba-test-connection": {
      "post": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Test Pba Connection",
        "description": "Test Pba Connection",
        "operationId": "PbaConfigurationService_TestPbaConnection",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/audit": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get the Proxy Audit List",
        "description": "Search, filter, sort, and page Proxy Audits.",
        "operationId": "ProxyService_GetAudits",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of Proxy Audits.",
            "schema": {
              "$ref": "#/definitions/PagingOfProxyAuditModel",
              "description": "A paginated list of Proxy Audits."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/endpoints": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get the proxy endpoints list",
        "description": "Get the proxy endpoints list",
        "operationId": "ProxyService_GetEndpoints",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "schema": {
              "$ref": "#/definitions/ProxyEndpointsViewModel",
              "description": "A list of nodes, sites, and engines with proxy configurations"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/endpoints/engines/{id}": {
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Update an engine proxy configuration",
        "description": "Update an engine proxy configuration",
        "operationId": "ProxyService_PatchEngine",
        "parameters": [
          {
            "name": "engine",
            "in": "body",
            "description": "engine",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProxyEngineViewModel",
              "description": "engine"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "schema": {
              "$ref": "#/definitions/ProxyEndpointsViewModel",
              "description": "A list of nodes, sites, and engines with proxy configurations"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/endpoints/nodes/{id}": {
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Update a node proxy configuration",
        "description": "Update a node proxy configuration",
        "operationId": "ProxyService_PatchNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "node",
            "in": "body",
            "description": "node",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProxyNodeViewModel",
              "description": "node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "schema": {
              "$ref": "#/definitions/ProxyEndpointsViewModel",
              "description": "A list of nodes, sites, and engines with proxy configurations"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/endpoints/notification": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get endpoint warnings",
        "description": "Get endpoint warnings",
        "operationId": "ProxyService_GetEndpointNotification",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/endpoints/sites/{id}": {
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Update a site proxy configuration",
        "description": "Update a site proxy configuration",
        "operationId": "ProxyService_PatchSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "site",
            "in": "body",
            "description": "site",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProxySiteViewModel",
              "description": "site"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "schema": {
              "$ref": "#/definitions/ProxyEndpointsViewModel",
              "description": "A list of nodes, sites, and engines with proxy configurations"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/explanation": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get Proxy Explanations",
        "description": "Get an explanation of the SSH proxy, SSH terminal, and RDP proxy features",
        "operationId": "ProxyService_GetExplanations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Explanations",
            "schema": {
              "$ref": "#/definitions/ProxyExplanationsViewModel",
              "description": "Explanations"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/rdp/config": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get the RDP proxy configuration",
        "description": "Get the RDP proxy configuration",
        "operationId": "ProxyService_GetRdpProxyConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "RDP Proxy Configuration",
            "schema": {
              "$ref": "#/definitions/RdpProxyConfigurationViewModel",
              "description": "RDP Proxy Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Update the RDP proxy configuration",
        "description": "Update the RDP proxy configuration",
        "operationId": "ProxyService_PatchRdpProxyConfiguration",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "viewModel",
            "in": "body",
            "description": "viewModel",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RdpProxyConfigurationViewModel",
              "description": "viewModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RDP Proxy Configuration",
            "schema": {
              "$ref": "#/definitions/RdpProxyConfigurationViewModel",
              "description": "RDP Proxy Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/rdp/generate-certificate": {
      "post": {
        "tags": [
          "Proxy"
        ],
        "summary": "Generate RDP server certificate",
        "description": "Generates a new RDP server certificate and returns the RDP configuration with the updated server certificate",
        "operationId": "ProxyService_GenerateRdpProxyCertificate",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GenerateRdpCertificateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RDP Proxy Configuration",
            "schema": {
              "$ref": "#/definitions/RdpProxyConfigurationViewModel",
              "description": "RDP Proxy Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/rdp/notification": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get a notification of where the RDP proxy is running",
        "description": "Get a notification of where the RDP proxy is running",
        "operationId": "ProxyService_GetRdpEndpointNotification",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/ssh/clienthistory": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get SSH Terminal client history",
        "description": "Get SSH Terminal client history",
        "operationId": "ProxyService_GetTerminalClientHistory",
        "parameters": [
          {
            "name": "filter.authenticateResult",
            "in": "query",
            "description": "AuthenticateResult",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.endDate",
            "in": "query",
            "description": "EndDate",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.engineIdentityGuid",
            "in": "query",
            "description": "EngineIdentityGuid",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.ipAddress",
            "in": "query",
            "description": "IpAddress",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.startDate",
            "in": "query",
            "description": "StartDate",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SSH Terminal client history",
            "schema": {
              "$ref": "#/definitions/PagingOfProxyClientHistorySummaryAndSshProxyClientHistoryFilterQuery",
              "description": "A list of SSH Terminal client history"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/ssh/client-overrides": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get SSH Terminal client overrides",
        "description": "Get SSH Terminal client overrides",
        "operationId": "ProxyService_GetTerminalClientOverrides",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of SSH Terminal client overrides",
            "schema": {
              "description": "A list of SSH Terminal client overrides",
              "items": {
                "$ref": "#/definitions/ProxyClientOverrideSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Proxy"
        ],
        "summary": "Creates SSH Terminal client overrides",
        "description": "Creates SSH Terminal client overrides",
        "operationId": "ProxyService_CreateTerminalClientOverrides",
        "parameters": [
          {
            "name": "clientOverride",
            "in": "body",
            "description": "clientOverride",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProxyClientOverrideSummary",
              "description": "clientOverride"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SSH Terminal client overrides",
            "schema": {
              "$ref": "#/definitions/ProxyClientOverrideSummary",
              "description": "A list of SSH Terminal client overrides"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/ssh/client-overrides/{clientOverrideId}": {
      "delete": {
        "tags": [
          "Proxy"
        ],
        "summary": "Deletes SSH Terminal client overrides",
        "description": "Deletes SSH Terminal client overrides",
        "operationId": "ProxyService_DeleteTerminalClientOverrides",
        "parameters": [
          {
            "name": "clientOverrideId",
            "in": "path",
            "description": "clientOverrideId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SSH Terminal client overrides",
            "schema": {
              "description": "A list of SSH Terminal client overrides",
              "items": {
                "$ref": "#/definitions/ProxyClientOverrideSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Updates SSH Terminal client overrides",
        "description": "Updates SSH Terminal client overrides",
        "operationId": "ProxyService_UpdateTerminalClientOverrides",
        "parameters": [
          {
            "name": "clientOverride",
            "in": "body",
            "description": "clientOverride",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProxyClientOverrideSummary",
              "description": "clientOverride"
            }
          },
          {
            "name": "clientOverrideId",
            "in": "path",
            "description": "clientOverrideId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SSH Terminal client overrides",
            "schema": {
              "description": "A list of SSH Terminal client overrides",
              "items": {
                "$ref": "#/definitions/ProxyClientOverrideSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/ssh/clients": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get SSH Terminal clients",
        "description": "Get SSH Terminal clients",
        "operationId": "ProxyService_GetTerminalClients",
        "parameters": [
          {
            "name": "filter.ipAddress",
            "in": "query",
            "description": "IpAddress",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.terminalClientType",
            "in": "query",
            "description": "TerminalClientType",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SSH Terminal clients",
            "schema": {
              "$ref": "#/definitions/PagingOfProxyClientSummaryAndSshProxyClientsFilterQuery",
              "description": "A list of SSH Terminal clients"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/ssh/clients/{clientId}": {
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Updates a SSH Terminal client type",
        "description": "Updates a SSH Terminal client type",
        "operationId": "ProxyService_UpdateTerminalClientType",
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "description": "client",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProxyClientSummary",
              "description": "client"
            }
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SSH Terminal clients",
            "schema": {
              "description": "A list of SSH Terminal clients",
              "items": {
                "$ref": "#/definitions/ProxyClientSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/ssh/config": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get the SSH proxy configuration",
        "description": "Get the SSH proxy configuration",
        "operationId": "ProxyService_GetSshProxyConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "SSH Proxy Configuration",
            "schema": {
              "$ref": "#/definitions/SshProxyConfigurationViewModel",
              "description": "SSH Proxy Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Update the SSH proxy configuration",
        "description": "Update the SSH proxy configuration",
        "operationId": "ProxyService_PatchSshProxyConfiguration",
        "parameters": [
          {
            "name": "viewModel",
            "in": "body",
            "description": "viewModel",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SshProxyConfigurationViewModel",
              "description": "viewModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Proxy Configuration",
            "schema": {
              "$ref": "#/definitions/SshProxyConfigurationViewModel",
              "description": "SSH Proxy Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/ssh/generate-key": {
      "post": {
        "tags": [
          "Proxy"
        ],
        "summary": "Generate SSH Host Key",
        "description": "Generates a new SSH host key and returns the SSH configuration with the updated host key",
        "operationId": "ProxyService_GenerateSshHostKey",
        "parameters": [],
        "responses": {
          "200": {
            "description": "SSH Proxy Configuration",
            "schema": {
              "$ref": "#/definitions/SshProxyConfigurationViewModel",
              "description": "SSH Proxy Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/ssh/notification": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get a notification of where the SSH proxy is running",
        "description": "Get a notification of where the SSH proxy is running",
        "operationId": "ProxyService_GetSshEndpointNotification",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/proxy/state": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get SSH Terminal client overrides",
        "description": "Get SSH Terminal client overrides",
        "operationId": "ProxyService_GetProxyingState",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of SSH Terminal client overrides",
            "schema": {
              "$ref": "#/definitions/ProxyingStateModel",
              "description": "A list of SSH Terminal client overrides"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/recorded-sessions": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Search Recorded Sessions",
        "description": "Search, filter, sort, and page recorded sessions",
        "operationId": "SecretSessionsService_SearchSessions",
        "parameters": [
          {
            "name": "filter.active",
            "in": "query",
            "description": "Filter by active or inactive status",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.dateRange",
            "in": "query",
            "description": "Return sessions within a certain number of days",
            "required": false,
            "type": "string",
            "format": "time-span"
          },
          {
            "name": "filter.endDate",
            "in": "query",
            "description": "EndDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.endTime",
            "in": "query",
            "description": "EndTime",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "Filter by folder",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.groupIds",
            "in": "query",
            "description": "Return sessions for specific groups",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          {
            "name": "filter.includeNonSecretServerSessions",
            "in": "query",
            "description": "IncludeNonSecretServerSessions",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeOnlyLaunchedSuccessfully",
            "in": "query",
            "description": "Return only sessions that launched successfully",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeRestricted",
            "in": "query",
            "description": "Whether to include restricted secret sessions",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeSubFolders",
            "in": "query",
            "description": "Whether to include subfolders in a folder search",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.launcherTypeId",
            "in": "query",
            "description": "Filter by launcher type",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchTypes",
            "in": "query",
            "description": "Specifies the sources of information you want to search across, can be many of (SecretItems, Username, Hostname, Domain, RdpKeystroke, RdpApplication, ProxyClient)",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "filter.secretIds",
            "in": "query",
            "description": "Return sessions for specific secrets",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "SiteId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.startDate",
            "in": "query",
            "description": "StartDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.startTime",
            "in": "query",
            "description": "StartTime",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.userIds",
            "in": "query",
            "description": "Return sessions for specific users",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretSessionSummary",
              "description": "Recorded session search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/recorded-sessions/{id}": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Get Recorded Session",
        "description": "Get a single recorded session by ID",
        "operationId": "SecretSessionsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session object",
            "schema": {
              "$ref": "#/definitions/SecretSessionModel",
              "description": "Recorded session object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/recorded-sessions/{id}/points-of-interest": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Recorded Session Points of Interest",
        "description": "Get the points of interest for a recorded session",
        "operationId": "SecretSessionsService_SearchPointsOfInterest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session points of interest",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretSessionPointOfInterestModel",
              "description": "Recorded session points of interest"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/recorded-sessions/{id}/points-of-interest-summary": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Recorded Session Points of Interest Summary",
        "description": "Get the points of interest summary for a recorded session",
        "operationId": "SecretSessionsService_SearchPointsOfInterestSummary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session points of interest summary",
            "schema": {
              "$ref": "#/definitions/PagingOfISecretSessionPointOfInterestSummaryModel",
              "description": "Recorded session points of interest summary"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/recorded-sessions/{id}/request-processing": {
      "post": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Request Immediate Session Processing",
        "description": "Issues a request for the immediate processing of a session video",
        "operationId": "SecretSessionsService_ProcessSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Unknown or empty response"
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/recorded-sessions/{id}/session-recordings": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Recorded Session Video Stream",
        "description": "Get the video stream for a recorded session",
        "operationId": "SecretSessionsService_GetSessionRecording",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session video stream",
            "schema": {
              "$ref": "#/definitions/StreamContentResult",
              "description": "Recorded session video stream"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/recorded-sessions/{id}/summary": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Recorded Session Summary",
        "description": "Get the summary for a recorded session",
        "operationId": "SecretSessionsService_GetSummary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session summary",
            "schema": {
              "$ref": "#/definitions/SecretSessionSummary",
              "description": "Recorded session summary"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/remote-password-changing/custom-commands": {
      "post": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Create Custom Command",
        "description": "Create a New Custom Command",
        "operationId": "RemotePasswordChangingService_CreateCustomCommand",
        "parameters": [
          {
            "name": "createArgs",
            "in": "body",
            "description": "Custom Command creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomCommandCreateArgs",
              "description": "Custom Command creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created Custom Command",
            "schema": {
              "$ref": "#/definitions/CustomCommandModel",
              "description": "Created Custom Command"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/remote-password-changing/custom-commands/{id}": {
      "get": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Custom Command List",
        "description": "Lists Available Custom Command for Password Type",
        "operationId": "RemotePasswordChangingService_GetCustomCommands",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Password Type Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.commandTypeCode",
            "in": "query",
            "description": "CommandTypeCode",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom Command List result for Password Type",
            "schema": {
              "$ref": "#/definitions/PagingOfCustomCommandModel",
              "description": "Custom Command List result for Password Type"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Update Custom Command",
        "description": "Update a Custom Command",
        "operationId": "RemotePasswordChangingService_UpdateCustomCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Custom Command Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "updateArgs",
            "in": "body",
            "description": "Custom Command update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomCommandUpdateArgs",
              "description": "Custom Command update options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Custom Command",
            "schema": {
              "$ref": "#/definitions/CustomCommandModel",
              "description": "Updated Custom Command"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Delete Custom Command",
        "description": "Delete a Custom Command",
        "operationId": "RemotePasswordChangingService_DeleteCustomCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Custom Command Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Password Custom Command",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Delete Password Custom Command"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/remote-password-changing/password-types": {
      "get": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Password Type List",
        "description": "Lists Available Password Types",
        "operationId": "RemotePasswordChangingService_GetPasswordTypeList",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive Password Types in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "PasswordType List result",
            "schema": {
              "$ref": "#/definitions/PagingOfPasswordTypeSummary",
              "description": "PasswordType List result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Create Password Type",
        "description": "Create a New Password Type",
        "operationId": "RemotePasswordChangingService_CreatePasswordType",
        "parameters": [
          {
            "name": "passwordTypeCreateArgs",
            "in": "body",
            "description": "Password Type creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PasswordTypeCreateArgs",
              "description": "Password Type creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created Password Type",
            "schema": {
              "$ref": "#/definitions/PasswordTypeModel",
              "description": "Created Password Type"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/remote-password-changing/password-types/{id}": {
      "get": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Password Type List",
        "description": "Lists Available Password Types",
        "operationId": "RemotePasswordChangingService_GetPasswordType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Password Type Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "PasswordType List result",
            "schema": {
              "$ref": "#/definitions/PasswordTypeModel",
              "description": "PasswordType List result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Update Password Type",
        "description": "Update a Password Type",
        "operationId": "RemotePasswordChangingService_UpdatePasswordType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Password Type Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "updateArgs",
            "in": "body",
            "description": "Password Type update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PasswordTypeUpdateArgs",
              "description": "Password Type update options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Password Type",
            "schema": {
              "$ref": "#/definitions/PasswordTypeModel",
              "description": "Updated Password Type"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Delete Password Type",
        "description": "Delete a Password Type",
        "operationId": "RemotePasswordChangingService_DeletePasswordType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Password Type Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Password Type Response",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Delete Password Type Response"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Search Reports",
        "description": "Search, filter, sort, and page reports",
        "operationId": "ReportsService_SearchReportSummary",
        "parameters": [
          {
            "name": "filter.categoryId",
            "in": "query",
            "description": "Category ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive Reports in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.reportName",
            "in": "query",
            "description": "Report Name - Searching by report name ignores other filters",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfReportSummary",
              "description": "Report search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create Report",
        "description": "Creates a new Report and returns the report",
        "operationId": "ReportsService_CreateReport",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Report create options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportCreateArgs",
              "description": "Report create options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report object",
            "schema": {
              "$ref": "#/definitions/ReportModel",
              "description": "Report object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/{id}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report",
        "description": "Gets a Report and returns the Report Model",
        "operationId": "ReportsService_GetReportDetail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report object",
            "schema": {
              "$ref": "#/definitions/ReportModel",
              "description": "Report object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Reports"
        ],
        "summary": "Update Report",
        "description": "Updates a Report and returns the report",
        "operationId": "ReportsService_UpdateReport",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Report update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportUpdateArgs",
              "description": "Report update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report object",
            "schema": {
              "$ref": "#/definitions/ReportModel",
              "description": "Report object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete Report",
        "description": "Delete a report by ID",
        "operationId": "ReportsService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/{id}/audits": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report Audits",
        "description": "Get report audits by report Id",
        "operationId": "ReportsService_GetReportAuditsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report Audit Summaries",
            "schema": {
              "$ref": "#/definitions/PagingOfReportAuditSummary",
              "description": "Report Audit Summaries"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/{id}/defaultparameters": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Report Parameters",
        "description": "Gets the default parameters for the specified report",
        "operationId": "ReportsService_GetDefaultParameters",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report Parameters",
            "schema": {
              "$ref": "#/definitions/ReportDefaultParams",
              "description": "Report Parameters"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/{id}/email": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Email Report",
        "description": "Email a report",
        "operationId": "ReportsService_Email",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Report email options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportEmailArgs",
              "description": "Report email options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Report Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object email result",
            "schema": {
              "$ref": "#/definitions/ReportEmailResponse",
              "description": "Object email result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/{reportId}/undelete": {
      "put": {
        "tags": [
          "Reports"
        ],
        "summary": "Undelete System Report",
        "description": "Allows user to undelete system reports only.  Non-system reports are required to be edited in order for the SQL to be valdiated properly.",
        "operationId": "ReportsService_UndeleteSystemReport",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success/fail model",
            "schema": {
              "$ref": "#/definitions/UndeleteReportResponse",
              "description": "Returns success/fail model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/audits": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report Audits",
        "description": "Get report audits by report Id",
        "operationId": "ReportsService_GetReportAudits",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report Audit Summaries",
            "schema": {
              "$ref": "#/definitions/PagingOfReportAuditSummary",
              "description": "Report Audit Summaries"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/categories": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List Report Categories",
        "description": "List the report categories",
        "operationId": "ReportsService_GetCategories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Report categories array",
            "schema": {
              "description": "Report categories array",
              "items": {
                "$ref": "#/definitions/ReportCategory"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create Report Category",
        "description": "Create Report Category",
        "operationId": "ReportsService_CreateReportCategory",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportCategoryCreateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Category",
            "schema": {
              "$ref": "#/definitions/ReportCategoryDetailModel",
              "description": "Report Category"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/categories/{reportCategoryId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report Category",
        "description": "Get Report Category",
        "operationId": "ReportsService_GetReportCategory",
        "parameters": [
          {
            "name": "reportCategoryId",
            "in": "path",
            "description": "reportCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report Category",
            "schema": {
              "$ref": "#/definitions/ReportCategoryDetailModel",
              "description": "Report Category"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete Report Category",
        "description": "This will delete the report category and ALL reports in that category",
        "operationId": "ReportsService_DeleteReportCategory",
        "parameters": [
          {
            "name": "reportCategoryId",
            "in": "path",
            "description": "reportCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "true if success",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Reports"
        ],
        "summary": "Update Report Category",
        "description": "Update Report Category",
        "operationId": "ReportsService_UpdateReportCategory",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportCategoryUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "reportCategoryId",
            "in": "path",
            "description": "reportCategoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report Category",
            "schema": {
              "$ref": "#/definitions/ReportCategoryDetailModel",
              "description": "Report Category"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/charttypes": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List Report Chart Types",
        "description": "List the report chart types",
        "operationId": "ReportsService_GetChartTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Report chart types array",
            "schema": {
              "description": "Report chart types array",
              "items": {
                "$ref": "#/definitions/ReportChartType"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/execute": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Execute Report",
        "description": "Executes a Report and returns the results",
        "operationId": "ReportsService_Execute",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Report execute options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportExecuteArgs",
              "description": "Report execute options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report object",
            "schema": {
              "$ref": "#/definitions/ReportExecuteModel",
              "description": "Report object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/export": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Export Report",
        "description": "Exports a Report and returns the results",
        "operationId": "ReportsService_Export",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Report execute options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportExportArgs",
              "description": "Report execute options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unknown or empty response"
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/lookup": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Lookup Reports",
        "description": "Search, filter, sort, and page reports, returning only group ID and name",
        "operationId": "ReportsService_Lookup",
        "parameters": [
          {
            "name": "filter.categoryId",
            "in": "query",
            "description": "Category ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive Reports in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.reportName",
            "in": "query",
            "description": "Report Name - Searching by report name ignores other filters",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Reports search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfReportLookup",
              "description": "Reports search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/schedules": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Search Report Schedules",
        "description": "Search Report Schedules",
        "operationId": "ReportsService_SearchReportSchedules",
        "parameters": [
          {
            "name": "filter.includeDeleted",
            "in": "query",
            "description": "When set, deleted reports will be included",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.reportId",
            "in": "query",
            "description": "Report Id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedules that matched",
            "schema": {
              "$ref": "#/definitions/IPagingOfReportScheduleSummaryModel",
              "description": "Report Schedules that matched"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create Report Schedule",
        "description": "Create Report Schedule",
        "operationId": "ReportsService_CreateReportSchedule",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportScheduleCreateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedule",
            "schema": {
              "$ref": "#/definitions/ReportScheduleModel",
              "description": "Report Schedule"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/schedules/{reportScheduleHistoryId}/history": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "GetReportScheduleHistory",
        "description": "Get a Report Schedule History",
        "operationId": "ReportsService_GetReportScheduleHistory",
        "parameters": [
          {
            "name": "reportScheduleHistoryId",
            "in": "path",
            "description": "reportScheduleHistoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedule History for a ScheduleReportHistoryId",
            "schema": {
              "$ref": "#/definitions/IPagingOfReportScheduleHistorySummaryModel",
              "description": "Report Schedule History for a ScheduleReportHistoryId"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/schedules/{reportScheduleHistoryId}/history/download": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Download Historical Report",
        "description": "Download historical report from a schedule",
        "operationId": "ReportsService_DownloadHistoricalReport",
        "parameters": [
          {
            "name": "reportScheduleHistoryId",
            "in": "path",
            "description": "reportScheduleHistoryId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report object",
            "schema": {
              "$ref": "#/definitions/HttpResponseMessage",
              "description": "Report object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/schedules/{reportScheduleId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report Schedule",
        "description": "Get Report Schedule",
        "operationId": "ReportsService_GetReportSchedule",
        "parameters": [
          {
            "name": "reportScheduleId",
            "in": "path",
            "description": "reportScheduleId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedule",
            "schema": {
              "$ref": "#/definitions/ReportScheduleViewModel",
              "description": "Report Schedule"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "DeleteReportSchedule",
        "description": "Delete Report Schedule",
        "operationId": "ReportsService_DeleteReportSchedule",
        "parameters": [
          {
            "name": "reportScheduleId",
            "in": "path",
            "description": "reportScheduleId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Reports"
        ],
        "summary": "Update Report Schedule",
        "description": "Update Report Schedule",
        "operationId": "ReportsService_UpdateReportSchedule",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportScheduleUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "reportScheduleId",
            "in": "path",
            "description": "reportScheduleId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedule",
            "schema": {
              "$ref": "#/definitions/ReportScheduleModel",
              "description": "Report Schedule"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/schedules/{reportScheduleId}/history/search": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "SearchReportScheduleHistory",
        "description": "Search Report Schedule History",
        "operationId": "ReportsService_SearchReportScheduleHistory",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "reportScheduleId",
            "in": "path",
            "description": "reportScheduleId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedule History for a particular Id",
            "schema": {
              "$ref": "#/definitions/IPagingOfReportScheduleHistorySummaryModel",
              "description": "Report Schedule History for a particular Id"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/schedules/{reportScheduleId}/undelete": {
      "put": {
        "tags": [
          "Reports"
        ],
        "summary": "UndeleteReportSchedule",
        "description": "Undelete Report Schedule",
        "operationId": "ReportsService_UndeleteReportSchedule",
        "parameters": [
          {
            "name": "reportScheduleId",
            "in": "path",
            "description": "reportScheduleId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/reports/schedules/stub/{reportId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Stub Report Schedule",
        "description": "Stub Report Schedule",
        "operationId": "ReportsService_StubReportSchedule",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedule",
            "schema": {
              "$ref": "#/definitions/ReportScheduleModel",
              "description": "Report Schedule"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/rolepermissions/unassigned": {
      "get": {
        "tags": [
          "RolePermissions"
        ],
        "summary": "Permissions not assigned to any Role",
        "description": "Permissions not assigned to any Role",
        "operationId": "RolePermissionsService_GetUnassigned",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Names of all unassigned Permissions",
            "schema": {
              "$ref": "#/definitions/LogicResultOfString[]",
              "description": "Names of all unassigned Permissions"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Search roles",
        "description": "Search, filter, sort, and page roles",
        "operationId": "RolesService_GetAll",
        "parameters": [
          {
            "name": "filter.groupId",
            "in": "query",
            "description": "Only return roles assigned to this group id.  Will be ignored if UserId is set",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive Roles in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "Only return roles assigned to this user id.  Will supercede GroupId if set",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Role search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfRoleModel",
              "description": "Role search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/sdk-client-accounts": {
      "get": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Search SDK Client Accounts",
        "description": "Search, filter, sort, and page app SDK Client accounts",
        "operationId": "SdkClientAccountsService_SearchClientAccounts",
        "parameters": [
          {
            "name": "filter.operator",
            "in": "query",
            "description": "Operator",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "UserId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SDK Client Account search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSdkClientAccountSummaryAndSdkClientAccountFilter",
              "description": "SDK Client Account search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Create SDK Client Account",
        "description": "Create a new SDK Client account",
        "operationId": "SdkClientAccountsService_CreateClientAccount",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "SDK Client Account creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SdkClientAccountCreateArgs",
              "description": "SDK Client Account creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SdkClientAccountModel",
            "schema": {
              "$ref": "#/definitions/SdkClientAccountModel",
              "description": "SdkClientAccountModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/sdk-client-accounts/{id}": {
      "get": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Get SDK Client Account",
        "description": "Get a single SDK Client account by ID",
        "operationId": "SdkClientAccountsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Account Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SdkClientAccountModel",
            "schema": {
              "$ref": "#/definitions/SdkClientAccountModel",
              "description": "SdkClientAccountModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Update SDK Client Account",
        "description": "Update a single SDK Client account by ID",
        "operationId": "SdkClientAccountsService_UpdateClientAccount",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "SDK Client Account update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SdkClientAccountUpdateArgs",
              "description": "SDK Client Account update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Account Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SdkClientAccountModel",
            "schema": {
              "$ref": "#/definitions/SdkClientAccountModel",
              "description": "SdkClientAccountModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/sdk-client-accounts/{id}/revoke": {
      "post": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Revoke SDK Client Account",
        "description": "Revoke a single SDK Client account by ID",
        "operationId": "SdkClientAccountsService_Revoke",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Account Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "bool",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/sdk-client-accounts/enabled": {
      "get": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Get Current State",
        "description": "Get the current state of SDK client account",
        "operationId": "SdkClientAccountsService_GetEnabled",
        "parameters": [],
        "responses": {
          "200": {
            "description": "bool",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Toggle Current State",
        "description": "Toggle the current state of SDK client account",
        "operationId": "SdkClientAccountsService_ToggleEnabled",
        "parameters": [],
        "responses": {
          "200": {
            "description": "bool",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/sdk-client-audits": {
      "get": {
        "tags": [
          "SdkClientAudits"
        ],
        "summary": "Search SDK Client Audits",
        "description": "Search, filter, sort, and page app SDK Client audits",
        "operationId": "SdkClientAuditsService_SearchClientAudit",
        "parameters": [
          {
            "name": "filter.operator",
            "in": "query",
            "description": "Operator",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "UserId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SDK Client Audit search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSdkClientAuditSummaryAndSdkClientAuditFilter",
              "description": "SDK Client Audit search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/sdk-client-rules": {
      "get": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Search SDK Client Rules",
        "description": "Search, filter, sort, and page app SDK Client rules",
        "operationId": "SdkClientRulesService_SearchClientRules",
        "parameters": [
          {
            "name": "filter.operator",
            "in": "query",
            "description": "Operator",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "UserId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SDK Client Rule search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSdkClientRuleSummaryAndSdkClientRuleFilter",
              "description": "SDK Client Rule search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Create New SDK Client Rule",
        "description": "Create a new SDK Client rule",
        "operationId": "SdkClientRulesService_CreateClientRule",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "SDK Client Rule creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SdkClientRuleCreateArgs",
              "description": "SDK Client Rule creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SdkClientRuleModel",
            "schema": {
              "$ref": "#/definitions/SdkClientRuleModel",
              "description": "SdkClientRuleModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/sdk-client-rules/{id}": {
      "get": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Get SDK Client Rule",
        "description": "Get a single SDK Client rule by ID",
        "operationId": "SdkClientRulesService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Rule Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SdkClientRuleModel",
            "schema": {
              "$ref": "#/definitions/SdkClientRuleModel",
              "description": "SdkClientRuleModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Update SDK Client Rule",
        "description": "Update a single SDK Client rule by ID",
        "operationId": "SdkClientRulesService_UpdateClientRule",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "SDK Client Rule update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SdkClientRuleUpdateArgs",
              "description": "SDK Client Rule update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Rule Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SdkClientRuleModel",
            "schema": {
              "$ref": "#/definitions/SdkClientRuleModel",
              "description": "SdkClientRuleModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Delete SDK Client Rule",
        "description": "Delete a SDK Client rule by ID",
        "operationId": "SdkClientRulesService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Rule Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "DeletedModel",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "DeletedModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/sdk-client-rules/{id}/onboarding-key": {
      "get": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Get Onboarding Key for SDK Client Rule",
        "description": "Get the onboarding key for a single SDK Client rule by ID",
        "operationId": "SdkClientRulesService_GetOnboardingKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Rule Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SdkClientRuleModel",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/sdk-client-rules/stub": {
      "get": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Get SDK Client Rule Stub",
        "description": "Return the default values for a new SDK Client rule",
        "operationId": "SdkClientRulesService_Stub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "SdkClientRuleModel",
            "schema": {
              "$ref": "#/definitions/SdkClientRuleModel",
              "description": "SdkClientRuleModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-access-requests": {
      "get": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Get Secret Access Requests by Status for Current User.",
        "description": "Get Secret Access Requests by Status for Current User.",
        "operationId": "SecretAccessRequestsService_SearchRequests",
        "parameters": [
          {
            "name": "filter.isMyRequest",
            "in": "query",
            "description": "IsMyRequest",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.status",
            "in": "query",
            "description": "Status",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretAccessModel",
              "description": "Secret Access Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Update a Secret Access Request",
        "description": "Update the start date, end date, and status for a request.",
        "operationId": "SecretAccessRequestsService_UpdateRequest",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretAccessUpdateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "schema": {
              "$ref": "#/definitions/SecretAccessActionResultModel",
              "description": "Secret Access Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Create a new Secret Access Request",
        "description": "Create a new Secret Access Request",
        "operationId": "SecretAccessRequestsService_CreateRequest",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretAccessCreateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "schema": {
              "$ref": "#/definitions/SecretAccessModel",
              "description": "Secret Access Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-access-requests/{id}": {
      "get": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Get Secret Access Request by ID",
        "description": "Get Secret Access Request by ID",
        "operationId": "SecretAccessRequestsService_GetRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Access ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "schema": {
              "$ref": "#/definitions/SecretAccessModel",
              "description": "Secret Access Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-access-requests/{id}/history": {
      "get": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Get Secret access request history for the user that created the request.",
        "description": "Get Secret access request history for the user that created the request.",
        "operationId": "SecretAccessRequestsService_GetHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Access Request Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Request History Model",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretAccessRequestHistoryModel",
              "description": "Secret Access Request History Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-access-requests/secrets/{id}": {
      "get": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Get Secret Access Requests by Status for Current User.",
        "description": "Get Secret Access Requests by Status for Current User.",
        "operationId": "SecretAccessRequestsService_GetRequestsForSecret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretAccessModel",
              "description": "Secret Access Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-access-requests/secrets/{id}/options": {
      "get": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Get Secret Access Options by Secret ID",
        "description": "Get Secret Access Options by Secret ID",
        "operationId": "SecretAccessRequestsService_GetOptionsBySecret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Request Options",
            "schema": {
              "$ref": "#/definitions/SecretAccessOptionsModel",
              "description": "Secret Access Request Options"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-access-requests/secrets/{id}/view-comment": {
      "post": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Create a new View Comment on a secret.",
        "description": "Create a new View Comment on a secret.",
        "operationId": "SecretAccessRequestsService_CreateViewComment",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretAccessViewCommentArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success or Failure of the save.",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-dependencies": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Search Secret Dependencies",
        "description": "Search, filter, sort, and page Secret Dependencies on a Secret",
        "operationId": "SecretDependenciesService_SearchDependencySummary",
        "parameters": [
          {
            "name": "filter.groupId",
            "in": "query",
            "description": "Filter by group id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether or not to include inactive Secret Depenencies",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.lastRunStatus",
            "in": "query",
            "description": "Filter by last dependency result status",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search in the title / name and machine fields",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.secretId",
            "in": "query",
            "description": "The Secret Id to filter on",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.templateId",
            "in": "query",
            "description": "Filter by dependency template id",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SecretDependency search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretDependencySummary",
              "description": "SecretDependency search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Create Secret Dependency",
        "description": "Creates a new Secret Dependency and returns the model",
        "operationId": "SecretDependenciesService_CreateDependency",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret Dependency create options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDependencyCreateArgs",
              "description": "Secret Dependency create options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Dependency object",
            "schema": {
              "$ref": "#/definitions/SecretDependencyModel",
              "description": "Secret Dependency object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-dependencies/{id}": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Secret Dependency",
        "description": "Gets a Secret Dependency and returns the Secret Dependency Model",
        "operationId": "SecretDependenciesService_GetDependency",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Dependency ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Dependency object",
            "schema": {
              "$ref": "#/definitions/SecretDependencyModel",
              "description": "Secret Dependency object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Update Secret Dependency",
        "description": "Updates a Secret Dependency and returns the model",
        "operationId": "SecretDependenciesService_UpdateDependency",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret Dependency update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDependencyUpdateArgs",
              "description": "Secret Dependency update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret Dependency ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SecretDependencyModel object",
            "schema": {
              "$ref": "#/definitions/SecretDependencyUpdateArgs",
              "description": "SecretDependencyModel object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Delete Secret Dependency",
        "description": "Delete a Secret Dependency by ID",
        "operationId": "SecretDependenciesService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Dependency ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-dependencies/groups/{secretId}": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Secret Dependency Groups for a Secret",
        "description": "Get Secret Dependency Groups for a Secret",
        "operationId": "SecretDependenciesService_GetGroups",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Dependency Group array",
            "schema": {
              "$ref": "#/definitions/ILogicResultOfSecretDependencyGroup[]",
              "description": "Secret Dependency Group array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Create Secret Dependency Group",
        "description": "Creates a new Secret Dependency Group and returns the model",
        "operationId": "SecretDependenciesService_CreateDependencyGroup",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret Dependency create options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDependencyGroupCreateArgs",
              "description": "Secret Dependency create options"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Dependency Group object",
            "schema": {
              "$ref": "#/definitions/SecretDependencyGroup",
              "description": "Secret Dependency Group object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-dependencies/run": {
      "post": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Run Dependencies",
        "description": "Runs the list of dependencies and retruns an identifier that can be used to collect the status.",
        "operationId": "SecretDependenciesService_Execute",
        "parameters": [
          {
            "name": "dependencyIds",
            "in": "body",
            "description": "Dependency Id array",
            "required": false,
            "schema": {
              "description": "Int32[]",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "type": "array"
            },
            "items": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Identifier of the task",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-dependencies/run/{identifier}": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Secret Dependency run task status",
        "description": "Gets a Secret Dependency run task status",
        "operationId": "SecretDependenciesService_GetDependencyRunTaskStatus",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Task identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Task Status",
            "schema": {
              "$ref": "#/definitions/TaskProgress",
              "description": "Task Status"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-dependencies/scripts": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Scripts that are possible to use for Dependencies",
        "description": "Get Scripts that are possible to use for Dependencies",
        "operationId": "SecretDependenciesService_GetScripts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dependency Script array",
            "schema": {
              "description": "Dependency Script array",
              "items": {
                "$ref": "#/definitions/DependencyScript"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-dependencies/stub": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Secret Dependency Stub",
        "description": "Return the default values for a new Secret Dependency",
        "operationId": "SecretDependenciesService_Stub",
        "parameters": [
          {
            "name": "scriptId",
            "in": "query",
            "description": "The Id of the Script that this Dependency will Run.  Only provide this value if the Dependency is running a script directly, and ensure that the type of the script matches the TypeId value passed in.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "secretId",
            "in": "query",
            "description": "The Id of the Secret that this Dependency will appear on",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "The Id of the Dependency Template that this Dependecy will be modeled on. Only provide this value if the Dependency is based on a Template.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "The Id of the Dependency Type that this Dependecy will be modeled on. Only provide this value if the Dependency is a running a script directly and is NOT based on a Dependency Template.  Valid Values: PowershellScript = 7, SshScript = 8, SqlScript = 9",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SecretDependencyModel",
            "schema": {
              "$ref": "#/definitions/SecretDependencyModel",
              "description": "SecretDependencyModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-dependencies/templates": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Dependency Templates",
        "description": "Get Dependency Templates",
        "operationId": "SecretDependenciesService_GetTemplates",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dependency Template array",
            "schema": {
              "description": "Dependency Template array",
              "items": {
                "$ref": "#/definitions/DependencyTemplate"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-detail/{secretId}/hook": {
      "post": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Create Secret hook",
        "description": "Create Secret hook",
        "operationId": "SecretHooksService_CreateHook",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDetailHookCreateArgs",
              "description": "args"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created Secret hook",
            "schema": {
              "$ref": "#/definitions/SecretDetailHookViewModel",
              "description": "Newly created Secret hook"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-detail/{secretId}/hook/{secretHookId}": {
      "put": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Update Secret Hook",
        "description": "Update Secret hook",
        "operationId": "SecretHooksService_UpdateHook",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDetailHookUpdateArgs",
              "description": "args"
            }
          },
          {
            "name": "secretHookId",
            "in": "path",
            "description": "secretHookId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret hook retrieved after updates",
            "schema": {
              "$ref": "#/definitions/SecretDetailHookViewModel",
              "description": "Secret hook retrieved after updates"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Delete Secret Hook",
        "description": "Delete Secret Hook",
        "operationId": "SecretHooksService_DeleteHook",
        "parameters": [
          {
            "name": "secretHookId",
            "in": "path",
            "description": "secretHookId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success or failure",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-detail/{secretId}/hook/get/{secretHookId}": {
      "get": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Get Secret hook details",
        "description": "Get Secret hook details",
        "operationId": "SecretHooksService_GetHook",
        "parameters": [
          {
            "name": "secretHookId",
            "in": "path",
            "description": "secretHookId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret hook details",
            "schema": {
              "$ref": "#/definitions/SecretDetailHookViewModel",
              "description": "Secret hook details"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-detail/{secretId}/hook/stub/{scriptId}": {
      "get": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Stub Hook",
        "description": "Get stub for a new Secret hook",
        "operationId": "SecretHooksService_StubHook",
        "parameters": [
          {
            "name": "scriptId",
            "in": "path",
            "description": "scriptId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Stub for a new Secret hook",
            "schema": {
              "$ref": "#/definitions/SecretDetailHookViewModel",
              "description": "Stub for a new Secret hook"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-detail/{secretId}/hooks": {
      "get": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Get Secret Hooks",
        "description": "Get all of the hooks for the specified secret",
        "operationId": "SecretHooksService_GetHooks",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection",
            "schema": {
              "$ref": "#/definitions/SecretDetailHookViewModel",
              "description": "A collection"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-extensions/autofill-values": {
      "post": {
        "tags": [
          "SecretExtensions"
        ],
        "summary": "Get AutoFill values for Url by SecretId",
        "description": "Get AutoFill values (username and password) for Url by SecretId",
        "operationId": "SecretExtensionsService_GetAutoFillValues",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExtensionAutoFillValueArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Autofill values result object",
            "schema": {
              "$ref": "#/definitions/SecretExtensionAutoFillResult",
              "description": "Autofill values result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-extensions/search-ad-secrets-by-domain": {
      "post": {
        "tags": [
          "SecretExtensions"
        ],
        "summary": "Search Secrets by Domain",
        "description": "Search for Secrets that match a domain",
        "operationId": "SecretExtensionsService_SearchActiveDirectorySecrets",
        "parameters": [
          {
            "name": "domain",
            "in": "body",
            "description": "domain",
            "required": false,
            "schema": {
              "description": "String",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret search result object",
            "schema": {
              "description": "Secret search result object",
              "items": {
                "$ref": "#/definitions/SecretExtensionSearchSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-extensions/search-by-url": {
      "post": {
        "tags": [
          "SecretExtensions"
        ],
        "summary": "Search Secrets by Url",
        "description": "Search for Secrets that match a URL",
        "operationId": "SecretExtensionsService_Search",
        "parameters": [
          {
            "name": "url",
            "in": "body",
            "description": "url",
            "required": false,
            "schema": {
              "description": "String",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret search result object",
            "schema": {
              "description": "Secret search result object",
              "items": {
                "$ref": "#/definitions/SecretSearchByUrlSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-extensions/search-windows-account-secrets-by-computer-name": {
      "post": {
        "tags": [
          "SecretExtensions"
        ],
        "summary": "Search Secrets by Computer Name",
        "description": "Search for Secrets that match a computer name",
        "operationId": "SecretExtensionsService_SearchWindowsAccountSecrets",
        "parameters": [
          {
            "name": "computerName",
            "in": "body",
            "description": "computerName",
            "required": false,
            "schema": {
              "description": "String",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret search result object",
            "schema": {
              "description": "Secret search result object",
              "items": {
                "$ref": "#/definitions/SecretExtensionSearchSummary"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-extensions/web-secret-templates": {
      "get": {
        "tags": [
          "SecretExtensions"
        ],
        "summary": "Get Secret Templates",
        "description": "Get Secret Templates valid for web passwords",
        "operationId": "SecretExtensionsService_GetWebSecretTemplates",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of Secret Templates",
            "schema": {
              "description": "List of Secret Templates",
              "items": {
                "$ref": "#/definitions/SecretTemplateModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-permissions": {
      "get": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Search Secret Permissions",
        "description": "Search, filter, sort, and page secret permissions",
        "operationId": "SecretPermissionsService_SearchSecretPermissions",
        "parameters": [
          {
            "name": "filter.domainName",
            "in": "query",
            "description": "DomainName",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.groupId",
            "in": "query",
            "description": "Filter by group ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.groupName",
            "in": "query",
            "description": "GroupName",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.secretId",
            "in": "query",
            "description": "Filter by secret ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.userName",
            "in": "query",
            "description": "UserName",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret permissions search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretPermissionSummary",
              "description": "Secret permissions search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Create Secret Permission",
        "description": "Create a new secret permission",
        "operationId": "SecretPermissionsService_AddSecretPermission",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret permission creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretPermissionCreateArgs",
              "description": "Secret permission creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret permission object",
            "schema": {
              "$ref": "#/definitions/SecretPermissionModel",
              "description": "Secret permission object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-permissions/{id}": {
      "get": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Get Secret Permission",
        "description": "Get a single secret permission by ID",
        "operationId": "SecretPermissionsService_Get",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive permissions in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret permission ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret permission object",
            "schema": {
              "$ref": "#/definitions/SecretPermissionModel",
              "description": "Secret permission object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Update Secret Permission",
        "description": "Update a single secret permission by ID",
        "operationId": "SecretPermissionsService_UpdateSecretPermission",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret permission update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretPermissionUpdateArgs",
              "description": "Secret permission update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret permission ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret permission object",
            "schema": {
              "$ref": "#/definitions/SecretPermissionModel",
              "description": "Secret permission object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Delete Secret Permission",
        "description": "Delete a secret permission by ID",
        "operationId": "SecretPermissionsService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret permission ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-permissions/stub": {
      "get": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Get Secret Permission Stub",
        "description": "Return the default values for a new secret permission",
        "operationId": "SecretPermissionsService_Stub",
        "parameters": [
          {
            "name": "secretId",
            "in": "query",
            "description": "Options for generating a secret permission stub",
            "required": true,
            "type": "integer",
            "format": "int32",
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Secret permission object",
            "schema": {
              "$ref": "#/definitions/SecretPermissionModel",
              "description": "Secret permission object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-policy/search": {
      "get": {
        "tags": [
          "SecretPolicy"
        ],
        "summary": "Search Secret Policies",
        "description": "Search Secret Policies",
        "operationId": "SecretPolicyService_SearchSecretPolicies",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether or not to include inactive secret policies",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.secretPolicyName",
            "in": "query",
            "description": "Results will contain this text in the policy name",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Policies that matched",
            "schema": {
              "$ref": "#/definitions/IPagingOfSecretPolicyModel",
              "description": "Secret Policies that matched"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Search Secrets",
        "description": "Search, filter, sort, and page secrets",
        "operationId": "SecretsService_Search",
        "parameters": [
          {
            "name": "filter.allowDoubleLocks",
            "in": "query",
            "description": "Whether to allow DoubleLocks as part of the search. True by default",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.doNotCalculateTotal",
            "in": "query",
            "description": "Whether to return the total number of secrets matching the filters. False by default",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.doubleLockId",
            "in": "query",
            "description": "Only include Secrets with this DoubleLock ID assigned in the search results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.extendedFields",
            "in": "query",
            "description": "Names of Secret Template fields to return.  Only exposed fields can be returned.",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "filter.extendedTypeId",
            "in": "query",
            "description": "Return only secrets matching a certain extended type",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "Return only secrets within a certain folder",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.heartbeatStatus",
            "in": "query",
            "description": "Return only secrets with a certain heartbeat status",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "Whether to include active secrets in results (when excluded equals true)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive secrets in results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeRestricted",
            "in": "query",
            "description": "Whether to include restricted secrets in results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeSubFolders",
            "in": "query",
            "description": "Whether to include secrets in subfolders of the specified folder",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.isExactMatch",
            "in": "query",
            "description": "Whether to do an exact match of the search text or a partial match",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.onlyRPCEnabled",
            "in": "query",
            "description": "Whether to only include secrets whose template has Remote Password Changing enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.onlySharedWithMe",
            "in": "query",
            "description": "When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.passwordTypeIds",
            "in": "query",
            "description": "Return only secrets matching certain password types",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          {
            "name": "filter.permissionRequired",
            "in": "query",
            "description": "Specify whether to filter by List, View, Edit, or Owner permission. Default is List. (List = 1, View = 2, Edit = 3, Owner = 4",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.scope",
            "in": "query",
            "description": "Specify whether to search AllSecrets, Recent, or Favorites (All = 1, Recent = 2,Favorites = 3",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchField",
            "in": "query",
            "description": "Field to search",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchFieldSlug",
            "in": "query",
            "description": "Field-slug to search. This will override SearchField.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.secretTemplateId",
            "in": "query",
            "description": "Return only secrets matching a certain template",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "Return only secrets within a certain site",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretSummary",
              "description": "Secret search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Create Secret",
        "description": "Create a new secret",
        "operationId": "SecretsService_CreateSecret",
        "parameters": [
          {
            "name": "secretCreateArgs",
            "in": "body",
            "description": "Secret creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretCreateArgs",
              "description": "Secret creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret object",
            "schema": {
              "$ref": "#/definitions/SecretModel",
              "description": "Secret object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret",
        "description": "Get a single secret by ID",
        "operationId": "SecretsService_GetSecret",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive secrets in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret object",
            "schema": {
              "$ref": "#/definitions/SecretModel",
              "description": "Secret object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret",
        "description": "Update a single secret by ID",
        "operationId": "SecretsService_UpdateSecret",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretUpdateArgs",
              "description": "Secret update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret object",
            "schema": {
              "$ref": "#/definitions/SecretModel",
              "description": "Secret object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Secrets"
        ],
        "summary": "Delete Secret",
        "description": "A deleted secret is logically deleted and hidden from users who do not have a role containing the View Deleted Secrets permission. Secret Server uses these \"soft deletes\" to maintain the audit history for all data. However, deleted secrets are still accessible by administrators (like a permanent Recycle Bin) to ensure that audit history is maintained and to support recovery. A user must have the \"View Deleted Secrets\" permission in addition to Owner permission on a secret to access the secret View page for a deleted secret.",
        "operationId": "SecretsService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/audits": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Audits by Filter",
        "description": "Get audits for a particular Secret for the given filter.",
        "operationId": "SecretsService_GetSecretAudits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includePasswordChangeLog",
            "in": "query",
            "description": "Whether or not to include password changes in data",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Audit Model",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretAuditModel",
              "description": "Secret Audit Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/change-password": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Change Secret Password",
        "description": "Change a secret's password",
        "operationId": "SecretsService_ChangePassword",
        "parameters": [
          {
            "name": "changePasswordArgs",
            "in": "body",
            "description": "Secret options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretChangePasswordArgs",
              "description": "Secret options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret summary object",
            "schema": {
              "$ref": "#/definitions/SecretSummary",
              "description": "Secret summary object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/check-in": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Check In Secret",
        "description": "Check in a secret",
        "operationId": "SecretsService_CheckIn",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "restrictedArgs",
            "in": "body",
            "description": "Secret options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretRestrictedArgs",
              "description": "Secret options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret summary object",
            "schema": {
              "$ref": "#/definitions/SecretSummary",
              "description": "Secret summary object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/check-out": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Check Out Secret",
        "description": "Check Out a secret",
        "operationId": "SecretsService_CheckOut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Response Code Model object",
            "schema": {
              "$ref": "#/definitions/SecretResponseCodeModel",
              "description": "Secret Response Code Model object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/email": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update User Secret Email Settings",
        "description": "Update User Secret Email Settings",
        "operationId": "SecretsService_UpdateEmail",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDetailUpdateEmailArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SecretDetailSettingsViewModel",
            "schema": {
              "$ref": "#/definitions/SecretDetailSettingsViewModel",
              "description": "SecretDetailSettingsViewModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/expiration": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update a Secret expiration",
        "description": "Update a Secret expiration",
        "operationId": "SecretsService_UpdateExpiration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDetailUpdateExpirationArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated secret settings",
            "schema": {
              "$ref": "#/definitions/SecretDetailSettingsModel",
              "description": "Updated secret settings"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/expire": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Expire Secret",
        "description": "Expire a secret",
        "operationId": "SecretsService_Expire",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "restrictedArgs",
            "in": "body",
            "description": "Secret options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretRestrictedArgs",
              "description": "Secret options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret summary object",
            "schema": {
              "$ref": "#/definitions/SecretSummary",
              "description": "Secret summary object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/fields/{slug}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Field",
        "description": "Get a secret data field",
        "operationId": "SecretsService_GetField",
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive secrets in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Secret field name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret field value. If the field is a file attachment, the content type will be `application/octet-stream` and the response body will be the file contents.",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret Field",
        "description": "Update a secret data field",
        "operationId": "SecretsService_PutField",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretItemUpdateArgs",
              "description": "Secret options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Secret field name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated value, or 'true' if the field is a file attachment",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/general": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret General Information",
        "description": "Update Secret General Information",
        "operationId": "SecretsService_UpdateGeneral",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDetailUpdateGeneralArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret General Information",
            "schema": {
              "$ref": "#/definitions/SecretDetailGeneralViewModel",
              "description": "Secret General Information"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/heartbeat": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Run Secret Heartbeat",
        "description": "Check if secret is still valid",
        "operationId": "SecretsService_RunHeartBeat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret summary object",
            "schema": {
              "$ref": "#/definitions/SecretSummary",
              "description": "Secret summary object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/restricted": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Restricted Secret",
        "description": "Get a restricted secret",
        "operationId": "SecretsService_GetRestricted",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretRestrictedArgs",
              "description": "Secret options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret object",
            "schema": {
              "$ref": "#/definitions/SecretModel",
              "description": "Secret object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/restricted/fields/{slug}": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Restricted Secret Field",
        "description": "Get a restricted secret data field",
        "operationId": "SecretsService_RestrictedField",
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretRestrictedArgs",
              "description": "Secret options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Secret field name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret field value. If the field is a file attachment, the content type will be `application/octet-stream` and the response body will be the file contents.",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/rpc-script-secrets": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update which Secrets are available for RPC scripts",
        "description": "Update which Secrets are available for RPC scripts",
        "operationId": "SecretsService_UpdateRpcScriptSecrets",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDetailUpdateRpcScriptSecretsArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SecretDetailRpcViewModel",
            "schema": {
              "$ref": "#/definitions/SecretDetailRpcViewModel",
              "description": "SecretDetailRpcViewModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/security-approval": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret Security Approval Options",
        "description": "Update Secret Security Approval Options",
        "operationId": "SecretsService_UpdateSecurityApproval",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDetailUpdateSecurityApprovalArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SecretDetailSecurityViewModel",
            "schema": {
              "$ref": "#/definitions/SecretDetailSecurityViewModel",
              "description": "SecretDetailSecurityViewModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/security-checkout": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret Security Checkout Options",
        "description": "Update Secret Security Checkout Options",
        "operationId": "SecretsService_UpdateSecurityCheckout",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDetailUpdateSecurityCheckoutArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SecretDetailSecurityViewModel",
            "schema": {
              "$ref": "#/definitions/SecretDetailSecurityViewModel",
              "description": "SecretDetailSecurityViewModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/security-general": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret Security General Options",
        "description": "Update Secret Security General Options",
        "operationId": "SecretsService_UpdateSecurity",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretDetailUpdateSecurityGeneralArgs",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SecretDetailSecurityViewModel",
            "schema": {
              "$ref": "#/definitions/SecretDetailSecurityViewModel",
              "description": "SecretDetailSecurityViewModel"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/settings": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Settings",
        "description": "Get Secret Settings",
        "operationId": "SecretsService_GetSecretSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Settings",
            "schema": {
              "$ref": "#/definitions/SecretDetailSettingsModel",
              "description": "Secret Settings"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/state": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret State",
        "description": "Retrieve state about a Secret such as whether it requires approval, doublelock, checkout, or other restricted actions to be performed before calling the get the secret.",
        "operationId": "SecretsService_GetSecretState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Detail State View Model",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretDetailStateViewModel",
              "description": "Secret Detail State View Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/stop-password-change": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Attempt to stop a password change",
        "description": "Attempt to stop a password change",
        "operationId": "SecretsService_StopPasswordChange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Attempt to stop a password change",
            "schema": {
              "$ref": "#/definitions/SecretDetailStopPasswordResultModel",
              "description": "Attempt to stop a password change"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/summary": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Summary",
        "description": "Get the summary for a secret",
        "operationId": "SecretsService_GetSummary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret summary object",
            "schema": {
              "$ref": "#/definitions/SecretSummary",
              "description": "Secret summary object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{id}/undelete": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Undelete a Secret",
        "description": "Undelete a Secret",
        "operationId": "SecretsService_UndeleteSecret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret",
            "schema": {
              "$ref": "#/definitions/SecretDetailGeneralViewModel",
              "description": "Secret"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/{secretId}/favorite": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Favorite a Secret",
        "description": "Used to favorite or unfavorite an individual Secret",
        "operationId": "SecretsService_Favorite",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FavoriteSecretArgs",
              "description": "args"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "The secret to favorite or unfavorite.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Whether or not the secret is now favorited by the user.",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/favorite": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "List a User's Favorite Secrets",
        "description": "Returns a list of secrets which the user has favorited.",
        "operationId": "SecretsService_GetFavorites",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Identifying information for each secret favorited",
            "schema": {
              "description": "Identifying information for each secret favorited",
              "items": {
                "$ref": "#/definitions/WidgetSecretModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/lookup": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Lookup Secrets",
        "description": "Search, filter, sort, and page secrets, returning only secret ID and name",
        "operationId": "SecretsService_SearchSecretLookup",
        "parameters": [
          {
            "name": "filter.allowDoubleLocks",
            "in": "query",
            "description": "Whether to allow DoubleLocks as part of the search. True by default",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.doNotCalculateTotal",
            "in": "query",
            "description": "Whether to return the total number of secrets matching the filters. False by default",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.doubleLockId",
            "in": "query",
            "description": "Only include Secrets with this DoubleLock ID assigned in the search results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.extendedFields",
            "in": "query",
            "description": "Names of Secret Template fields to return.  Only exposed fields can be returned.",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "filter.extendedTypeId",
            "in": "query",
            "description": "Return only secrets matching a certain extended type",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "Return only secrets within a certain folder",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.heartbeatStatus",
            "in": "query",
            "description": "Return only secrets with a certain heartbeat status",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "Whether to include active secrets in results (when excluded equals true)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive secrets in results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeRestricted",
            "in": "query",
            "description": "Whether to include restricted secrets in results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeSubFolders",
            "in": "query",
            "description": "Whether to include secrets in subfolders of the specified folder",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.isExactMatch",
            "in": "query",
            "description": "Whether to do an exact match of the search text or a partial match",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.onlyRPCEnabled",
            "in": "query",
            "description": "Whether to only include secrets whose template has Remote Password Changing enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.onlySharedWithMe",
            "in": "query",
            "description": "When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.passwordTypeIds",
            "in": "query",
            "description": "Return only secrets matching certain password types",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          {
            "name": "filter.permissionRequired",
            "in": "query",
            "description": "Specify whether to filter by List, View, Edit, or Owner permission. Default is List. (List = 1, View = 2, Edit = 3, Owner = 4",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.scope",
            "in": "query",
            "description": "Specify whether to search AllSecrets, Recent, or Favorites (All = 1, Recent = 2,Favorites = 3",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchField",
            "in": "query",
            "description": "Field to search",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchFieldSlug",
            "in": "query",
            "description": "Field-slug to search. This will override SearchField.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.secretTemplateId",
            "in": "query",
            "description": "Return only secrets matching a certain template",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "Return only secrets within a certain site",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretLookup",
              "description": "Secret search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/lookup/{id}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Lookup Secrets",
        "description": "Look up secret by ID and return secret name and ID",
        "operationId": "SecretsService_GetLookup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret search result object",
            "schema": {
              "$ref": "#/definitions/SecretLookup",
              "description": "Secret search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/rdpproxy": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get RDP Proxy Information",
        "description": "Get RDP Proxy Information",
        "operationId": "SecretsService_GetSecretRdpProxyInfo",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretProxyArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RDP Proxy Information",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretSummary",
              "description": "RDP Proxy Information"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/search-total": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Search Total",
        "description": "Gets the total number of secrets matching the secret search filter",
        "operationId": "SecretsService_SearchTotal",
        "parameters": [
          {
            "name": "filter.allowDoubleLocks",
            "in": "query",
            "description": "Whether to allow DoubleLocks as part of the search. True by default",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.doNotCalculateTotal",
            "in": "query",
            "description": "Whether to return the total number of secrets matching the filters. False by default",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.doubleLockId",
            "in": "query",
            "description": "Only include Secrets with this DoubleLock ID assigned in the search results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.extendedFields",
            "in": "query",
            "description": "Names of Secret Template fields to return.  Only exposed fields can be returned.",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "filter.extendedTypeId",
            "in": "query",
            "description": "Return only secrets matching a certain extended type",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "Return only secrets within a certain folder",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.heartbeatStatus",
            "in": "query",
            "description": "Return only secrets with a certain heartbeat status",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "Whether to include active secrets in results (when excluded equals true)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive secrets in results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeRestricted",
            "in": "query",
            "description": "Whether to include restricted secrets in results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeSubFolders",
            "in": "query",
            "description": "Whether to include secrets in subfolders of the specified folder",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.isExactMatch",
            "in": "query",
            "description": "Whether to do an exact match of the search text or a partial match",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.onlyRPCEnabled",
            "in": "query",
            "description": "Whether to only include secrets whose template has Remote Password Changing enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.onlySharedWithMe",
            "in": "query",
            "description": "When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.passwordTypeIds",
            "in": "query",
            "description": "Return only secrets matching certain password types",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          {
            "name": "filter.permissionRequired",
            "in": "query",
            "description": "Specify whether to filter by List, View, Edit, or Owner permission. Default is List. (List = 1, View = 2, Edit = 3, Owner = 4",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.scope",
            "in": "query",
            "description": "Specify whether to search AllSecrets, Recent, or Favorites (All = 1, Recent = 2,Favorites = 3",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchField",
            "in": "query",
            "description": "Field to search",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchFieldSlug",
            "in": "query",
            "description": "Field-slug to search. This will override SearchField.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.secretTemplateId",
            "in": "query",
            "description": "Return only secrets matching a certain template",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "Return only secrets within a certain site",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Integer number of matching secrets",
            "schema": {
              "description": "Int32",
              "type": "integer",
              "format": "int32"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/sshproxy": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get SSH Proxy Information",
        "description": "Get SSH Proxy Information",
        "operationId": "SecretsService_GetSecretSshProxyInfo",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretProxyArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Proxy Information",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretSummary",
              "description": "SSH Proxy Information"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/sshterminal": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get SSH Terminal Details",
        "description": "Get SSH Terminal Details",
        "operationId": "SecretsService_GetSecretSshTerminalDetails",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretSshTerminalArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Terminal Details",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secrets/stub": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Stub",
        "description": "Return the default values for a new secret",
        "operationId": "SecretsService_Stub",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "description": "Containing folder ID. May be null unless secrets are required to be in folders.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "secretTemplateId",
            "in": "query",
            "description": "Secret template ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret object",
            "schema": {
              "$ref": "#/definitions/SecretModel",
              "description": "Secret object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secretserversettings/capabilities": {
      "post": {
        "tags": [
          "SecretServerSettings"
        ],
        "summary": "Stub an empty Secret Server Settings export",
        "description": "Returns an empty Secret Server Settings export to be filled out.",
        "operationId": "SecretServerSettingsService_GetExportImportCapabilities",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretServerSettingsImportCapabilitiesArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An empty Secret Server Settings export",
            "schema": {
              "$ref": "#/definitions/SecretServerSettingsImportCapabilityModel",
              "description": "An empty Secret Server Settings export"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secretserversettings/export": {
      "get": {
        "tags": [
          "SecretServerSettings"
        ],
        "summary": "Get Secret Server Settings",
        "description": "Get Secret Server Settings",
        "operationId": "SecretServerSettingsService_GetExport",
        "parameters": [
          {
            "name": "loadAdvancedSettings",
            "in": "query",
            "description": "LoadAdvancedSettings",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadAll",
            "in": "query",
            "description": "LoadAll",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadApplicationSettings",
            "in": "query",
            "description": "LoadApplicationSettings",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadEmail",
            "in": "query",
            "description": "LoadEmail",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadFolderSettings",
            "in": "query",
            "description": "LoadFolderSettings",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadLauncherSettings",
            "in": "query",
            "description": "LoadLauncherSettings",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadLicenses",
            "in": "query",
            "description": "LoadLicenses",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadLocalUserPasswords",
            "in": "query",
            "description": "LoadLocalUserPasswords",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadLogin",
            "in": "query",
            "description": "LoadLogin",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadPermissionOptions",
            "in": "query",
            "description": "LoadPermissionOptions",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadProtocolHandlerSettings",
            "in": "query",
            "description": "LoadProtocolHandlerSettings",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadSaml",
            "in": "query",
            "description": "LoadSaml",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadSecurity",
            "in": "query",
            "description": "LoadSecurity",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadSessionRecording",
            "in": "query",
            "description": "LoadSessionRecording",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadSshCommands",
            "in": "query",
            "description": "LoadSshCommands",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadTicketSystem",
            "in": "query",
            "description": "LoadTicketSystem",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadUserExperience",
            "in": "query",
            "description": "LoadUserExperience",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "loadUserInterface",
            "in": "query",
            "description": "LoadUserInterface",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Server Settings",
            "schema": {
              "$ref": "#/definitions/SecretServerSettingsModel",
              "description": "Secret Server Settings"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secretserversettings/export/stub": {
      "get": {
        "tags": [
          "SecretServerSettings"
        ],
        "summary": "Stub an empty Secret Server Settings export",
        "description": "Returns an empty Secret Server Settings export to be filled out.",
        "operationId": "SecretServerSettingsService_GetExportStub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "An empty Secret Server Settings export",
            "schema": {
              "$ref": "#/definitions/SecretServerSettingsModel",
              "description": "An empty Secret Server Settings export"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secretserversettings/import": {
      "post": {
        "tags": [
          "SecretServerSettings"
        ],
        "summary": "Import Secret Server Settings",
        "description": "Apply a set of Secret Server Settings via a JSON upload.",
        "operationId": "SecretServerSettingsService_ImportSetting",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretServerSettingsImportArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The now active configuration.",
            "schema": {
              "$ref": "#/definitions/SecretServerSettingsImportResultModel",
              "description": "The now active configuration."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-template-permissions": {
      "get": {
        "tags": [
          "SecretTemplatePermissions"
        ],
        "summary": "Search Secret Template Permissions",
        "description": "Search, filter, sort, and page secret template permissions",
        "operationId": "SecretTemplatePermissionsService_Search",
        "parameters": [
          {
            "name": "filter.groupId",
            "in": "query",
            "description": "GroupId",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret template permission search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretTemplateGroupSummary",
              "description": "Secret template permission search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "SecretTemplatePermissions"
        ],
        "summary": "Update Secret Templates Permissions",
        "description": "Change permissions",
        "operationId": "SecretTemplatePermissionsService_Update",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret permission creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretTemplatePermissionsUpdateArgs",
              "description": "Secret permission creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret permission object",
            "schema": {
              "$ref": "#/definitions/SecretTemplatePermissionModel",
              "description": "Secret permission object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-templates": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Search Secret Templates",
        "description": "Search, filter, sort, and page secret templates",
        "operationId": "SecretTemplatesService_Search",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive secret templates in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeSecretCount",
            "in": "query",
            "description": "Whether to populate Secret count in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret template search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSecretTemplateSummary",
              "description": "Secret template search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Create Secret Template",
        "description": "Create a new Secret Template",
        "operationId": "SecretTemplatesService_CreateTemplate",
        "parameters": [
          {
            "name": "secretTemplateCreateArgs",
            "in": "body",
            "description": "Secret Template creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretTemplateCreateArgs",
              "description": "Secret Template creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Template object",
            "schema": {
              "$ref": "#/definitions/SecretTemplateModel",
              "description": "Secret Template object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-templates/{id}": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get Secret Template",
        "description": "Get a single secret template by ID",
        "operationId": "SecretTemplatesService_Load",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret template ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret template object",
            "schema": {
              "$ref": "#/definitions/SecretTemplateModel",
              "description": "Secret template object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-templates/{templateId}": {
      "put": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Update Secret Template Field",
        "description": "Update a Secret Template Field",
        "operationId": "SecretTemplatesService_Put",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Secret Template Options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretTemplateFieldUpdateArgs",
              "description": "Secret Template Options"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Secret Template ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Template Field",
            "schema": {
              "$ref": "#/definitions/SecretTemplateField",
              "description": "Secret Template Field"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Create Secret Template Field For Template",
        "description": "Create a new Secret Template Field For Template",
        "operationId": "SecretTemplatesService_CreateField",
        "parameters": [
          {
            "name": "secretTemplateFieldCreateArgs",
            "in": "body",
            "description": "Secret Template Field creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretTemplateFieldCreateArgs",
              "description": "Secret Template Field creation options"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Template Field object",
            "schema": {
              "$ref": "#/definitions/SecretTemplateField",
              "description": "Secret Template Field object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Patch Secret Template",
        "description": "Patch secret templates",
        "operationId": "SecretTemplatesService_Patch",
        "parameters": [
          {
            "name": "secretTemplatePatchArgs",
            "in": "body",
            "description": "secretTemplatePatchArgs",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SecretTemplatePatchArgs",
              "description": "secretTemplatePatchArgs"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret template object",
            "schema": {
              "$ref": "#/definitions/SecretTemplateSummary",
              "description": "Secret template object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-templates/fields/{templateFieldId}": {
      "delete": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Disable a Secret Template Field For Template",
        "description": "Disable a Secret Template Field For Template",
        "operationId": "SecretTemplatesService_DisableField",
        "parameters": [
          {
            "name": "templateFieldId",
            "in": "path",
            "description": "Secret Template Field to disable",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Template Field object",
            "schema": {
              "$ref": "#/definitions/SecretTemplateField",
              "description": "Secret Template Field object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-templates/generate-password/{secretfieldId}": {
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Generate Password",
        "description": "Generates a new password matching the Secret Field requirements",
        "operationId": "SecretTemplatesService_GeneratePassword",
        "parameters": [
          {
            "name": "secretfieldId",
            "in": "path",
            "description": "Secret field Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Generate Password result",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-templates/password-requirements/password-dictionaries": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get password dictionaries",
        "description": "Returns the list of custom password dictionaries.",
        "operationId": "SecretTemplatesService_GetPasswordDictionaries",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of password dictionary ID and names.",
            "schema": {
              "description": "A list of password dictionary ID and names.",
              "items": {
                "$ref": "#/definitions/PasswordDictionaryModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Creates new password dictionary",
        "description": "Add new password dictionary",
        "operationId": "SecretTemplatesService_UpdatePasswordDictionary",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "The file of words",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdatePasswordDictionaryArgs",
              "description": "The file of words"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Creates new password dictionary",
        "description": "Add new password dictionary",
        "operationId": "SecretTemplatesService_AddPasswordDictionary",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "The file of words",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddPasswordDictionaryArgs",
              "description": "The file of words"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-templates/password-requirements/password-dictionaries/{id}": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Gets a specific password dictionary by ID",
        "description": "Returns a specific custom password dictionary with the contents.",
        "operationId": "SecretTemplatesService_GetPasswordDictionary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The name and contents of the password dictionary",
            "schema": {
              "$ref": "#/definitions/PasswordDictionaryModel",
              "description": "The name and contents of the password dictionary"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Deletes a specific password dictionary by ID",
        "description": "Deletes a specific custom password dictionary with the contents.",
        "operationId": "SecretTemplatesService_DeletePasswordDictionary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "true",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/secret-templates/password-type/{templateId}": {
      "put": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Update Secret Templates Password Type",
        "description": "Update A Secret template Password Type Options and Fields",
        "operationId": "SecretTemplatesService_Load",
        "parameters": [
          {
            "name": "args",
            "in": "path",
            "description": "args",
            "required": true,
            "type": "object"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Secret template ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret template object",
            "schema": {
              "$ref": "#/definitions/SecretTemplateModel",
              "description": "Secret template object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/security-audit-logs": {
      "get": {
        "tags": [
          "SecurityAuditLogs"
        ],
        "summary": "Search Security Audit Logs",
        "description": "Search, filter, sort, and page security audit logs",
        "operationId": "SecurityAuditLogsService_SearchLogs",
        "parameters": [
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Security audit log search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSecurityAuditLogSummaryAndSecurityAuditLogFilter",
              "description": "Security audit log search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/sites": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Get Sites",
        "description": "Get a list of Sites",
        "operationId": "SitesService_Get",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "includeInactive",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Sites",
            "schema": {
              "description": "List of Sites",
              "items": {
                "$ref": "#/definitions/SiteModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/slack/event": {
      "post": {
        "tags": [
          "Slack"
        ],
        "summary": "Slack Event",
        "description": "Endpoint that only Slack can call, does source validation",
        "operationId": "SlackService_HandleEvent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SlackResponse",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/slack/interaction": {
      "post": {
        "tags": [
          "Slack"
        ],
        "summary": "Slack Interaction",
        "description": "Endpoint that only Slack can call, does source validation",
        "operationId": "SlackService_HandleInteraction",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SlackResponse",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/slack-configuration": {
      "get": {
        "tags": [
          "Slack"
        ],
        "summary": "Slack Configuration",
        "description": "Fetches the Slack configuration",
        "operationId": "SlackService_GetConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SlackResponse",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Slack"
        ],
        "summary": "Slack Configuration",
        "description": "Updates the Slack configuration",
        "operationId": "SlackService_UpdateConfiguration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Slack Configuration Update Options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SlackConfigurationUpdateArgs",
              "description": "Slack Configuration Update Options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SlackResponse",
              "description": ""
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command": {
      "post": {
        "tags": [
          "SshCommand"
        ],
        "summary": "Add an SSH Command",
        "description": "Add an SSH Command",
        "operationId": "SshCommandService_CreateSshCommand",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "SSH Command add options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SshCommandCreateArgs",
              "description": "SSH Command add options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Command",
            "schema": {
              "$ref": "#/definitions/SshCommandViewModel",
              "description": "SSH Command"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command/{id}": {
      "get": {
        "tags": [
          "SshCommand"
        ],
        "summary": "Get an SSH Command",
        "description": "Returns the SSH Command for the provided ID",
        "operationId": "SshCommandService_GetSshCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SSH Command ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The SSH Command View",
            "schema": {
              "$ref": "#/definitions/SshCommandViewModel",
              "description": "The SSH Command View"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command/{sshCommandId}": {
      "patch": {
        "tags": [
          "SshCommand"
        ],
        "summary": "Update an SSH Command",
        "description": "Update an SSH Command",
        "operationId": "SshCommandService_UpdateSshCommand",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "SSH Command Update Options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SshCommandPatchArgs",
              "description": "SSH Command Update Options"
            }
          },
          {
            "name": "sshCommandId",
            "in": "path",
            "description": "sshCommandId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Command",
            "schema": {
              "$ref": "#/definitions/SshCommandModel",
              "description": "SSH Command"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command/list": {
      "get": {
        "tags": [
          "SshCommand"
        ],
        "summary": "Get a list of SSH Commands",
        "description": "Returns a list of SSH Commands that meet the paging/searching critera",
        "operationId": "SshCommandService_GetSshCommands",
        "parameters": [
          {
            "name": "filter.commandPermissionType",
            "in": "query",
            "description": "CommandPermissionType",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.nameOrCommand",
            "in": "query",
            "description": "NameOrCommand",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of SSH Commands",
            "schema": {
              "$ref": "#/definitions/PagingOfSshCommandSummaryModel",
              "description": "The list of SSH Commands"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command/stub": {
      "get": {
        "tags": [
          "SshCommand"
        ],
        "summary": "Stub an empty SSH Command",
        "description": "Returns an empty SSH Command to be filled out.",
        "operationId": "SshCommandService_GetSshCommandStub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "An empty SSH Command",
            "schema": {
              "$ref": "#/definitions/SshCommandDto",
              "description": "An empty SSH Command"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-blocklist": {
      "post": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Add an SSH Command Blocklist",
        "description": "Add an SSH Command Blocklist",
        "operationId": "SshCommandBlocklistService_CreateSshCommandBlocklist",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "SSH Command Blocklist add options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SshCommandBlocklistCreateArgs",
              "description": "SSH Command Blocklist add options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Command Blocklist",
            "schema": {
              "$ref": "#/definitions/SshCommandBlocklistModel",
              "description": "SSH Command Blocklist"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-blocklist/{id}": {
      "get": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Get an SSH Command Blocklist",
        "description": "Returns the SSH Command Blocklist for the provided ID",
        "operationId": "SshCommandBlocklistService_GetSshCommandBlocklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SSH Command Blocklist ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The SSH Command Blocklist View",
            "schema": {
              "$ref": "#/definitions/SshCommandBlocklistModel",
              "description": "The SSH Command Blocklist View"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-blocklist/{sshCommandBlocklistId}": {
      "patch": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Update an SSH Command Blocklist",
        "description": "Update an SSH Command Blocklist",
        "operationId": "SshCommandBlocklistService_PatchSshCommandBlocklist",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "SSH Command Blocklist Update Options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SshCommandBlocklistPatchArgs",
              "description": "SSH Command Blocklist Update Options"
            }
          },
          {
            "name": "sshCommandBlocklistId",
            "in": "path",
            "description": "sshCommandBlocklistId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Command Blocklist",
            "schema": {
              "$ref": "#/definitions/SshCommandBlocklistModel",
              "description": "SSH Command Blocklist"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-blocklist/list": {
      "get": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Get a list of SSH Command Blocklist",
        "description": "Returns a list of SSH Command Blocklists that meet the paging/searching critera",
        "operationId": "SshCommandBlocklistService_GetSshCommandBlocklists",
        "parameters": [
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.name",
            "in": "query",
            "description": "Name",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of SSH Command Blocklists",
            "schema": {
              "$ref": "#/definitions/PagingOfSshCommandBlocklistSummaryModel",
              "description": "The list of SSH Command Blocklists"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-blocklist/policies": {
      "get": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Get a list of Secret Policies that use the given blocklist",
        "description": "Returns a list of Secret Policies that meet the paging/searching critera",
        "operationId": "SshCommandBlocklistService_GetSshCommandBlocklistPolicies",
        "parameters": [
          {
            "name": "filter.sshCommandBlocklistId",
            "in": "query",
            "description": "Results will be associated to the provided blocklist id",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Secret Policies",
            "schema": {
              "$ref": "#/definitions/PagingOfBlocklistSecretPolicySummaryModel",
              "description": "The list of Secret Policies"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-blocklist/stub": {
      "get": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Stub an empty SSH Command Blocklist",
        "description": "Returns an empty SSH Command Blocklist to be filled out.",
        "operationId": "SshCommandBlocklistService_GetSshCommandBlocklistStub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "An empty SSH Command Blocklist",
            "schema": {
              "$ref": "#/definitions/SshCommandBlocklistDto",
              "description": "An empty SSH Command Blocklist"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-item/audit/search": {
      "get": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Search SSH Command, Blocklist, and Menu Audits",
        "description": "Search, filter, sort, and page audits",
        "operationId": "SshCommandMenuService_SearchItemAudits",
        "parameters": [
          {
            "name": "filter.sshCommandItemNameOrNotes",
            "in": "query",
            "description": "SshCommandItemNameOrNotes",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Command, Blocklist, and Menu search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSshCommandItemAuditSummaryModel",
              "description": "SSH Command, Blocklist, and Menu search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-menu": {
      "post": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Add an SSH Command Menu",
        "description": "Add an SSH Command Menu",
        "operationId": "SshCommandMenuService_AddSshCommandMenu",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Team user add options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SshCommandMenuCreateArgs",
              "description": "Team user add options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Command Menu",
            "schema": {
              "$ref": "#/definitions/SshCommandMenuModel",
              "description": "SSH Command Menu"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-menu/{sshCommandMenuId}": {
      "get": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Search Teams",
        "description": "Search, filter, sort, and page teams",
        "operationId": "SshCommandMenuService_GetSshCommandMenu",
        "parameters": [
          {
            "name": "sshCommandMenuId",
            "in": "path",
            "description": "sshCommandMenuId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Team search result object",
            "schema": {
              "$ref": "#/definitions/SshCommandMenuModel",
              "description": "Team search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Update an SSH Command Menu",
        "description": "Update an SSH Command Menu",
        "operationId": "SshCommandMenuService_PatchSshCommandMenu",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "SSH Command Menu Update Options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SshCommandMenuPatchArgs",
              "description": "SSH Command Menu Update Options"
            }
          },
          {
            "name": "sshCommandMenuId",
            "in": "path",
            "description": "sshCommandMenuId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Command Menu",
            "schema": {
              "$ref": "#/definitions/SshCommandMenuModel",
              "description": "SSH Command Menu"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-menu/audit/search": {
      "get": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Search Menu Audits",
        "description": "Search, filter, sort, and page audits",
        "operationId": "SshCommandMenuService_SearchAudits",
        "parameters": [
          {
            "name": "filter.sshCommandMenuName",
            "in": "query",
            "description": "SshCommandMenuName",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Menu audit search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSshCommandMenuAuditSummaryModel",
              "description": "Menu audit search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-menu/search": {
      "get": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Search Teams",
        "description": "Search, filter, sort, and page teams",
        "operationId": "SshCommandMenuService_SearchSshCommandMenu",
        "parameters": [
          {
            "name": "filter.includeDisabled",
            "in": "query",
            "description": "IncludeDisabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Team search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfSshCommandMenuSummaryModel",
              "description": "Team search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ssh-command-menu/state": {
      "get": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Get user actions for SSH Commands",
        "description": "Available user actions for commands",
        "operationId": "SshCommandMenuService_GetSshCommandState",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The list of actions",
            "schema": {
              "$ref": "#/definitions/SshCommandMenuStateModel",
              "description": "The list of actions"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Search Teams",
        "description": "Search, filter, sort, and page teams",
        "operationId": "TeamsService_Search",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Include Inactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "Search Term",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Team search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfTeamDetailModel",
              "description": "Team search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create Team",
        "description": "Create a new team",
        "operationId": "TeamsService_CreateTeam",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Team creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TeamCreateArgs",
              "description": "Team creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New Team Id",
            "schema": {
              "description": "Int32",
              "type": "integer",
              "format": "int32"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Team",
        "description": "Get a single team by ID",
        "operationId": "TeamsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Team object",
            "schema": {
              "$ref": "#/definitions/TeamDetailModel",
              "description": "Team object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update Team",
        "description": "Update a single team by ID",
        "operationId": "TeamsService_UpdateTeam",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Team update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TeamDetailUpdateModel",
              "description": "Team update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Team object",
            "schema": {
              "$ref": "#/definitions/TeamDetailModel",
              "description": "Team object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/teams/{id}/audits": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Team Audits",
        "description": "Search, filter, sort, and page team audits",
        "operationId": "TeamsService_GetTeamAudits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Team Audit search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfTeamAuditModel",
              "description": "Team Audit search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/teams/{id}/members": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Users In Team",
        "description": "Get members in a team",
        "operationId": "TeamsService_GetTeamMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Team membership. Includes Groups and Users. User will be their personal GroupId.",
            "schema": {
              "description": "Get Team membership. Includes Groups and Users. User will be their personal GroupId.",
              "items": {
                "$ref": "#/definitions/TeamGroupMembershipModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Update Team Members",
        "description": "Save members of the team by GroupId",
        "operationId": "TeamsService_AddTeamMember",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Team user add options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TeamMemberUpdateArgs",
              "description": "Team user add options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Team membership. Includes Groups and Users. User will be their personal GroupId.",
            "schema": {
              "description": "Get Team membership. Includes Groups and Users. User will be their personal GroupId.",
              "items": {
                "$ref": "#/definitions/TeamGroupMembershipModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/teams/{id}/sites": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Sites for a Team",
        "description": "Get sites a team has associated",
        "operationId": "TeamsService_GetTeamSites",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "includeInactive",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Team Sites.",
            "schema": {
              "description": "Get Team Sites.",
              "items": {
                "$ref": "#/definitions/TeamSiteMap"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Update Team Sites",
        "description": "Save sites of the team by SiteId",
        "operationId": "TeamsService_AddTeamSite",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Team site add options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TeamSiteUpdateArgs",
              "description": "Team site add options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Team Sites.",
            "schema": {
              "description": "Get Team Sites.",
              "items": {
                "$ref": "#/definitions/TeamSiteMap"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/teams/stub": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Team Stub",
        "description": "Return the default values for a new team",
        "operationId": "TeamsService_Stub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Team object",
            "schema": {
              "$ref": "#/definitions/TeamDetailModel",
              "description": "Team object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/templates/{folderId?}": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get Secret Templates",
        "description": "Get Secret Templates",
        "operationId": "SecretTemplatesService_GetTemplates",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "description": "folderId",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Templates",
            "schema": {
              "$ref": "#/definitions/TemplateViewModel",
              "description": "Secret Templates"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ticket-systems": {
      "get": {
        "tags": [
          "TicketSystems"
        ],
        "summary": "Gets all ticket systems",
        "description": "Gets all ticket systems.",
        "operationId": "TicketSystemsService_GetTicketSystems",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "includeInactive",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket System Models",
            "schema": {
              "description": "Ticket System Models",
              "items": {
                "$ref": "#/definitions/TicketSystemModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "TicketSystems"
        ],
        "summary": "Creates a Ticket System",
        "description": "Creates a Ticket System",
        "operationId": "TicketSystemsService_CreateTicketSystem",
        "parameters": [
          {
            "name": "args",
            "in": "path",
            "description": "Ticket System Create Args",
            "required": true,
            "type": "object"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket System Model",
            "schema": {
              "$ref": "#/definitions/TicketSystemModelV2",
              "description": "Ticket System Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/ticket-systems/{id}": {
      "get": {
        "tags": [
          "TicketSystems"
        ],
        "summary": "Gets a ticket system by ID",
        "description": "Gets a ticket system by ID.",
        "operationId": "TicketSystemsService_GetTicketSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Ticket System ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket System Model",
            "schema": {
              "$ref": "#/definitions/TicketSystemModel",
              "description": "Ticket System Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TicketSystems"
        ],
        "summary": "Updates a Ticket System",
        "description": "Updates a Ticket System",
        "operationId": "TicketSystemsService_UpdateTicketSystem",
        "parameters": [
          {
            "name": "args",
            "in": "path",
            "description": "Ticket System Patch Args",
            "required": true,
            "type": "object"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket System Model",
            "schema": {
              "$ref": "#/definitions/TicketSystemModelV2",
              "description": "Ticket System Model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Search Users",
        "description": "Search, filter, sort, and page users",
        "operationId": "UsersService_SearchUsers",
        "parameters": [
          {
            "name": "filter.domainId",
            "in": "query",
            "description": "Filter users by Active Directory domain",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive users in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchFields",
            "in": "query",
            "description": "Fields to search",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfUserSummary",
              "description": "User search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create User",
        "description": "Create a new user",
        "operationId": "UsersService_CreateUser",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "User creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserCreateArgs",
              "description": "User creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User object",
            "schema": {
              "$ref": "#/definitions/UserModel",
              "description": "User object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User",
        "description": "Get a single user by ID",
        "operationId": "UsersService_Get",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive users in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User object",
            "schema": {
              "$ref": "#/definitions/UserModel",
              "description": "User object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Update a single user by ID",
        "operationId": "UsersService_UpdateUser",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "User update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserUpdateArgs",
              "description": "User update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User object",
            "schema": {
              "$ref": "#/definitions/UserModel",
              "description": "User object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Delete a user by ID",
        "operationId": "UsersService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update included properties for user by Id",
        "description": "Update included properties for user by Id",
        "operationId": "UsersService_PatchUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "patchModel",
            "in": "body",
            "description": "patchModel",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchUserModel",
              "description": "patchModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Configuration",
            "schema": {
              "$ref": "#/definitions/UserModel",
              "description": "User Configuration"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Groups",
        "description": "Get the groups for a user by ID",
        "operationId": "UsersService_GetUserGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group membership results",
            "schema": {
              "$ref": "#/definitions/PagingOfGroupUserSummary",
              "description": "Group membership results"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update all groups on user",
        "description": "Update all groups on user",
        "operationId": "UsersService_UpdateUserGroups",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupAssignments",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/GroupChangeStatusModel",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add groups to existing user",
        "description": "Add groups to existing user",
        "operationId": "UsersService_AddUserToGroups",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupAssignments",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/GroupChangeStatusModel",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove groups from existing user",
        "description": "Remove groups from existing user",
        "operationId": "UsersService_RemoveUserGroups",
        "parameters": [
          {
            "name": "groupIds",
            "in": "query",
            "description": "groupIds",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/GroupChangeStatusModel",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}/ipaddress-restrictions": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Search IP Address restrictions assigned to a user",
        "description": "Search, filter, sort, and page IP Address restriction assigned to a user",
        "operationId": "IpAddressRestrictionsService_GetAllByUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User and IP Address restriction search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfUserIpAddressRestrictionModel",
              "description": "User and IP Address restriction search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}/owners": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Owners",
        "description": "Get the owners for a user by ID",
        "operationId": "UsersService_SearchUserOwners",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User owner results",
            "schema": {
              "$ref": "#/definitions/PagingOfUserOwnerSummary",
              "description": "User owner results"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add User Owner",
        "description": "Add an owner to a single user",
        "operationId": "UsersService_AddUserOwner",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "User owner add options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserOwnerCreateArgs",
              "description": "User owner add options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User owner object",
            "schema": {
              "$ref": "#/definitions/UserOwnerModel",
              "description": "User owner object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Add and remove the owners on the user",
        "description": "Add and remove the owners on the user",
        "operationId": "UsersService_PatchUserOwners",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "patchModel",
            "in": "body",
            "description": "patchModel",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserOwnerPatchUserModel",
              "description": "patchModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all user owner objects for the user",
            "schema": {
              "$ref": "#/definitions/UserOwnerPatchResult",
              "description": "A list of all user owner objects for the user"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}/owners/{ownerId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Owner",
        "description": "Get a single owner for a user",
        "operationId": "UsersService_GetUserOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ownerId",
            "in": "path",
            "description": "Owner ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User owner object",
            "schema": {
              "$ref": "#/definitions/UserOwnerModel",
              "description": "User owner object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove User Owner",
        "description": "Remove an owner from a single user",
        "operationId": "UsersService_DeleteUserOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ownerId",
            "in": "path",
            "description": "Owner ID is the unique sequence for this specific owner.  This is returned as ID on UserOwnerModel",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "schema": {
              "$ref": "#/definitions/DeletedModel",
              "description": "Object deletion result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets roles for user",
        "description": "Gets roles for user",
        "operationId": "UsersService_GetRoles",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/PagingOfRoleSummary",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update all roles on user",
        "description": "Update all roles on user",
        "operationId": "UsersService_UpdateUserRoles",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleAssignments",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/RoleChangeStatusModel",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add roles to existing user",
        "description": "Add roles to existing user",
        "operationId": "UsersService_CreateUserRoles",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleAssignments",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/RoleChangeStatusModel",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove roles from existing user",
        "description": "Remove roles from existing user",
        "operationId": "UsersService_DeleteUserRoles",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleRemovals",
              "description": "args"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "$ref": "#/definitions/RoleChangeStatusModel",
              "description": "Success / Fail"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/audit": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User Audits",
        "description": "Get all of the audits for a user",
        "operationId": "UsersService_GetSiteAudits",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Audits",
            "schema": {
              "$ref": "#/definitions/PagingOfUserAuditSummary",
              "description": "Paged List of Audits"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/lock-out": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Lock Out",
        "description": "Lock Out a specific user.",
        "operationId": "UsersService_LockOut",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LockOutArgs",
              "description": "args"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Result of Lock Out",
            "schema": {
              "$ref": "#/definitions/LockOutResponseModel",
              "description": "Result of Lock Out"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/password-reset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset a user password as an admin",
        "description": "The password reset command",
        "operationId": "UsersService_ResetUserPassword",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PasswordResetArgs",
              "description": "args"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Password Reset Result",
            "schema": {
              "$ref": "#/definitions/PasswordResetResultModel",
              "description": "Password Reset Result"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/reset-two-factor": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset 2FA",
        "description": "Reset 2FA for a specific user.  After the reset they will need to update their 2FA on next login",
        "operationId": "UsersService_ResetTwoFactor",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ResetTwoFactorArgs",
              "description": "args"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Result of 2FA reset",
            "schema": {
              "$ref": "#/definitions/ResetTwoFactorResponseModel",
              "description": "Result of 2FA reset"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/roles-assigned": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Groups",
        "description": "Get the groups for a user by ID",
        "operationId": "UsersService_GetUserRoles",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Group membership results",
            "schema": {
              "$ref": "#/definitions/PagingOfUserRoleSummary",
              "description": "Group membership results"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/teams": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User Teams",
        "description": "Get all of the teams for a user",
        "operationId": "UsersService_GetUserTeams",
        "parameters": [
          {
            "name": "filter.includeGroupMemberships",
            "in": "query",
            "description": "Include Group Memberships",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Include Inactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "Search Term",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Team Summaries",
            "schema": {
              "$ref": "#/definitions/PagingOfUserTeamSummary",
              "description": "Paged List of Team Summaries"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/action/audit": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User Audits by Action",
        "description": "Get all of the audits for users who performed the specified action",
        "operationId": "UsersService_GetUserActionAudits",
        "parameters": [
          {
            "name": "actions",
            "in": "query",
            "description": "actions",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Audits",
            "schema": {
              "$ref": "#/definitions/PagingOfUserAuditSummary",
              "description": "Paged List of Audits"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/change-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Change User Password",
        "description": "Change a user's password",
        "operationId": "UsersService_ChangePassword",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "User password change options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserChangePasswordArgs",
              "description": "User password change options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User object",
            "schema": {
              "$ref": "#/definitions/UserModel",
              "description": "User object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Current User",
        "description": "Gets the current user",
        "operationId": "UsersService_GetCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current user result object",
            "schema": {
              "$ref": "#/definitions/CurrentUserModel",
              "description": "Current user result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/delete-pii/{id}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user's personally identifiable info",
        "description": "Delete a user's personally identifiable info",
        "operationId": "UsersService_UserPersonalInfoDeleteCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/lookup": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Lookup Users",
        "description": "Search, filter, sort, and page users, returning only user ID and name",
        "operationId": "UsersService_Lookup",
        "parameters": [
          {
            "name": "filter.domainId",
            "in": "query",
            "description": "Filter users by Active Directory domain",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive users in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchFields",
            "in": "query",
            "description": "Fields to search",
            "required": false,
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfUserLookup",
              "description": "User search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/preference": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Preference",
        "description": "Get a Preference for the current user",
        "operationId": "UsersService_GetPreference",
        "parameters": [
          {
            "name": "isLegacy",
            "in": "query",
            "description": "Is Legacy",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "settingCode",
            "in": "query",
            "description": "Setting Code",
            "required": false,
            "type": "string"
          },
          {
            "name": "settingName",
            "in": "query",
            "description": "Setting Name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Preference",
            "schema": {
              "$ref": "#/definitions/PreferenceModel",
              "description": "Preference"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update Preference",
        "description": "Update a Preference for the current user",
        "operationId": "UsersService_UpdatePreference",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RestPreferenceUpdateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preference",
            "schema": {
              "$ref": "#/definitions/PreferenceModel",
              "description": "Preference"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/public-ssh-keys": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Public Ssh Keys",
        "description": "Get the public ssh keys for a user by ID",
        "operationId": "UsersService_GetUserPublicSshKeys",
        "parameters": [
          {
            "name": "filter.includeExpired",
            "in": "query",
            "description": "Whether to include expired user public ssh keys in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive user public ssh keys in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "An optional ID for a specific user's public ssh keys",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Public ssh key results",
            "schema": {
              "$ref": "#/definitions/PagingOfUserPublicSshKeySummary",
              "description": "Public ssh key results"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a User Ssh Key",
        "description": "Create the public ssh keys for the current user",
        "operationId": "UsersService_CreateUserPublicSshKey",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "args",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserPublicSshKeyCreateArgs",
              "description": "args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Private ssh key result",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/public-ssh-keys/{id}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Deactivate SSH Key",
        "description": "Deactivate a User's Public SSH Key by specifying the key's ID",
        "operationId": "UsersService_DeactivateUserPublicSshKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Public SSH Key ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The ID if the key deactivated",
            "schema": {
              "description": "Int32",
              "type": "integer",
              "format": "int32"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/stub": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Stub",
        "description": "Return the default values for a new user",
        "operationId": "UsersService_Stub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Default User",
            "schema": {
              "$ref": "#/definitions/UserModel",
              "description": "Default User"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/users/verify-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Verify the Current User Password",
        "description": "Verify the current user's password",
        "operationId": "UsersService_VerifyPassword",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "User password verification options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserPasswordVerifyArgs",
              "description": "User password verification options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "schema": {
              "description": "Boolean",
              "type": "boolean"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/userscripts": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Search scripts",
        "description": "Search, filter, sort, and page scripts",
        "operationId": "ScriptService_Search",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive scripts in the results",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search Text",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "scripts search result object",
            "schema": {
              "$ref": "#/definitions/PagingOfScriptSummary",
              "description": "scripts search result object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Script"
        ],
        "summary": "Create Script",
        "description": "Create a new Script",
        "operationId": "ScriptService_Post",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Script creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScriptCreateArgs",
              "description": "Script creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Template object",
            "schema": {
              "$ref": "#/definitions/ScriptModel",
              "description": "Secret Template object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/userscripts/{id}": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get Script",
        "description": "Get a single script by ID",
        "operationId": "ScriptService_Load",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Script ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Script object",
            "schema": {
              "$ref": "#/definitions/ScriptModel",
              "description": "Script object"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "Version"
        ],
        "summary": "Secret Server Version",
        "description": "Retrieve Secret Server Version",
        "operationId": "VersionService_Get",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Unknown or empty response"
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/workflows/instances/template/{id}": {
      "get": {
        "tags": [
          "WorkflowInstances"
        ],
        "summary": "Get Workflow Instances By Workflow Template Id.",
        "description": "Get active workflow instances that use the given workflow template",
        "operationId": "WorkflowInstancesService_GetByTemplateId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The active workflow instances that use the Workflow Template",
            "schema": {
              "description": "The active workflow instances that use the Workflow Template",
              "items": {
                "$ref": "#/definitions/WorkflowInstanceDto"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/workflows/templates": {
      "get": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Get a Workflow Template List",
        "description": "Search, filter, sort, and page Workflow Templates.",
        "operationId": "WorkflowTemplatesService_SearchWorkflowTemplates",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.workflowType",
            "in": "query",
            "description": "WorkflowType",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of Workflow Templates.",
            "schema": {
              "$ref": "#/definitions/PagingOfWorkflowTemplateDetailModel",
              "description": "A paginated list of Workflow Templates."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Create a Workflow Template",
        "description": "Create a new Workflow Template.",
        "operationId": "WorkflowTemplatesService_CreateWorkflowTemplate",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Workflow Template creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateCreateArgs",
              "description": "Workflow Template creation options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new Workflow Template's ID.",
            "schema": {
              "description": "Int32",
              "type": "integer",
              "format": "int32"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/workflows/templates/{id}": {
      "get": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Get a Workflow Template",
        "description": "Request a specific Workflow Template by ID.",
        "operationId": "WorkflowTemplatesService_GetTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Workflow Template.",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateDetailModel",
              "description": "The requested Workflow Template."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Update a Workflow Template",
        "description": "Update a single Workflow Template by ID.",
        "operationId": "WorkflowTemplatesService_UpdateWorkflowTemplate",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Workflow Template update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateUpdateModel",
              "description": "Workflow Template update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated Workflow Template.",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateDetailModel",
              "description": "The updated Workflow Template."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/workflows/templates/{id}/audits": {
      "get": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Get a Workflow Template Audit List",
        "description": "Search, filter, sort, and page Workflow Template Audits.",
        "operationId": "WorkflowTemplatesService_SearchTemplateAudit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of Workflow Template Audits.",
            "schema": {
              "$ref": "#/definitions/PagingOfWorkflowTemplateAuditModel",
              "description": "A paginated list of Workflow Template Audits."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/workflows/templates/{id}/cancel-requests": {
      "post": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Cancel Workflow Requests",
        "description": "Cancel all Workflow Requests that are using the provided Workflow Template.",
        "operationId": "WorkflowTemplatesService_CancelRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of cancellation.",
            "schema": {
              "description": "String",
              "type": "string"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/workflows/templates/{id}/entities/{includeAll}": {
      "get": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Count of Entities using a Workflow Template",
        "description": "Request the number of entities that use the Workflow Template.",
        "operationId": "WorkflowTemplatesService_GetWorkflowEntities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeAll",
            "in": "path",
            "description": "includeAll",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "The number of entities that use the workflow template.",
            "schema": {
              "description": "Int32",
              "type": "integer",
              "format": "int32"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/workflows/templates/{id}/steps": {
      "get": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Get Workflow Template Steps",
        "description": "Get all the steps for a workflow template",
        "operationId": "WorkflowStepTemplatesService_GetTemplateSteps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of workflow step models",
            "schema": {
              "$ref": "#/definitions/PagingOfWorkflowStepTemplateDetailModel",
              "description": "A list of workflow step models"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Update Workflow Template Steps",
        "description": "Update the steps for a workflow template",
        "operationId": "WorkflowStepTemplatesService_UpdateStep",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Workflow Template Steps creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WorkflowStepTemplateUpdateArgs",
              "description": "Workflow Template Steps creation options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The workflow template steps",
            "schema": {
              "description": "The workflow template steps",
              "items": {
                "$ref": "#/definitions/WorkflowStepTemplateDetailModel"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Create Workflow Step",
        "description": "Create a step for a Workflow Template",
        "operationId": "WorkflowStepTemplatesService_CreateStep",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Workflow Template Step creation options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WorkflowStepTemplateCreateArgs",
              "description": "Workflow Template Step creation options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "New Workflow Template Steps ID",
            "schema": {
              "description": "Int32",
              "type": "integer",
              "format": "int32"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/workflows/templates/{id}/steps/{stepNum}": {
      "get": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Get a Workflow Template Step",
        "description": "Get a step for a workflow template",
        "operationId": "WorkflowStepTemplatesService_GetTemplateStep",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stepNum",
            "in": "path",
            "description": "Workflow Step Number",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A workflow step model",
            "schema": {
              "$ref": "#/definitions/WorkflowStepTemplateDetailModel",
              "description": "A workflow step model"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Update a Workflow Template Step",
        "description": "Updates a single Workflow Template Step by ID",
        "operationId": "WorkflowStepTemplatesService_UpdateStepModel",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "description": "Workflow Template update options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WorkflowStepTemplateUpdateModel",
              "description": "Workflow Template update options"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "stepNum",
            "in": "path",
            "description": "Workflow Step Number",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow Template Step",
            "schema": {
              "$ref": "#/definitions/WorkflowStepTemplateDetailModel",
              "description": "Workflow Template Step"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/workflows/templates/steps/stub": {
      "get": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Get a Workflow Template Step Stub",
        "description": "Get an empty Workflow Template Step",
        "operationId": "WorkflowStepTemplatesService_Stub",
        "parameters": [],
        "responses": {
          "200": {
            "description": "An empty workflow step",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateDetailModel",
              "description": "An empty workflow step"
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/workflows/templates/stub": {
      "get": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Get a Workflow Template Stub",
        "description": "Get an empty Workflow Template.",
        "operationId": "WorkflowTemplatesService_StubWorkflowTemplate",
        "parameters": [],
        "responses": {
          "200": {
            "description": "An Workflow Template.",
            "schema": {
              "$ref": "#/definitions/WorkflowTemplateDetailModel",
              "description": "An Workflow Template."
            }
          },
          "403": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/AuthenticationFailedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AuthenticationFailedResponse": {
      "description": "Response object for authentication failures",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "description": "Error message",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BadRequestResponse": {
      "description": "Response object for invalid requests",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "description": "Error message",
          "type": "string"
        },
        "messageDetail": {
          "description": "Error message detail",
          "type": "string"
        },
        "errorCode": {
          "description": "Error message code",
          "type": "string"
        },
        "modelState": {
          "description": "An object describing validation errors",
          "type": "object"
        }
      },
      "type": "object"
    },
    "InternalServerErrorResponse": {
      "description": "Response object for internal server errors",
      "required": [
        "message",
        "exceptionMessage",
        "exceptionType",
        "stackTrace"
      ],
      "properties": {
        "message": {
          "description": "Error message",
          "type": "string"
        },
        "exceptionMessage": {
          "description": "Error message from exception",
          "type": "string"
        },
        "exceptionType": {
          "description": "Exception type",
          "type": "string"
        },
        "stackTrace": {
          "description": "Exception stack trace",
          "type": "string"
        }
      },
      "type": "object"
    },
    "OnlineActivationArgs": {
      "description": "Online Secret Server Activation Arguments",
      "required": [
        "name",
        "phoneNumber",
        "email"
      ],
      "properties": {
        "email": {
          "description": "Email of person performing activation",
          "type": "string"
        },
        "name": {
          "description": "Name of person performing activation",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Phone Number of person performing activation",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GenericResult": {
      "description": "GenericResult",
      "properties": {
        "debugMessages": {
          "description": "DebugMessages",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "errorMessage": {
          "description": "ErrorMessage",
          "type": "string"
        },
        "success": {
          "description": "Success",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfDomainSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/DomainSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DomainSummary": {
      "description": "Domain Summary",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "concurrencyId": {
          "description": "Concurrency Id",
          "type": "string"
        },
        "distinguishedName": {
          "description": "Distinguished Name",
          "type": "string"
        },
        "domainId": {
          "description": "Domain Id",
          "type": "integer",
          "format": "int32"
        },
        "domainName": {
          "description": "Domain Name",
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/DomainType",
          "description": "Domain Type"
        },
        "friendlyName": {
          "description": "Friendly Name",
          "type": "string"
        },
        "requireRadiusAuthentication": {
          "description": "Require Radius Authentication",
          "type": "boolean"
        },
        "siteId": {
          "description": "Site Id ",
          "type": "integer",
          "format": "int32"
        },
        "useSecureLdap": {
          "description": "Use Secure LDAP",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DomainType": {
      "description": "Domain Type",
      "properties": {},
      "type": "string",
      "enum": [
        "ActiveDirectory",
        "OpenLdap",
        "AzureActiveDirectory"
      ]
    },
    "Severity": {
      "description": "Error severity level",
      "properties": {},
      "type": "string",
      "enum": [
        "None",
        "Retry",
        "Warn",
        "Critical",
        "Fatal"
      ]
    },
    "Sort": {
      "description": "Sort options. Multiple sort options can be provided in the query string.",
      "required": [
        "name",
        "direction"
      ],
      "properties": {
        "direction": {
          "$ref": "#/definitions/SortDirection",
          "description": "Sort direction"
        },
        "name": {
          "description": "Sort field name",
          "type": "string"
        },
        "priority": {
          "description": "Priority index. Sorts with lower values are executed earlier",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SortDirection": {
      "description": "Sort direction",
      "properties": {},
      "type": "string",
      "enum": [
        "None",
        "Asc",
        "Desc"
      ]
    },
    "DomainCreateData": {
      "description": "DomainCreateData",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "authType": {
          "description": "AuthType",
          "type": "string"
        },
        "clientId": {
          "description": "ClientId",
          "type": "string",
          "format": "uuid"
        },
        "clientSecret": {
          "description": "ClientSecret",
          "type": "string"
        },
        "discoverSpecificOUs": {
          "description": "DiscoverSpecificOUs",
          "type": "boolean"
        },
        "distinguishedName": {
          "description": "DistinguishedName",
          "type": "string"
        },
        "domainName": {
          "description": "DomainName",
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/DomainType",
          "description": "DomainType"
        },
        "friendlyName": {
          "description": "FriendlyName",
          "type": "string"
        },
        "requireDuoAuthentication": {
          "description": "RequireDuoAuthentication",
          "type": "boolean"
        },
        "requireEmailAuthentication": {
          "description": "RequireEmailAuthentication",
          "type": "boolean"
        },
        "requireFido2Authentication": {
          "description": "RequireFido2Authentication",
          "type": "boolean"
        },
        "requireOATHAuthentication": {
          "description": "RequireOATHAuthentication",
          "type": "boolean"
        },
        "requireRadiusAuthentication": {
          "description": "RequireRadiusAuthentication",
          "type": "boolean"
        },
        "siteId": {
          "description": "SiteId",
          "type": "integer",
          "format": "int32"
        },
        "syncSecretId": {
          "description": "SyncSecretId",
          "type": "integer",
          "format": "int32"
        },
        "tenantId": {
          "description": "TenantId",
          "type": "string",
          "format": "uuid"
        },
        "useAES256": {
          "description": "UseAES256",
          "type": "boolean"
        },
        "userAuthType": {
          "description": "UserAuthType",
          "type": "string"
        },
        "useSecureLDAP": {
          "description": "UseSecureLDAP",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DomainModel": {
      "description": "Domain",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "authType": {
          "$ref": "#/definitions/AuthType",
          "description": "Auth Type for OpenLdap"
        },
        "azureAdDomainConfiguration": {
          "$ref": "#/definitions/IAzureAdDomainConfigurationModel",
          "description": "Azure AD Domain Configuration"
        },
        "baseDN": {
          "description": "Base DN",
          "type": "string"
        },
        "concurrencyId": {
          "description": "Concurrency Id",
          "type": "string"
        },
        "configurationId": {
          "description": "Configuration Id",
          "type": "integer",
          "format": "int32"
        },
        "distinguishedName": {
          "description": "Distinguished Name",
          "type": "string"
        },
        "domainId": {
          "description": "Domain Id",
          "type": "integer",
          "format": "int32"
        },
        "domainName": {
          "description": "Domain Name",
          "type": "string"
        },
        "domainPassword": {
          "description": "Domain Password",
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/DomainType",
          "description": "Domain Type"
        },
        "domainUsername": {
          "description": "Domain Username",
          "type": "string"
        },
        "friendlyName": {
          "description": "Friendly Name",
          "type": "string"
        },
        "netBIOSName": {
          "description": "NetBIOS Name",
          "type": "string"
        },
        "requireDuoAuthentication": {
          "description": "Require Duo Authentication",
          "type": "boolean"
        },
        "requireEmailAuthentication": {
          "description": "Require Email Authentication",
          "type": "boolean"
        },
        "requireFido2Authentication": {
          "description": "Require Fido2 Authentication",
          "type": "boolean"
        },
        "requireOATHAuthentication": {
          "description": "Require OATH Authentication",
          "type": "boolean"
        },
        "requireRadiusAuthentication": {
          "description": "Require Radius Authentication",
          "type": "boolean"
        },
        "siteId": {
          "description": "Site Id",
          "type": "integer",
          "format": "int32"
        },
        "syncSecretId": {
          "description": "Synchronization Secret Id",
          "type": "integer",
          "format": "int32"
        },
        "useAES256": {
          "description": "Use AES256",
          "type": "boolean"
        },
        "userAuthType": {
          "description": "User Auth Type for OpenLdap",
          "type": "string"
        },
        "useSecureLDAP": {
          "description": "Use Secure LDAP",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AuthType": {
      "description": "Auth Type for OpenLdap",
      "properties": {},
      "type": "string",
      "enum": [
        "Anonymous",
        "Basic",
        "Negotiate",
        "Ntlm",
        "Digest",
        "Sicily",
        "Dpa",
        "Msn",
        "External",
        "Kerberos"
      ]
    },
    "IAzureAdDomainConfigurationModel": {
      "description": "Azure AD Domain Configuration",
      "properties": {
        "clientId": {
          "description": "ClientId",
          "type": "string",
          "format": "uuid"
        },
        "clientSecret": {
          "description": "ClientSecret",
          "type": "string"
        },
        "tenantId": {
          "description": "TenantId",
          "type": "string",
          "format": "uuid"
        }
      },
      "type": "object"
    },
    "AppClientCreateArgs": {
      "description": "App client creation options",
      "properties": {
        "redirectUri": {
          "description": "Authorized redirect URI for this app client",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppClientModel": {
      "description": "App client",
      "properties": {
        "clientId": {
          "description": "App client unique identifier",
          "type": "string",
          "format": "uuid"
        },
        "id": {
          "description": "App client ID",
          "type": "integer",
          "format": "int32"
        },
        "redirectUri": {
          "description": "Authorized redirect URI for this app client",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppClientUpdateArgs": {
      "description": "App client update options",
      "required": [
        "id",
        "redirectUri"
      ],
      "properties": {
        "id": {
          "description": "App client ID. Must match ID in path",
          "type": "integer",
          "format": "int32"
        },
        "redirectUri": {
          "description": "Authorized redirect URI for this app client",
          "type": "string",
          "maxLength": 1000
        }
      },
      "type": "object"
    },
    "DeletedModel": {
      "description": "Information about an object that was deleted",
      "properties": {
        "id": {
          "description": "ID of the deleted object",
          "type": "integer",
          "format": "int32"
        },
        "objectType": {
          "description": "Type of the deleted object",
          "type": "string"
        },
        "responseCodes": {
          "description": "List of response codes from the delete operation",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ApplicationAccessRequestViewModel": {
      "description": "ApplicationAccessRequestViewModel",
      "properties": {
        "createdDate": {
          "description": "CreatedDate",
          "type": "string",
          "format": "date-time"
        },
        "deviceId": {
          "description": "DeviceId",
          "type": "integer",
          "format": "int32"
        },
        "requestingApplicationUsername": {
          "description": "RequestingApplicationUsername",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ApplicationAccessStatusRequestType",
          "description": "Status"
        }
      },
      "type": "object"
    },
    "ApplicationAccessStatusRequestType": {
      "description": "Status",
      "properties": {},
      "type": "string",
      "enum": [
        "Approved",
        "Pending",
        "Denied"
      ]
    },
    "ApplicationAccessRequestUpdateArgs": {
      "description": "ApplicationAccessRequestUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ApplicationAccessRequestUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ApplicationAccessRequestUpdateModel": {
      "description": "Data",
      "properties": {
        "status": {
          "$ref": "#/definitions/UpdateFieldValueOfApplicationAccessStatusRequestType",
          "description": "Application Access Status"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfApplicationAccessStatusRequestType": {
      "description": "Application Access Status",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/ApplicationAccessStatusRequestType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "PagingOfApplicationAccessRequestAuditViewModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/ApplicationAccessRequestAuditViewModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ApplicationAccessRequestAuditViewModel": {
      "description": "Query results",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "databaseName": {
          "description": "DatabaseName",
          "type": "string"
        },
        "dateRecorded": {
          "description": "DateRecorded",
          "type": "string",
          "format": "date-time"
        },
        "ipAddress": {
          "description": "IpAddress",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfApplicationAccessRequestViewModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/ApplicationAccessRequestViewModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfUserLookup": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/UserLookup"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UserLookup": {
      "description": "Simple user representation",
      "properties": {
        "id": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "User name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationApplicationSettingsPatchArgs": {
      "description": "ConfigurationApplicationSettingsPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationApplicationSettingsPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationApplicationSettingsPatchModel": {
      "description": "Update application settings configuration",
      "properties": {
        "allowSendTelemetry": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Send Anonymized System Metrics Information"
        },
        "allowSoftwareUpdateChecks": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Allow software update checks. This setting is ignored in cloud environments."
        },
        "apiRefreshTokensEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "API Refresh Tokens Enabled"
        },
        "apiSessionTimeoutDays": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "API session timeout days"
        },
        "apiSessionTimeoutHours": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "API session timeout hours"
        },
        "apiSessionTimeoutMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "API session timeout minutes"
        },
        "apiSessionTimeoutUnlimited": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "API session timeout unlimited"
        },
        "configurationEarlyAdopterEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Notify when preview releases are available. False by default"
        },
        "customUrl": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Outward accessible url to get to application. This setting is ignored in cloud environments."
        },
        "displayDowntimeMessageToAdminsOnly": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Only show downtime messages to admins. This setting is only used in cloud environments."
        },
        "enableCredSsp": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable Cred SSP for win RM"
        },
        "enableSyslogCefLogging": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable Syslog/CEF Logging"
        },
        "enableWebServices": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable Web services"
        },
        "externalInstanceId": {
          "description": "ExternalInstanceId",
          "type": "boolean"
        },
        "maximumTokenRefreshesAllowed": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Maximum Token Refreshes Allowed"
        },
        "maxSecretLogLength": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Maximum number of entries in secret log"
        },
        "mobileMaxOfflineDays": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The Maximum Time for Offline Access on Mobile Devices setting in Secret Server determines how long to cache secret data on the mobile device"
        },
        "mobileMaxOfflineHours": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The Maximum Time for Offline Access on Mobile Devices setting in Secret Server determines how long to cache secret data on the mobile device"
        },
        "preventApplicationFromSleeping": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "A keep alive thread will run in the background pinging the web URL to make sure IIS does not stop running due to inactivity. This setting is ignored in cloud environments."
        },
        "syslogCefLogSite": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "This is the site that the CEF/Syslogs will run on"
        },
        "syslogCefPort": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Syslog/CEF Protocol"
        },
        "syslogCefProtocol": {
          "$ref": "#/definitions/UpdateFieldValueOfSyslogCefProtocolType",
          "description": "Syslog/CEF Protocol to use when sending logs"
        },
        "syslogCefServer": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Syslog/CEF Server Address"
        },
        "syslogCefTimeZone": {
          "$ref": "#/definitions/UpdateFieldValueOfSyslogCefTimeZoneType",
          "description": "Time Zone to use when sending Syslog/CEF Protocol log entries"
        },
        "tmsInstallationPath": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "If TMS is installed, the file location. This setting is ignored in cloud environments."
        },
        "winRmEndpointUrl": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Win RM endpoUpdateFieldValue<int> url"
        },
        "writeSyslogToEventLog": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable syslog events to the windows event log. This setting is ignored in cloud environments."
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfBoolean": {
      "description": "Send Anonymized System Metrics Information",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfInt32": {
      "description": "API session timeout days",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfString": {
      "description": "Outward accessible url to get to application. This setting is ignored in cloud environments.",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfSyslogCefProtocolType": {
      "description": "Syslog/CEF Protocol to use when sending logs",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/SyslogCefProtocolType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "SyslogCefProtocolType": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "UDP",
        "TCP",
        "SECURE_TCP"
      ]
    },
    "UpdateFieldValueOfSyslogCefTimeZoneType": {
      "description": "Time Zone to use when sending Syslog/CEF Protocol log entries",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/SyslogCefTimeZoneType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "SyslogCefTimeZoneType": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "ServerTime",
        "UtcTime"
      ]
    },
    "ConfigurationApplicationSettingsViewModel": {
      "description": "ConfigurationApplicationSettingsViewModel",
      "properties": {
        "allowSendTelemetry": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "AllowSendTelemetry"
        },
        "allowSoftwareUpdateChecks": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "AllowSoftwareUpdateChecks"
        },
        "apiRefreshTokensEnabled": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "ApiRefreshTokensEnabled"
        },
        "apiSessionTimeoutDays": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "ApiSessionTimeoutDays"
        },
        "apiSessionTimeoutHours": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "ApiSessionTimeoutHours"
        },
        "apiSessionTimeoutMinutes": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "ApiSessionTimeoutMinutes"
        },
        "apiSessionTimeoutUnlimited": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "ApiSessionTimeoutUnlimited"
        },
        "configurationEarlyAdopterEnabled": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "ConfigurationEarlyAdopterEnabled"
        },
        "customUrl": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "CustomUrl"
        },
        "displayDowntimeMessageToAdminsOnly": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "DisplayDowntimeMessageToAdminsOnly"
        },
        "enableCredSsp": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "EnableCredSsp"
        },
        "enableSyslogCefLogging": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "EnableSyslogCefLogging"
        },
        "enableWebServices": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "EnableWebServices"
        },
        "maximumTokenRefreshesAllowed": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "MaximumTokenRefreshesAllowed"
        },
        "maxSecretLogLength": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "MaxSecretLogLength"
        },
        "mobileMaxOfflineDays": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "MobileMaxOfflineDays"
        },
        "mobileMaxOfflineHours": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "MobileMaxOfflineHours"
        },
        "preventApplicationFromSleeping": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "PreventApplicationFromSleeping"
        },
        "syslogCefLogSite": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfOptionalInt32",
          "description": "SyslogCefLogSite"
        },
        "syslogCefPort": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "SyslogCefPort"
        },
        "syslogCefProtocol": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfOptionalSyslogCefProtocolType",
          "description": "SyslogCefProtocol"
        },
        "syslogCefServer": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SyslogCefServer"
        },
        "syslogCefTimeZone": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfOptionalSyslogCefTimeZoneType",
          "description": "SyslogCefTimeZone"
        },
        "tmsInstallationPath": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "TmsInstallationPath"
        },
        "winRmEndpointUrl": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "WinRmEndpointUrl"
        },
        "writeSyslogToEventLog": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "WriteSyslogToEventLog"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfOptionalBoolean": {
      "description": "AllowSendTelemetry",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfBoolean": {
      "description": "ApiRefreshTokensEnabled",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfInt32": {
      "description": "ApiSessionTimeoutDays",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfString": {
      "description": "CustomUrl",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldDropDownValueOfOptionalInt32": {
      "description": "SyslogCefLogSite",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "dropDownOptions": {
          "description": "DropDownOptions",
          "items": {
            "$ref": "#/definitions/ViewFieldDropDownOption"
          },
          "type": "array"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ViewFieldDropDownOption": {
      "description": "DropDownOptions",
      "properties": {
        "fieldDisplay": {
          "description": "FieldDisplay",
          "type": "string"
        },
        "fieldValue": {
          "description": "FieldValue",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfOptionalInt32": {
      "description": "SyslogCefPort",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ViewFieldDropDownValueOfOptionalSyslogCefProtocolType": {
      "description": "SyslogCefProtocol",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "dropDownOptions": {
          "description": "DropDownOptions",
          "items": {
            "$ref": "#/definitions/ViewFieldDropDownOption"
          },
          "type": "array"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldDropDownValueOfOptionalSyslogCefTimeZoneType": {
      "description": "SyslogCefTimeZone",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "dropDownOptions": {
          "description": "DropDownOptions",
          "items": {
            "$ref": "#/definitions/ViewFieldDropDownOption"
          },
          "type": "array"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfConfigurationAuditItem": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/ConfigurationAuditItem"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ConfigurationAuditItem": {
      "description": "Configuration Audit Item",
      "properties": {
        "action": {
          "description": "Action that was performed",
          "type": "string"
        },
        "date": {
          "description": "Date of Action",
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "description": "Display name of user performing action",
          "type": "string"
        },
        "notes": {
          "description": "Notes on the action that was performed",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BackupConfigurationModel": {
      "description": "Database Backup Configuration",
      "properties": {
        "backupDatabasePath": {
          "description": "Where to backup the database",
          "type": "string"
        },
        "backupFailureNotification": {
          "description": "Whether or not to send an email if backup fails",
          "type": "boolean"
        },
        "backupPath": {
          "description": "Where to store the web application backup files",
          "type": "string"
        },
        "backupStartDateTime": {
          "description": "The next time the backup will run",
          "type": "string",
          "format": "date-time"
        },
        "configurationSqlBackupTimeoutMinutes": {
          "description": "SQL Timeout when running the backup",
          "type": "integer",
          "format": "int32"
        },
        "copyOnlyDatabaseBackup": {
          "description": "Backup type",
          "type": "boolean"
        },
        "enableDatabaseBackup": {
          "description": "Whether or not the backup the database",
          "type": "boolean"
        },
        "enableScheduledBackup": {
          "description": "Is the backup enabled",
          "type": "boolean"
        },
        "enableTmsBackup": {
          "description": "Whether or not the TMS web files are backed up",
          "type": "boolean"
        },
        "enableWebApplicationBackup": {
          "description": "Whether or not the web application is set to backup",
          "type": "boolean"
        },
        "numberOfBackupsToKeep": {
          "description": "How many backups should be kept (deletes oldest)",
          "type": "integer",
          "format": "int32"
        },
        "repeatDays": {
          "description": "How many days between backups",
          "type": "integer",
          "format": "int32"
        },
        "repeatHours": {
          "description": "How many hours between backups",
          "type": "integer",
          "format": "int32"
        },
        "repeatMinutes": {
          "description": "How many minutes between backups",
          "type": "integer",
          "format": "int32"
        },
        "tmsInstallationPath": {
          "description": "Where TMS is installed",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BackupConfigurationArgs": {
      "description": "BackupConfigurationArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/BackupConfigurationUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "BackupConfigurationUpdateModel": {
      "description": "Data",
      "properties": {
        "backupDatabasePath": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "BackupDatabasePath"
        },
        "backupFailureNotification": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "BackupFailureNotification"
        },
        "backupPath": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "BackupPath"
        },
        "backupStartDateTime": {
          "$ref": "#/definitions/UpdateFieldValueOfDateTime",
          "description": "BackupStartDateTime"
        },
        "configurationSqlBackupTimeoutMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "ConfigurationSqlBackupTimeoutMinutes"
        },
        "copyOnlyDatabaseBackup": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "CopyOnlyDatabaseBackup"
        },
        "enableDatabaseBackup": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "EnableDatabaseBackup"
        },
        "enableScheduledBackup": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "EnableScheduledBackup"
        },
        "enableTmsBackup": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "EnableTmsBackup"
        },
        "enableWebApplicationBackup": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "EnableWebApplicationBackup"
        },
        "numberOfBackupsToKeep": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "NumberOfBackupsToKeep"
        },
        "repeatDays": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "RepeatDays"
        },
        "repeatHours": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "RepeatHours"
        },
        "repeatMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "RepeatMinutes"
        },
        "tmsInstallationPath": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "TmsInstallationPath"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfDateTime": {
      "description": "BackupStartDateTime",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "BackupLogViewModel": {
      "description": "BackupLogViewModel[]",
      "properties": {
        "backupTime": {
          "description": "BackupTime",
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        },
        "success": {
          "description": "Success",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationEmailPatchArgs": {
      "description": "ConfigurationEmailPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationEmailPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationEmailPatchModel": {
      "description": "Update email server configuration",
      "properties": {
        "fromEmailAddress": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "All emails will be sent from this address"
        },
        "smtpCheckCertificateRevocation": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Check Certificate Revocation when in Implicit SSL Connection Mode"
        },
        "smtpDomain": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "SMTP user domain"
        },
        "smtpPassword": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "SMTP user password"
        },
        "smtpPort": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Custom port, otherwise the default"
        },
        "smtpServer": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The resolvable and reachable host name for the outgoing SMTP server"
        },
        "smtpUseCredentials": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "true if credentials are set, false if anonymous"
        },
        "smtpUseImplicitSSL": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Implicit SSL Connection Mode"
        },
        "smtpUserName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "SMTP user name"
        },
        "smtpUseSSL": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Use SSL to connect"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalBoolean": {
      "description": "Check Certificate Revocation when in Implicit SSL Connection Mode",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalInt32": {
      "description": "Custom port, otherwise the default",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ConfigurationEmailViewModel": {
      "description": "ConfigurationEmailViewModel",
      "properties": {
        "fromEmailAddress": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "FromEmailAddress"
        },
        "smtpCheckCertificateRevocation": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "SmtpCheckCertificateRevocation"
        },
        "smtpDomain": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SmtpDomain"
        },
        "smtpPassword": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SmtpPassword"
        },
        "smtpPort": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "SmtpPort"
        },
        "smtpServer": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SmtpServer"
        },
        "smtpUseCredentials": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "SmtpUseCredentials"
        },
        "smtpUseImplicitSSL": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "SmtpUseImplicitSSL"
        },
        "smtpUserName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SmtpUserName"
        },
        "smtpUseSSL": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "SmtpUseSSL"
        }
      },
      "type": "object"
    },
    "ConfigurationFoldersPatchArgs": {
      "description": "ConfigurationFoldersPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationFoldersPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationFoldersPatchModel": {
      "description": "Update folder configuration",
      "properties": {
        "enablePersonalFolders": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Each user will have a personal folder created and assigned to them"
        },
        "personalFolderName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The name of the root personal folder.  Each user's personal folder will be named based on the user"
        },
        "personalFolderNameOption": {
          "$ref": "#/definitions/UpdateFieldValueOfPersonalFolderNameOptionType",
          "description": "The format for the personal folder name for each user"
        },
        "personalFolderWarning": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Warning to be shown when creating Secrets if ShowPersonalFolderWarning is true"
        },
        "requireViewFolderPermission": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Users will only see folders they have View permissions on"
        },
        "showPersonalFolderWarning": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true the PersonalFolderWarning will be shown when creating Secrets"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfPersonalFolderNameOptionType": {
      "description": "The format for the personal folder name for each user",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/PersonalFolderNameOptionType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "PersonalFolderNameOptionType": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "DisplayName",
        "UsernameAndDomain"
      ]
    },
    "ConfigurationSessionRecordingModel": {
      "description": "Session Recording Configuration",
      "properties": {
        "archiveLocationBySite": {
          "description": "If archive location changes based on site",
          "type": "boolean"
        },
        "archivePath": {
          "description": "The location of the recordings stored on disk",
          "type": "string"
        },
        "daysUntilArchive": {
          "description": "The number of days until a recording is archived",
          "type": "integer",
          "format": "int32"
        },
        "daysUntilDelete": {
          "description": "The number of days before a session recording is deleted",
          "type": "integer",
          "format": "int32"
        },
        "enableArchive": {
          "description": "If recordings should be archived",
          "type": "boolean"
        },
        "enableDelete": {
          "description": "If session recordings will be automatically deleted",
          "type": "boolean"
        },
        "enableHardwareAcceleration": {
          "description": "If hardware acceleration should be enabled",
          "type": "boolean"
        },
        "enableInactivityTimeout": {
          "description": "If sessions should end if inactive",
          "type": "boolean"
        },
        "enableOnDemandVideoProcessing": {
          "description": "If on demand video processing should be available",
          "type": "boolean"
        },
        "enableSessionRecording": {
          "description": "Whether or not Session Recording is enabled",
          "type": "boolean"
        },
        "encryptArchive": {
          "description": "If archived session recordings should be encrypted",
          "type": "boolean"
        },
        "hideRecordingIndicator": {
          "description": "If the recording indicator should be shown",
          "type": "boolean"
        },
        "inactivityTimeoutMinutes": {
          "description": "The length of inactivity before the session is ended",
          "type": "integer",
          "format": "int32"
        },
        "maxSessionLength": {
          "description": "The longest a session is allowed to be in hours",
          "type": "integer",
          "format": "int32"
        },
        "rdpProxyRecordKeyStrokes": {
          "description": "If proxied RDP sessions should have keystrokes recorded",
          "type": "boolean"
        },
        "rdpProxyRecordVideo": {
          "description": "If proxied RDP sessions should have video recorded",
          "type": "boolean"
        },
        "sshProxyRecordKeyStrokes": {
          "description": "If proxied SSH sessions should have keystrokes recorded",
          "type": "boolean"
        },
        "sshProxyRecordVideo": {
          "description": "If proxied SSH sessions should have video recorded",
          "type": "boolean"
        },
        "storeInDatabase": {
          "description": "If session recordings should be stored in the database",
          "type": "boolean"
        },
        "useTemporaryArchives": {
          "description": "If the archive location should store temporary session recording data instead of the database",
          "type": "boolean"
        },
        "videoCodecId": {
          "description": "Which video codec to use for session recordings on OSX",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ConfigurationGeneralModel": {
      "description": "Configuration General",
      "properties": {
        "applicationSettings": {
          "$ref": "#/definitions/ConfigurationApplicationSettingsModel",
          "description": "General Application Configuration Settings"
        },
        "email": {
          "$ref": "#/definitions/ConfigurationEmailModel",
          "description": "Email server configuration"
        },
        "folders": {
          "$ref": "#/definitions/ConfigurationFoldersModel",
          "description": "Folders Configuration"
        },
        "launcherSettings": {
          "$ref": "#/definitions/ConfigurationLauncherSettingsModel",
          "description": "Launcher Settings Configuration"
        },
        "localUserPasswords": {
          "$ref": "#/definitions/ConfigurationLocalUserPasswordsModel",
          "description": "Local User Passwords configuration"
        },
        "permissionOptions": {
          "$ref": "#/definitions/ConfigurationPermissionOptionsModel",
          "description": "Permission Options Configuration"
        },
        "protocolHandlerSettings": {
          "$ref": "#/definitions/ConfigurationProtocolHandlerSettingsModel",
          "description": "Protocol Handler Settings Configuration"
        },
        "userExperience": {
          "$ref": "#/definitions/ConfigurationUserExperienceModel",
          "description": "User Experience Configuration"
        },
        "userInterface": {
          "$ref": "#/definitions/ConfigurationUserInterfaceModel",
          "description": "User Interface Configuration Settings"
        }
      },
      "type": "object"
    },
    "ConfigurationApplicationSettingsModel": {
      "description": "Configuration Application Settings",
      "properties": {
        "allowSendTelemetry": {
          "description": "Send Anonymized System Metrics Information",
          "type": "boolean"
        },
        "allowSoftwareUpdateChecks": {
          "description": "Allow software update checks. This setting is ignored in cloud environments.",
          "type": "boolean"
        },
        "apiRefreshTokensEnabled": {
          "description": "API Refresh Tokens Enabled",
          "type": "boolean"
        },
        "apiSessionTimeoutDays": {
          "description": "API session timeout days",
          "type": "integer",
          "format": "int32"
        },
        "apiSessionTimeoutHours": {
          "description": "API session timeout hours",
          "type": "integer",
          "format": "int32"
        },
        "apiSessionTimeoutMinutes": {
          "description": "API session timeout minutes",
          "type": "integer",
          "format": "int32"
        },
        "apiSessionTimeoutUnlimited": {
          "description": "API session timeout unlimited",
          "type": "boolean"
        },
        "configurationEarlyAdopterEnabled": {
          "description": "Notify when preview releases are available. False by default",
          "type": "boolean"
        },
        "customUrl": {
          "description": "Outward accessible url to get to application. This setting is ignored in cloud environments.",
          "type": "string"
        },
        "displayDowntimeMessageToAdminsOnly": {
          "description": "Display Downtime Message To Admins Only",
          "type": "boolean"
        },
        "enableCredSsp": {
          "description": "Enable Cred SSP for win RM",
          "type": "boolean"
        },
        "enableSyslogCefLogging": {
          "description": "Enable Syslog/CEF Logging",
          "type": "boolean"
        },
        "enableWebServices": {
          "description": "Enable Web services",
          "type": "boolean"
        },
        "maximumTokenRefreshesAllowed": {
          "description": "Maximum Token Refreshes Allowed",
          "type": "integer",
          "format": "int32"
        },
        "maxSecretLogLength": {
          "description": "Maximum number of entries in secret log",
          "type": "integer",
          "format": "int32"
        },
        "mobileMaxOfflineDays": {
          "description": "The Maximum Time for Offline Access on Mobile Devices setting in Secret Server determines how long to cache secret data on the mobile device",
          "type": "integer",
          "format": "int32"
        },
        "mobileMaxOfflineHours": {
          "description": "The Maximum Time for Offline Access on Mobile Devices setting in Secret Server determines how long to cache secret data on the mobile device",
          "type": "integer",
          "format": "int32"
        },
        "preventApplicationFromSleeping": {
          "description": "A keep alive thread will run in the background pinging the web URL to make sure IIS does not stop running due to inactivity. This setting is ignored in cloud environments.",
          "type": "boolean"
        },
        "syslogCefLogSite": {
          "description": "This is the site that the CEF/Syslogs will run on",
          "type": "integer",
          "format": "int32"
        },
        "syslogCefPort": {
          "description": "Syslog/CEF Protocol",
          "type": "integer",
          "format": "int32"
        },
        "syslogCefProtocol": {
          "description": "Syslog/CEF Protocol to use when sending logs",
          "type": "string"
        },
        "syslogCefServer": {
          "description": "Syslog/CEF Server Address",
          "type": "string"
        },
        "syslogCefTimeZone": {
          "description": "Time Zone to use when sending Syslog/CEF Protocol log entries",
          "type": "string"
        },
        "tmsInstallationPath": {
          "description": "If TMS is installed, the file location. This setting is ignored in cloud environments.",
          "type": "string"
        },
        "winRmEndpointUrl": {
          "description": "Win RM endpoint url",
          "type": "string"
        },
        "writeSyslogToEventLog": {
          "description": "Enable syslog events to the windows event log. This setting is ignored in cloud environments.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationEmailModel": {
      "description": "Outgoing email server configuration",
      "properties": {
        "fromEmailAddress": {
          "description": "All emails will be sent from this address",
          "type": "string"
        },
        "smtpCheckCertificateRevocation": {
          "description": "Check Certificate Revocation when in Implicit SSL Connection Mode",
          "type": "boolean"
        },
        "smtpDomain": {
          "description": "SMTP user domain",
          "type": "string"
        },
        "smtpPassword": {
          "description": "SMTP user password",
          "type": "string"
        },
        "smtpPort": {
          "description": "Custom port, otherwise the default",
          "type": "integer",
          "format": "int32"
        },
        "smtpServer": {
          "description": "The resolvable and reachable host name for the outgoing SMTP server",
          "type": "string"
        },
        "smtpUseCredentials": {
          "description": "true if credentials are set, false if anonymous",
          "type": "boolean"
        },
        "smtpUseImplicitSSL": {
          "description": "Implicit SSL Connection Mode",
          "type": "boolean"
        },
        "smtpUserName": {
          "description": "SMTP user name",
          "type": "string"
        },
        "smtpUseSSL": {
          "description": "Use SSL to connect",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationFoldersModel": {
      "description": "Folder Configuration",
      "properties": {
        "enablePersonalFolders": {
          "description": "Each user will have a personal folder created and assigned to them",
          "type": "boolean"
        },
        "personalFolderName": {
          "description": "The name of the root personal folder.  Each user's personal folder will be named based on the user",
          "type": "string"
        },
        "personalFolderNameOption": {
          "$ref": "#/definitions/PersonalFolderNameOptionType",
          "description": "The format for the personal folder name for each user"
        },
        "personalFolderWarning": {
          "description": "Warning to be shown when creating Secrets if ShowPersonalFolderWarning is true",
          "type": "string"
        },
        "requireViewFolderPermission": {
          "description": "Users will only see folders they have View permissions on",
          "type": "boolean"
        },
        "showPersonalFolderWarning": {
          "description": "When true the PersonalFolderWarning will be shown when creating Secrets",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationLauncherSettingsModel": {
      "description": "Configuration Launcher Settings",
      "properties": {
        "checkInSecretOnLastLauncherClose": {
          "description": "Forces Check In of Secret when user closes their only active launcher.",
          "type": "boolean"
        },
        "closeLauncherOnCheckInSecret": {
          "description": "When Secret is Checked In, all active launchers associated with it will close.",
          "type": "boolean"
        },
        "enableDomainDownload": {
          "description": "Allow the user to download existing and tested mappings from Thycotic.com.",
          "type": "boolean"
        },
        "enableDomainUpload": {
          "description": "Allow the user to upload mappings",
          "type": "boolean"
        },
        "enableLauncher": {
          "description": "Enable Launcher",
          "type": "boolean"
        },
        "enableLauncherAutoUpdate": {
          "description": "Enable Launcher Auto Update",
          "type": "boolean"
        },
        "enableWebParsing": {
          "description": "Allow Secret Server to retrieve and parse the mapped website when using the web launcher.",
          "type": "boolean"
        },
        "launcherDeploymentType": {
          "description": "Launcher Deployment Type",
          "type": "string"
        },
        "sendSecretUrlToLauncher": {
          "description": "Send the URL that is on the Secret to the web password launcher in addition to the bookmarklet",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationLocalUserPasswordsModel": {
      "description": "Configuration Section for Local User Passwords",
      "properties": {
        "allowUsersToResetForgottenPasswords": {
          "description": "Whether or not the local password can be reset by the user",
          "type": "boolean"
        },
        "enableLocalUserPasswordExpiration": {
          "description": "Indicates whether or not local users must change their password when it is reset or expires.",
          "type": "boolean"
        },
        "enableMinimumPasswordAge": {
          "description": "Local users cannot change their password until it meets this age",
          "type": "boolean"
        },
        "enablePasswordHistory": {
          "description": "Passwords cannot be reused when enabled and still in stored history",
          "type": "boolean"
        },
        "localUserPasswordExpirationDays": {
          "description": "How many days until the password expires",
          "type": "integer",
          "format": "int32"
        },
        "localUserPasswordExpirationHours": {
          "description": "How many hours until the password expires",
          "type": "integer",
          "format": "int32"
        },
        "localUserPasswordExpirationMinutes": {
          "description": "How many minutes until the password expires",
          "type": "integer",
          "format": "int32"
        },
        "minimumPasswordAgeDays": {
          "description": "How many days until password can be changed",
          "type": "integer",
          "format": "int32"
        },
        "minimumPasswordAgeHours": {
          "description": "How many hours until password can be changed",
          "type": "integer",
          "format": "int32"
        },
        "minimumPasswordAgeMinutes": {
          "description": "How many minutes until password can be changed",
          "type": "integer",
          "format": "int32"
        },
        "passwordHistoryItems": {
          "description": "How many passwords should be stored in history.",
          "type": "integer",
          "format": "int32"
        },
        "passwordMinimumLength": {
          "description": "The minimum length required for local user passwords",
          "type": "integer",
          "format": "int32"
        },
        "passwordRequireLowercase": {
          "description": "Whether or not the local password must include a lowercase letter",
          "type": "boolean"
        },
        "passwordRequireNumbers": {
          "description": "Whether or not the local password must include a number",
          "type": "boolean"
        },
        "passwordRequireSymbols": {
          "description": "Whether or not the local password must include a symbol",
          "type": "boolean"
        },
        "passwordRequireUppercase": {
          "description": "Whether or not the local password must include an uppercase letter",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationPermissionOptionsModel": {
      "description": "Configuration Permission Options",
      "properties": {
        "allowDuplicateSecretNames": {
          "description": "Allow Secrets to have the same name in the same folder",
          "type": "boolean"
        },
        "allowViewUserToRetrieveAutoChangeNextPassword": {
          "description": "Users that only have secret view can see the next password",
          "type": "boolean"
        },
        "defaultSecretPermissions": {
          "$ref": "#/definitions/DefaultSecretPermissionsType",
          "description": "Default permissions to be applied when a Secret is created"
        },
        "enableApprovalFromEmail": {
          "description": "Allow approval from email",
          "type": "boolean"
        },
        "forceSecretApproval": {
          "description": "Require approval for secrets",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DefaultSecretPermissionsType": {
      "description": "Default permissions to be applied when a Secret is created",
      "properties": {},
      "type": "string",
      "enum": [
        "InheritsPermissions",
        "CopyFromFolder",
        "OnlyAllowCreator"
      ]
    },
    "ConfigurationProtocolHandlerSettingsModel": {
      "description": "Configuration Protocol Handler Settings",
      "properties": {
        "protocolHandlerInstallTimeAllowedDomains": {
          "description": "Allowed Domains/IP Addresses (comma-separated)",
          "type": "string"
        },
        "protocolHandlerInstallTimeDisableAutoUpdate": {
          "description": "Disable Auto Update",
          "type": "boolean"
        },
        "protocolHandlerInstallTimeSettingsEnabled": {
          "description": "Enable Protocol Handler Install Time Settings",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationUserExperienceModel": {
      "description": "Configuration User Experience",
      "properties": {
        "applicationLanguage": {
          "description": "The default application language for users and the language for non-user specific tasks like logging when applicable",
          "type": "integer",
          "format": "int32"
        },
        "defaultDateFormat": {
          "description": "The default date format that everyone sees unless they override with a user preference",
          "type": "integer",
          "format": "int32"
        },
        "defaultNewUserRoleId": {
          "description": "The role that should be assigned when a new user is created",
          "type": "integer",
          "format": "int32"
        },
        "defaultTimeFormat": {
          "description": "The default time format that everyone sees unless they override with a user preference",
          "type": "integer",
          "format": "int32"
        },
        "forceInactivityTimeout": {
          "description": "Logout users that are inactive",
          "type": "boolean"
        },
        "forceInactivityTimeoutMinutes": {
          "description": "Logout users that are inactive for this many minutes",
          "type": "integer",
          "format": "int32"
        },
        "requireFolderForSecret": {
          "description": "Secrets must be created within a folder",
          "type": "boolean"
        },
        "secretPasswordHistoryRestrictionAll": {
          "description": "No duplicate passwords on a Secret",
          "type": "boolean"
        },
        "secretPasswordHistoryRestrictionCount": {
          "description": "How many passwords must be unique on a Secret",
          "type": "integer",
          "format": "int32"
        },
        "secretViewIntervalMinutes": {
          "description": "How long entering comments to view a Secret last before being required again",
          "type": "integer",
          "format": "int32"
        },
        "serverTimeZoneId": {
          "description": "The timezone that the server shows by default and when job scheduling runs",
          "type": "string"
        },
        "uiInactivitySleepMinutes": {
          "description": "How long until the UI will go inactive and stop polling for updates",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ConfigurationUserInterfaceModel": {
      "description": "User interface settings",
      "properties": {
        "allowUserToSelectTheme": {
          "description": "Allow users to pick their theme when in classic mode",
          "type": "boolean"
        },
        "customLogoCollapsed": {
          "description": "Custom logo when left nav is collapsed",
          "type": "string"
        },
        "customLogoFullSize": {
          "description": "Custom logo full size",
          "type": "string"
        },
        "defaultClassicTheme": {
          "description": "Default classic theme",
          "type": "string"
        },
        "newUiDefault": {
          "description": "New users will use the new ui by default",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationGeneralPatchArgs": {
      "description": "ConfigurationGeneralPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationGeneralUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationGeneralUpdateModel": {
      "description": "Update configuration, only need to send sections that should be updated",
      "properties": {
        "folders": {
          "$ref": "#/definitions/ConfigurationFoldersUpdateModel",
          "description": "Folder option configuration"
        },
        "permissionOptions": {
          "$ref": "#/definitions/ConfigurationPermissionOptionsUpdateModel",
          "description": "Permission option configuration"
        },
        "userExperience": {
          "$ref": "#/definitions/ConfigurationUserExperienceUpdateModel",
          "description": "User experience configuration"
        }
      },
      "type": "object"
    },
    "ConfigurationFoldersUpdateModel": {
      "description": "Update folder configuration",
      "properties": {
        "enablePersonalFolders": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Each user will have a personal folder created and assigned to them"
        },
        "personalFolderName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The name of the root personal folder.  Each user's personal folder will be named based on the user"
        },
        "personalFolderNameOption": {
          "$ref": "#/definitions/UpdateFieldValueOfPersonalFolderNameOptionType",
          "description": "The format for the personal folder name for each user"
        },
        "personalFolderWarning": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Warning to be shown when creating Secrets if ShowPersonalFolderWarning is true"
        },
        "requireViewFolderPermission": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Users will only see folders they have View permissions on"
        },
        "showPersonalFolderWarning": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true the PersonalFolderWarning will be shown when creating Secrets"
        }
      },
      "type": "object"
    },
    "ConfigurationPermissionOptionsUpdateModel": {
      "description": "Configuration Permission Options",
      "properties": {
        "allowDuplicateSecretNames": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether or not Secrets can have the same name in the same folder"
        },
        "allowViewUserToRetrieveAutoChangeNextPassword": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "All users with view only share on a Secret to see the next password"
        },
        "defaultSecretPermissions": {
          "$ref": "#/definitions/UpdateFieldValueOfDefaultSecretPermissionsType",
          "description": "When a new Secret is created these permissions will be assigned"
        },
        "enableApprovalFromEmail": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Allow users to approve by clicking on a link in email"
        },
        "forceSecretApproval": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalForceSecretApprovalType",
          "description": "Force approval type on Secrets that have approval"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfDefaultSecretPermissionsType": {
      "description": "When a new Secret is created these permissions will be assigned",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/DefaultSecretPermissionsType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalForceSecretApprovalType": {
      "description": "Force approval type on Secrets that have approval",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationUserExperienceUpdateModel": {
      "description": "Configuration User Experience",
      "properties": {
        "applicationLanguage": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The default language for all users"
        },
        "defaultDateFormat": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The default date format that everyone sees unless they override with a user preference"
        },
        "defaultNewUserRoleId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "The role that should be assigned when a new user is created"
        },
        "defaultTimeFormat": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The default time format that everyone sees unless they override with a user preference"
        },
        "forceInactivityTimeout": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Logout users that are inactive"
        },
        "forceInactivityTimeoutMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Logout users that are inactive for this many minutes"
        },
        "requireFolderForSecret": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Secrets must be created within a folder"
        },
        "secretPasswordHistoryRestrictionAll": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "No duplicate passwords on a Secret"
        },
        "secretPasswordHistoryRestrictionCount": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "The number of recently used passwords on a Secret that cannot be used"
        },
        "secretViewIntervalMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The number of minutes entering a comment is valid"
        },
        "serverTimeZoneId": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The timezone that the server shows by default and when job scheduling runs"
        },
        "uiInactivitySleepMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How long until the UI will go inactive and stop polling for updates"
        }
      },
      "type": "object"
    },
    "ConfigurationInternalSiteConnectorModel": {
      "description": "Internal Site Connector Settings",
      "properties": {
        "siteConnectorId": {
          "description": "Site connector that is used internally by Secret Server",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ConfigurationInternalSiteConnectorPatchArgs": {
      "description": "ConfigurationInternalSiteConnectorPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationInternalSiteConnectorPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationInternalSiteConnectorPatchModel": {
      "description": "Internal Site Connector Settings",
      "properties": {
        "siteConnectorId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "ID for which site connector to use internally"
        }
      },
      "type": "object"
    },
    "ConfigurationLauncherSettingsPatchArgs": {
      "description": "ConfigurationLauncherSettingsPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationLauncherSettingsPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationLauncherSettingsPatchModel": {
      "description": "Update launcher settings configuration",
      "properties": {
        "checkInSecretOnLastLauncherClose": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Forces Check In of Secret when user closes their only active launcher."
        },
        "closeLauncherOnCheckInSecret": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When Secret is Checked In, all active launchers associated with it will close."
        },
        "enableDomainDownload": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Allow the user to download existing and tested mappings from Thycotic.com."
        },
        "enableDomainUpload": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Allow the user to upload mappings"
        },
        "enableLauncher": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable Launcher"
        },
        "enableLauncherAutoUpdate": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable Launcher Auto Update"
        },
        "enableWebParsing": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Allow Secret Server to retrieve and parse the mapped website when using the web launcher."
        },
        "launcherDeploymentType": {
          "$ref": "#/definitions/UpdateFieldValueOfLauncherDeploymentType",
          "description": "Launcher Deployment Type"
        },
        "sendSecretUrlToLauncher": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Send the URL that is on the Secret to the web password launcher in addition to the bookmarklet"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfLauncherDeploymentType": {
      "description": "Launcher Deployment Type",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/LauncherDeploymentType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "LauncherDeploymentType": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "ClickOnce",
        "ProtocolHandler"
      ]
    },
    "ConfigurationLauncherSettingsViewModel": {
      "description": "ConfigurationLauncherSettingsViewModel",
      "properties": {
        "checkInSecretOnLastLauncherClose": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "CheckInSecretOnLastLauncherClose"
        },
        "closeLauncherOnCheckInSecret": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "CloseLauncherOnCheckInSecret"
        },
        "enableDomainDownload": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "EnableDomainDownload"
        },
        "enableDomainUpload": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "EnableDomainUpload"
        },
        "enableLauncher": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "EnableLauncher"
        },
        "enableLauncherAutoUpdate": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "EnableLauncherAutoUpdate"
        },
        "enableWebParsing": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "EnableWebParsing"
        },
        "launcherDeploymentType": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfOptionalLauncherDeploymentType",
          "description": "LauncherDeploymentType"
        },
        "sendSecretUrlToLauncher": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "SendSecretUrlToLauncher"
        }
      },
      "type": "object"
    },
    "ViewFieldDropDownValueOfOptionalLauncherDeploymentType": {
      "description": "LauncherDeploymentType",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "dropDownOptions": {
          "description": "DropDownOptions",
          "items": {
            "$ref": "#/definitions/ViewFieldDropDownOption"
          },
          "type": "array"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationLocalPasswordPatchArgs": {
      "description": "ConfigurationLocalPasswordPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationLocalPasswordPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationLocalPasswordPatchModel": {
      "description": "Update settings for local user password configuration",
      "properties": {
        "allowUsersToResetForgottenPasswords": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether or not the local password can be reset by the user"
        },
        "enableLocalUserPasswordExpiration": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Indicates whether or not local users must change their password when it is reset or expires."
        },
        "enableMinimumPasswordAge": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Local users cannot change their password until it meets this age"
        },
        "enablePasswordHistory": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Passwords cannot be reused when enabled and still in stored history"
        },
        "localUserPasswordExpirationDays": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How many days until the password expires."
        },
        "localUserPasswordExpirationHours": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How many hours until the password expires"
        },
        "localUserPasswordExpirationMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How many minutes until the password expires"
        },
        "minimumPasswordAgeDays": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How many days until password can be changed"
        },
        "minimumPasswordAgeHours": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How many hours until password can be changed"
        },
        "minimumPasswordAgeMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How many minutes until password can be changed"
        },
        "passwordHistoryItems": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How many passwords should be stored in history."
        },
        "passwordHistoryItemsAll": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Save all password history items.  When true PasswordHistoryItems is ignored."
        },
        "passwordMinimumLength": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "The minimum length required for local user passwords"
        },
        "passwordRequireLowercase": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether or not the local password must include a lowercase letter"
        },
        "passwordRequireNumbers": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether or not the local password must include a number"
        },
        "passwordRequireSymbols": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether or not the local password must include a symbol"
        },
        "passwordRequireUppercase": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether or not the local password must include an uppercase letter"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginModel": {
      "description": "Login Configuration",
      "properties": {
        "allowAutoComplete": {
          "description": "AutoComplete is a feature provided by most web browsers to automatically remember and prefill forms for you.  This can be a great security concern since they typically do not save the data in a secure manner.  You can enable or disable web browser prefill on the Login screen by using this option",
          "type": "boolean"
        },
        "allowRememberMe": {
          "description": "This option enables the \"Remember Me\" checkbox on the login screen.  When a user chooses to use \"Remember Me\", an encrypted cookie will be set in their browser.  This will enable the user to revisit Secret Server without the need to log in.  This cookie will no longer be valid when the \"Remember Me\" period has expired and they will have to log in again",
          "type": "boolean"
        },
        "cacheADCredentials": {
          "description": "Allows cached credentials to be used when Distributed Engine is unable to connect to Active Directory",
          "type": "boolean"
        },
        "defaultLoginDomain": {
          "description": "Default Login Domain",
          "type": "string"
        },
        "enableDomainSelector": {
          "description": "Display the domain selector at login",
          "type": "integer",
          "format": "int32"
        },
        "enableLoginFailureCAPTCHA": {
          "description": "When this option is checked, the user will only have to complete a CAPTCHA if their login credentials are entered incorrectly a certain number of times",
          "type": "boolean"
        },
        "maxConcurrentLoginsPerUser": {
          "description": "Maximum concurrent logins per user",
          "type": "integer",
          "format": "int32"
        },
        "maximumLoginFailures": {
          "description": "Set the number of login attempts allowed before a user is locked out of their account.  Once locked out, they will need a Secret Server administrator to reset their password and enable their account",
          "type": "integer",
          "format": "int32"
        },
        "maxLoginFailuresBeforeCAPTCHA": {
          "description": "Maximum Login Failures Before CAPTCHA",
          "type": "integer",
          "format": "int32"
        },
        "rememberMeTimeOutMinutes": {
          "description": "The number of minutes that you will be remembered",
          "type": "integer",
          "format": "int32"
        },
        "sshKeyIntegration": {
          "$ref": "#/definitions/ConfigurationLoginSshKeyIntegrationModel",
          "description": "Ssh Key Integration Configuration"
        },
        "twoFactor": {
          "$ref": "#/definitions/ConfigurationLoginTwoFactorModel",
          "description": "Two Factor Login Configuration"
        },
        "userLockoutTimeMinutes": {
          "description": "Number of minutes a User will be locked out for",
          "type": "integer",
          "format": "int32"
        },
        "visualEncryptedKeyboardEnabled": {
          "description": "Enable the Visual Keyboard for logins",
          "type": "boolean"
        },
        "visualEncryptedKeyboardRequired": {
          "description": "Require the Visual Keyboard for logins",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginSshKeyIntegrationModel": {
      "description": "Ssh Key Integration Configuration",
      "properties": {
        "authenticationMethod": {
          "description": "Require password only, public key only, password or public key, password and public key",
          "type": "integer",
          "format": "int32"
        },
        "enable": {
          "description": "When activated, SSH key pairs can be used for authentication in SSH Terminal",
          "type": "boolean"
        },
        "expirationInHours": {
          "description": "The number of days and hours the key will stay active",
          "type": "integer",
          "format": "int32"
        },
        "keyExpires": {
          "description": "When activated, SSH keys will expire after a specified amount of time",
          "type": "boolean"
        },
        "twoFactorBypass": {
          "description": "When activated, providing a valid SSH key (and password, if required by Unix Authentication Method) will bypass any required 2FA validation",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginTwoFactorModel": {
      "description": "Two Factor Login Configuration",
      "properties": {
        "allowTwoFactorRememberMe": {
          "description": "When this option is checked, the user will only have to provide their two factor authentication information once in that browser for set time. This is done by setting an encrypted cookie on the browser.  The cookie will no longer be valid when the Two Factor Remember Me Duration has expired",
          "type": "boolean"
        },
        "duo": {
          "$ref": "#/definitions/ConfigurationLoginTwoFactorDuoModel",
          "description": "Duo Two Factor Login Configuration"
        },
        "openIdConnect": {
          "$ref": "#/definitions/ConfigurationLoginTwoFactorOpenIdConnectModel",
          "description": "OpenID Connect Two Factor Login Configuration"
        },
        "radius": {
          "$ref": "#/definitions/ConfigurationLoginTwoFactorRadiusModel",
          "description": "RADIUS Two Factor Login Configuration"
        },
        "requireTwoFactorForWebLogin": {
          "description": "Require Two Factor For Web Login",
          "type": "boolean"
        },
        "requireTwoFactorForWebServices": {
          "description": "Require Two Factor For Web Services",
          "type": "boolean"
        },
        "twoFactorRememberMeTimeOutDays": {
          "description": "The number of days that you will not be reprompted for 2FA",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginTwoFactorDuoModel": {
      "description": "Duo Two Factor Login Configuration",
      "properties": {
        "apiHostname": {
          "description": "API Hostname",
          "type": "string"
        },
        "enable": {
          "description": "Enable Duo Integration",
          "type": "boolean"
        },
        "integrationKey": {
          "description": "Integration Key",
          "type": "string"
        },
        "secretKey": {
          "description": "Secret Key",
          "type": "string"
        },
        "useRadiusUsername": {
          "description": "Use RADIUS Username for DUO",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginTwoFactorOpenIdConnectModel": {
      "description": "OpenID Connect Two Factor Login Configuration",
      "properties": {
        "addNewUsersToThycoticOne": {
          "description": "When activated, new Secret Server users will be added automatically to Thycotic One",
          "type": "boolean"
        },
        "clientId": {
          "description": "Client Id",
          "type": "string"
        },
        "clientSecret": {
          "description": "Client Secret",
          "type": "string"
        },
        "enable": {
          "description": "Enable OpenID Connect Integration",
          "type": "boolean"
        },
        "logoutUrl": {
          "description": "The URL users must visit to log out of their OpenID Connect account. (Optional)",
          "type": "string"
        },
        "serverUrl": {
          "description": "OpenID Connect Server URL",
          "type": "string"
        },
        "useThycoticOneAuthAsDefault": {
          "description": "When activated, passwords will be checked against Thycotic One instead of Secret Server. This affects the REST API, DoubleLock, and export functionality",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginTwoFactorRadiusModel": {
      "description": "RADIUS Two Factor Login Configuration",
      "properties": {
        "attemptUserPassword": {
          "description": "If checked, Secret Server will automatically try to authenticate to RADIUS using the user's local password after it is entered during login.\r\nIf RADIUS authentication fails, the user will be prompted for the correct RADIUS password.Please note that this is not supported when Integrated Windows\r\nAuthentication is enabled",
          "type": "boolean"
        },
        "clientPortRange": {
          "description": "RADIUS Client Port Range",
          "type": "string"
        },
        "defaultUsername": {
          "description": "RADIUS Default Username",
          "type": "string"
        },
        "disableNasIpAddressAttribute": {
          "description": "Disable Radius NAS-IP-Address Attribute",
          "type": "boolean"
        },
        "enable": {
          "description": "Enabling RADIUS integration will allow another form of two factor authentication for users",
          "type": "boolean"
        },
        "enableFailoverServer": {
          "description": "Enabling a Failover RADIUS server will allow another server to fail over to",
          "type": "boolean"
        },
        "enableRadiusNasId": {
          "description": "Configure the NAS-Identifier that will be sent with the RADIUS Access-Request",
          "type": "boolean"
        },
        "failoverServerIP": {
          "description": "The IP address of your Failover RADIUS server",
          "type": "string"
        },
        "failoverServerPort": {
          "description": "Failover RADIUS Server Port",
          "type": "integer",
          "format": "int32"
        },
        "failoverSharedSecret": {
          "description": "Failover RADIUS Shared Secret",
          "type": "string"
        },
        "failoverTimeoutSeconds": {
          "description": "Failover Time Out (seconds)",
          "type": "integer",
          "format": "int32"
        },
        "loginExplanation": {
          "description": "RADIUS Login Explanation",
          "type": "string"
        },
        "nasId": {
          "description": "The NAS-Identifier attribute value that will be sent with the RADIUS Access-Request",
          "type": "string"
        },
        "serverIP": {
          "description": "The IP address of your RADIUS server",
          "type": "string"
        },
        "serverPort": {
          "description": "RADIUS Server Port",
          "type": "integer",
          "format": "int32"
        },
        "sharedSecret": {
          "description": "RADIUS Shared Secret for All Users",
          "type": "string"
        },
        "sharedSecretSameForAllUsers": {
          "description": "Use Same RADIUS Shared Secret for All Users",
          "type": "boolean"
        },
        "timeoutSeconds": {
          "description": "Time Out (seconds)",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginPatchArgs": {
      "description": "ConfigurationLoginPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationLoginPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginPatchModel": {
      "description": "Login Configuration",
      "properties": {
        "allowAutoComplete": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "AutoComplete is a feature provided by most web browsers to automatically remember and prefill forms for you.  This can be a great security concern since they typically do not save the data in a secure manner.  You can enable or disable web browser prefill on the Login screen by using this option"
        },
        "allowRememberMe": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "This option enables the \"Remember Me\" checkbox on the login screen.  When a user chooses to use \"Remember Me\", an encrypted cookie will be set in their browser.  This will enable the user to revisit Secret Server without the need to log in.  This cookie will no longer be valid when the \"Remember Me\" period has expired and they will have to log in again"
        },
        "cacheADCredentials": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Allows cached credentials to be used when Distributed Engine is unable to connect to Active Directory"
        },
        "defaultLoginDomain": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Default Login Domain"
        },
        "enableDomainSelector": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Display the domain selector at login"
        },
        "enableLoginFailureCAPTCHA": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When this option is checked, the user will only have to complete a CAPTCHA if their login credentials are entered incorrectly a certain number of times"
        },
        "maxConcurrentLoginsPerUser": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Maximum concurrent logins per user"
        },
        "maximumLoginFailures": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Set the number of login attempts allowed before a user is locked out of their account.  Once locked out, they will need a Secret Server administrator to reset their password and enable their account"
        },
        "maxLoginFailuresBeforeCAPTCHA": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Maximum Login Failures Before CAPTCHA"
        },
        "rememberMeTimeOutMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The number of minutes that you will be remembered"
        },
        "sshKeyIntegration": {
          "$ref": "#/definitions/ConfigurationLoginSshKeyIntegrationPatchModel",
          "description": "Ssh Key Integration Configuration"
        },
        "twoFactor": {
          "$ref": "#/definitions/ConfigurationLoginTwoFactorPatchModel",
          "description": "Two Factor Login Configuration"
        },
        "userLockoutTimeMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Number of minutes a User will be locked out for"
        },
        "visualEncryptedKeyboardEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable the Visual Keyboard for logins"
        },
        "visualEncryptedKeyboardRequired": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Require the Visual Keyboard for logins"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginSshKeyIntegrationPatchModel": {
      "description": "Ssh Key Integration Configuration",
      "properties": {
        "authenticationMethod": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Require password only, public key only, password or public key, password and public key"
        },
        "enable": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When activated, SSH key pairs can be used for authentication in SSH Terminal"
        },
        "expirationInHours": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The number of days and hours the key will stay active"
        },
        "keyExpires": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When activated, SSH keys will expire after a specified amount of time"
        },
        "twoFactorBypass": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When activated, providing a valid SSH key (and password, if required by Unix Authentication Method) will bypass any required 2FA validation"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginTwoFactorPatchModel": {
      "description": "Two Factor Login Configuration",
      "properties": {
        "allowTwoFactorRememberMe": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When this option is checked, the user will only have to provide their two factor authentication information once in that browser for set time. This is done by setting an encrypted cookie on the browser.  The cookie will no longer be valid when the Two Factor Remember Me Duration has expired"
        },
        "duo": {
          "$ref": "#/definitions/ConfigurationLoginTwoFactorDuoPatchModel",
          "description": "Duo Two Factor Login Configuration"
        },
        "openIdConnect": {
          "$ref": "#/definitions/ConfigurationLoginTwoFactorOpenIdConnectPatchModel",
          "description": "OpenID Connect Two Factor Login Configuration"
        },
        "radius": {
          "$ref": "#/definitions/ConfigurationLoginTwoFactorRadiusPatchModel",
          "description": "RADIUS Two Factor Login Configuration"
        },
        "requireTwoFactorForWebLogin": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Require Two Factor For Web Login"
        },
        "requireTwoFactorForWebServices": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Require Two Factor For Web Services"
        },
        "twoFactorRememberMeTimeOutDays": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The number of days that you will not be reprompted for 2FA"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginTwoFactorDuoPatchModel": {
      "description": "Duo Two Factor Login Configuration",
      "properties": {
        "apiHostname": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "API Hostname"
        },
        "enable": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable Duo Integration"
        },
        "integrationKey": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Integration Key"
        },
        "secretKey": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Secret Key"
        },
        "useRadiusUsername": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Use RADIUS Username for DUO"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginTwoFactorOpenIdConnectPatchModel": {
      "description": "OpenID Connect Two Factor Login Configuration",
      "properties": {
        "addNewUsersToThycoticOne": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When activated, new Secret Server users will be added automatically to Thycotic One"
        },
        "clientId": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Client Id"
        },
        "clientSecret": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Client Secret"
        },
        "enable": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable OpenID Connect Integration"
        },
        "logoutUrl": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The URL users must visit to log out of their OpenID Connect account. (Optional)"
        },
        "serverUrl": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "OpenID Connect Server URL"
        },
        "useThycoticOneAuthAsDefault": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When activated, passwords will be checked against Thycotic One instead of Secret Server. This affects the REST API, DoubleLock, and export functionality"
        }
      },
      "type": "object"
    },
    "ConfigurationLoginTwoFactorRadiusPatchModel": {
      "description": "RADIUS Two Factor Login Configuration",
      "properties": {
        "attemptUserPassword": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If checked, Secret Server will automatically try to authenticate to RADIUS using the user's local password after it is entered during login.\r\nIf RADIUS authentication fails, the user will be prompted for the correct RADIUS password.Please note that this is not supported when Integrated Windows\r\nAuthentication is enabled"
        },
        "clientPortRange": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "RADIUS Client Port Range"
        },
        "defaultUsername": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "RADIUS Default Username"
        },
        "disableNasIpAddressAttribute": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Disable Radius NAS-IP-Address Attribute"
        },
        "enable": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enabling RADIUS integration will allow another form of two factor authentication for users"
        },
        "enableFailoverServer": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enabling a Failover RADIUS server will allow another server to fail over to"
        },
        "enableRadiusNasId": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Configure the NAS-Identifier that will be sent with the RADIUS Access-Request"
        },
        "failoverServerIP": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The IP address of your Failover RADIUS server"
        },
        "failoverServerPort": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Failover RADIUS Server Port"
        },
        "failoverSharedSecret": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Failover RADIUS Shared Secret"
        },
        "failoverTimeoutSeconds": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Failover Time Out (seconds)"
        },
        "loginExplanation": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "RADIUS Login Explanation"
        },
        "nasId": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The NAS-Identifier attribute value that will be sent with the RADIUS Access-Request"
        },
        "serverIP": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The IP address of your RADIUS server"
        },
        "serverPort": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "RADIUS Server Port"
        },
        "sharedSecret": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Shared Secret for All Users"
        },
        "sharedSecretSameForAllUsers": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Use Same RADIUS Shared Secret for All Users"
        },
        "timeoutSeconds": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Time Out (seconds)"
        }
      },
      "type": "object"
    },
    "ConfigurationPermissionOptionsPatchArgs": {
      "description": "ConfigurationPermissionOptionsPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationPermissionOptionsPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationPermissionOptionsPatchModel": {
      "description": "Update permission options configuration",
      "properties": {
        "allowDuplicateSecretNames": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether or not Secrets can have the same name in the same folder"
        },
        "allowViewUserToRetrieveAutoChangeNextPassword": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "All users with view only share on a Secret to see the next password"
        },
        "defaultSecretPermissions": {
          "$ref": "#/definitions/UpdateFieldValueOfDefaultSecretPermissionsType",
          "description": "When a new Secret is created these permissions will be assigned"
        },
        "enableApprovalFromEmail": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Allow users to approve by clicking on a link in email"
        },
        "forceSecretApproval": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalForceSecretApprovalType",
          "description": "Force approval type on Secrets that have approval"
        }
      },
      "type": "object"
    },
    "ConfigurationPermissionOptionsViewModel": {
      "description": "ConfigurationPermissionOptionsViewModel",
      "properties": {
        "allowDuplicateSecretNames": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "AllowDuplicateSecretNames"
        },
        "allowViewUserToRetrieveAutoChangeNextPassword": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "AllowViewUserToRetrieveAutoChangeNextPassword"
        },
        "defaultSecretPermissions": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfDefaultSecretPermissionsType",
          "description": "DefaultSecretPermissions"
        },
        "enableApprovalFromEmail": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "EnableApprovalFromEmail"
        },
        "forceSecretApproval": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfOptionalForceSecretApprovalType",
          "description": "ForceSecretApproval"
        }
      },
      "type": "object"
    },
    "ViewFieldDropDownValueOfDefaultSecretPermissionsType": {
      "description": "DefaultSecretPermissions",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "dropDownOptions": {
          "description": "DropDownOptions",
          "items": {
            "$ref": "#/definitions/ViewFieldDropDownOption"
          },
          "type": "array"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/DefaultSecretPermissionsType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldDropDownValueOfOptionalForceSecretApprovalType": {
      "description": "ForceSecretApproval",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "dropDownOptions": {
          "description": "DropDownOptions",
          "items": {
            "$ref": "#/definitions/ViewFieldDropDownOption"
          },
          "type": "array"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationProtocolHandlerSettingsPatchArgs": {
      "description": "ConfigurationProtocolHandlerSettingsPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationProtocolHandlerSettingsPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationProtocolHandlerSettingsPatchModel": {
      "description": "Update protocol handler settings configuration",
      "properties": {
        "protocolHandlerInstallTimeAllowedDomains": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Allowed Domains/IP Addresses (comma-separated)"
        },
        "protocolHandlerInstallTimeDisableAutoUpdate": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Disable Auto Update"
        },
        "protocolHandlerInstallTimeSettingsEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable Protocol Handler Install Time Settings"
        }
      },
      "type": "object"
    },
    "ConfigurationProtocolHandlerSettingsViewModel": {
      "description": "ConfigurationProtocolHandlerSettingsViewModel",
      "properties": {
        "protocolHandlerInstallTimeAllowedDomains": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Allowed Domains/IP Addresses (comma-separated)"
        },
        "protocolHandlerInstallTimeDisableAutoUpdate": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Disable Auto Update"
        },
        "protocolHandlerInstallTimeSettingsEnabled": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Enable Protocol Handler Install Time Settings"
        }
      },
      "type": "object"
    },
    "PublicSshKeyConfigurationViewModel": {
      "description": "User public ssh keys expiration",
      "properties": {
        "enabled": {
          "description": "User Public SSH Key Authentication is enabled",
          "type": "boolean"
        },
        "expirationMessage": {
          "description": "Expiration Message",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationRpcModel": {
      "description": "RPC Configuration",
      "properties": {
        "checkOutIntervalDays": {
          "description": "Check Out Interval Days",
          "type": "integer",
          "format": "int32"
        },
        "checkOutIntervalHours": {
          "description": "Check Out Interval Hours",
          "type": "integer",
          "format": "int32"
        },
        "checkOutIntervalMinutes": {
          "description": "Check Out Interval Minutes",
          "type": "integer",
          "format": "int32"
        },
        "daysToKeepLogs": {
          "description": "How many days to keep the operational logs",
          "type": "integer",
          "format": "int32"
        },
        "enableHeartbeat": {
          "description": "Whether or not heartbeat is enabled",
          "type": "boolean"
        },
        "enablePasswordChangeOnCheckIn": {
          "description": "Whether or not to allow changing the password when a Secret is checked in",
          "type": "boolean"
        },
        "enableRpc": {
          "description": "Whether or not RPC is enabled",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationRpcPatchArgs": {
      "description": "ConfigurationRpcPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationRpcPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationRpcPatchModel": {
      "description": "Data",
      "properties": {
        "checkOutIntervalDays": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "CheckOutIntervalDays"
        },
        "checkOutIntervalHours": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "CheckOutIntervalHours"
        },
        "checkOutIntervalMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "CheckOutIntervalMinutes"
        },
        "daysToKeepLogs": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "DaysToKeepLogs"
        },
        "enableHeartbeat": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "EnableHeartbeat"
        },
        "enablePasswordChangeOnCheckIn": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "EnablePasswordChangeOnCheckIn"
        },
        "enableRpc": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "EnableRpc"
        }
      },
      "type": "object"
    },
    "ConfigurationSamlModel": {
      "description": "SAML configuration",
      "properties": {
        "enabled": {
          "description": "Enable SAML authentication",
          "type": "boolean"
        },
        "enableLegacySLO": {
          "description": "Enable legacy SingleLogout",
          "type": "boolean"
        },
        "identityProviders": {
          "description": "List of Identity Providers",
          "items": {
            "$ref": "#/definitions/ConfigurationSamlIdentityProviderModel"
          },
          "type": "array"
        },
        "legacyUsernameAttribute": {
          "description": "Optional AttributeName to use for matching a Secret Server user.",
          "type": "string"
        },
        "serviceProviderCertificate": {
          "description": "The Service Provider Certificate. Base64 encoded",
          "type": "string"
        },
        "serviceProviderCertificatePassword": {
          "description": "The password for the Service Provider Certificate",
          "type": "string"
        },
        "serviceProviderName": {
          "description": "The name of the Service Provider",
          "type": "string"
        },
        "useLegacy": {
          "description": "Use Legacy SAML",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationSamlIdentityProviderModel": {
      "description": "SAML Identity Provider configuration",
      "properties": {
        "active": {
          "description": "Active status of the Identity Provider. Users can only log-in via an active Identity Provider.",
          "type": "boolean"
        },
        "authnContext": {
          "description": "When specified, instructs the IDP on how to authenticate the user(optional).",
          "type": "string"
        },
        "clockSkew": {
          "description": "The allowed number of minutes of difference between Secret Server's clock and the IDP's clock.  The default is 3 minutes.",
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "description": "Description of the Identity Provider.",
          "type": "string"
        },
        "disableAssertionReplayCheck": {
          "description": "When true, SAML messages that were already received from this IDP will be allowed by Secret Server.  Otherwise, resending messages from the IDP will trigger an error.",
          "type": "boolean"
        },
        "disableAudienceRestrictionCheck": {
          "description": "A SAML assertion may include an audience restriction URI. This identifies the intended recipient of the SAML assertion. If included it should match the service provider's name.  When this setting is true, this check is skipped.",
          "type": "boolean"
        },
        "disableAuthnContextCheck": {
          "description": "Disables the authentication context check, which validates that the real authentication method matches the ExpectedAuthnContext method.",
          "type": "boolean"
        },
        "disableDestinationCheck": {
          "description": "When true, the destination URI in the SAML response will not be validated.",
          "type": "boolean"
        },
        "disableInboundLogout": {
          "description": "When true, logout requests coming from this IDP are ignored.",
          "type": "boolean"
        },
        "disableInResponseToCheck": {
          "description": "When true, the InResponseTo attribute in SAML messages is not checked.",
          "type": "boolean"
        },
        "disablePendingLogoutCheck": {
          "description": "When true, a SAML logout response will be considered legitimate even if there was no corresponding logout request.",
          "type": "boolean"
        },
        "disableRecipientCheck": {
          "description": "When true, the built-in check against the AssertionConsumerService URL will be skipped.",
          "type": "boolean"
        },
        "disableTimePeriodCheck": {
          "description": "When true, a SAML response is valid regardless of when it was sent.",
          "type": "boolean"
        },
        "displayName": {
          "description": "The Display Name for the Identity Provider.",
          "type": "string"
        },
        "domainAttribute": {
          "description": "Optional AttributeName to use for matching a Secret Server user's domain.",
          "type": "string"
        },
        "enableDetailedLog": {
          "description": "When true, a more detailed log will be generated for SAML logins and logouts.",
          "type": "boolean"
        },
        "enableSLO": {
          "description": "When true, logging out of Secret Server will log the user out of this Identity Provider.",
          "type": "boolean"
        },
        "forceAuthentication": {
          "description": "When true, the Identity Provider will be instructed to re-authenticate the user, even if they are already authenticated.",
          "type": "boolean"
        },
        "identityProviderId": {
          "description": "SAML Identity Provider Id",
          "type": "integer",
          "format": "int32"
        },
        "logoutRequestLifeTime": {
          "description": "The logout request life time.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the Identity Provider.",
          "type": "string"
        },
        "overridePendingAuthnRequest": {
          "description": "When true, an in-progress SP-initiated login may be interrupted by an IDP-initiated login.",
          "type": "boolean"
        },
        "publicCertificate": {
          "description": "The public certificate for the Identity Provider. Base64 encoded",
          "type": "string"
        },
        "signAuthnRequest": {
          "description": "When true, the authentication requests sent to this IDP will be signed.",
          "type": "boolean"
        },
        "signLogoutRequest": {
          "description": "When true, logout requests sent to this IDP will be signed.<",
          "type": "boolean"
        },
        "signLogoutResponse": {
          "description": "When true, logout responses sent to this IDP will be signed.",
          "type": "boolean"
        },
        "singleLogoutServiceResponseUrl": {
          "description": "The URL where Secret Server will send responses to single logout messages.",
          "type": "string"
        },
        "singleLogoutServiceUrl": {
          "description": "The URL to send the single logout message to.",
          "type": "string"
        },
        "ssoServiceBinding": {
          "description": "Method for communicating with the Identity Provider.  HTTPRedirect is recommended in most cases.",
          "type": "integer",
          "format": "int32"
        },
        "ssoServiceUrl": {
          "description": "The URL of the Identity Provider where the user will be sent to authenticate.",
          "type": "string"
        },
        "usernameAttribute": {
          "description": "Optional AttributeName to use for matching a Secret Server user.",
          "type": "string"
        },
        "wantAssertionEncrypted": {
          "description": "When true, Secret Server will expect SAML assertions from this IDP to be encrypted. Unencrypted assertions or assertions that cannot be decrypted will cause an error.",
          "type": "boolean"
        },
        "wantAssertionOrResponseSigned": {
          "description": "When true, Secret Server will expect either SAML assertions or SAML responses from this IDP to be signed. Unsigned assertions/responses and assertions/responses whose signatures cannot be verified will cause an error.",
          "type": "boolean"
        },
        "wantAssertionSigned": {
          "description": "When true, Secret Server will expect SAML assertions from this IDP to be signed. Unsigned assertions or assertions whose signatures cannot be verified will cause an error.",
          "type": "boolean"
        },
        "wantLogoutRequestSigned": {
          "description": "When true, Secret Server will expect logout requests from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.",
          "type": "boolean"
        },
        "wantLogoutResponseSigned": {
          "description": "When true, Secret Server will expect logout responses from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.",
          "type": "boolean"
        },
        "wantSAMLResponseSigned": {
          "description": "When true, Secret Server will expect SAML responses from this IDP to be signed. Unsigned responses or responses whose signatures cannot be verified will cause an error.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationSamlPatchArgs": {
      "description": "ConfigurationSamlPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationSamlPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationSamlPatchModel": {
      "description": "SAML configuration",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable SAML authentication"
        },
        "enableLegacySLO": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable legacy SingleLogout"
        },
        "identityProviders": {
          "description": "List of Identity Providers",
          "items": {
            "$ref": "#/definitions/ConfigurationSamlIdentityProviderPatchModel"
          },
          "type": "array"
        },
        "legacyUsernameAttribute": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Optional AttributeName to use for matching a Secret Server user."
        },
        "serviceProviderCertificate": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The Service Provider Certificate. Base64 encoded"
        },
        "serviceProviderCertificatePassword": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The password for the Service Provider Certificate"
        },
        "serviceProviderName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The name of the Service Provider"
        },
        "useLegacy": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Use Legacy SAML"
        }
      },
      "type": "object"
    },
    "ConfigurationSamlIdentityProviderPatchModel": {
      "description": "SAML Identity Provider configuration",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Active status of the Identity Provider. Users can only log-in via an active Identity Provider."
        },
        "authnContext": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "When specified, instructs the IDP on how to authenticate the user(optional)."
        },
        "clockSkew": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The allowed number of minutes of difference between Secret Server's clock and the IDP's clock.  The default is 3 minutes."
        },
        "description": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Description of the Identity Provider."
        },
        "disableAssertionReplayCheck": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, SAML messages that were already received from this IDP will be allowed by Secret Server.  Otherwise, resending messages from the IDP will trigger an error."
        },
        "disableAudienceRestrictionCheck": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "A SAML assertion may include an audience restriction URI. This identifies the intended recipient of the SAML assertion. If included it should match the service provider's name.  When this setting is true, this check is skipped."
        },
        "disableAuthnContextCheck": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Disables the authentication context check, which validates that the real authentication method matches the ExpectedAuthnContext method."
        },
        "disableDestinationCheck": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, the destination URI in the SAML response will not be validated."
        },
        "disableInboundLogout": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, logout requests coming from this IDP are ignored."
        },
        "disableInResponseToCheck": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, the InResponseTo attribute in SAML messages is not checked."
        },
        "disablePendingLogoutCheck": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, a SAML logout response will be considered legitimate even if there was no corresponding logout request."
        },
        "disableRecipientCheck": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, the built-in check against the AssertionConsumerService URL will be skipped."
        },
        "disableTimePeriodCheck": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, a SAML response is valid regardless of when it was sent."
        },
        "displayName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The Display Name for the Identity Provider."
        },
        "domainAttribute": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Optional AttributeName to use for matching a Secret Server user's domain."
        },
        "enableDetailedLog": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, a more detailed log will be generated for SAML logins and logouts."
        },
        "enableSLO": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, logging out of Secret Server will log the user out of this Identity Provider."
        },
        "forceAuthentication": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, the Identity Provider will be instructed to re-authenticate the user, even if they are already authenticated."
        },
        "identityProviderId": {
          "description": "SAML Identity Provider Id",
          "type": "integer",
          "format": "int32"
        },
        "logoutRequestLifeTime": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The logout request life time."
        },
        "name": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Name of the Identity Provider."
        },
        "overridePendingAuthnRequest": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, an in-progress SP-initiated login may be interrupted by an IDP-initiated login."
        },
        "publicCertificate": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The public certificate for the Identity Provider. Base64 encoded"
        },
        "signAuthnRequest": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, the authentication requests sent to this IDP will be signed."
        },
        "signLogoutRequest": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, logout requests sent to this IDP will be signed.<"
        },
        "signLogoutResponse": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, logout responses sent to this IDP will be signed."
        },
        "singleLogoutServiceResponseUrl": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The URL where Secret Server will send responses to single logout messages."
        },
        "singleLogoutServiceUrl": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The URL to send the single logout message to."
        },
        "ssoServiceBinding": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Method for communicating with the Identity Provider.  HTTPRedirect is recommended in most cases."
        },
        "ssoServiceUrl": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The URL of the Identity Provider where the user will be sent to authenticate."
        },
        "usernameAttribute": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Optional AttributeName to use for matching a Secret Server user."
        },
        "wantAssertionEncrypted": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, Secret Server will expect SAML assertions from this IDP to be encrypted. Unencrypted assertions or assertions that cannot be decrypted will cause an error."
        },
        "wantAssertionOrResponseSigned": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, Secret Server will expect either SAML assertions or SAML responses from this IDP to be signed. Unsigned assertions/responses and assertions/responses whose signatures cannot be verified will cause an error."
        },
        "wantAssertionSigned": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, Secret Server will expect SAML assertions from this IDP to be signed. Unsigned assertions or assertions whose signatures cannot be verified will cause an error."
        },
        "wantLogoutRequestSigned": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, Secret Server will expect logout requests from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error."
        },
        "wantLogoutResponseSigned": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, Secret Server will expect logout responses from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error."
        },
        "wantSAMLResponseSigned": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When true, Secret Server will expect SAML responses from this IDP to be signed. Unsigned responses or responses whose signatures cannot be verified will cause an error."
        }
      },
      "type": "object"
    },
    "ConfigurationSamlIdentityProviderCreateArgs": {
      "description": "ConfigurationSamlIdentityProviderCreateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationSamlIdentityProviderCreateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationSamlIdentityProviderCreateModel": {
      "description": "Data",
      "properties": {
        "active": {
          "description": "Active status of the Identity Provider. Users can only log-in via an active Identity Provider.",
          "type": "boolean"
        },
        "authnContext": {
          "description": "When specified, instructs the IDP on how to authenticate the user(optional).",
          "type": "string"
        },
        "clockSkew": {
          "description": "The allowed number of minutes of difference between Secret Server's clock and the IDP's clock.  The default is 3 minutes.",
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "description": "Description of the Identity Provider.",
          "type": "string"
        },
        "disableAssertionReplayCheck": {
          "description": "When true, SAML messages that were already received from this IDP will be allowed by Secret Server.  Otherwise, resending messages from the IDP will trigger an error.",
          "type": "boolean"
        },
        "disableAudienceRestrictionCheck": {
          "description": "A SAML assertion may include an audience restriction URI. This identifies the intended recipient of the SAML assertion. If included it should match the service provider's name.  When this setting is true, this check is skipped.",
          "type": "boolean"
        },
        "disableAuthnContextCheck": {
          "description": "Disables the authentication context check, which validates that the real authentication method matches the ExpectedAuthnContext method.",
          "type": "boolean"
        },
        "disableDestinationCheck": {
          "description": "When true, the destination URI in the SAML response will not be validated.",
          "type": "boolean"
        },
        "disableInboundLogout": {
          "description": "When true, logout requests coming from this IDP are ignored.",
          "type": "boolean"
        },
        "disableInResponseToCheck": {
          "description": "When true, the InResponseTo attribute in SAML messages is not checked.",
          "type": "boolean"
        },
        "disablePendingLogoutCheck": {
          "description": "When true, a SAML logout response will be considered legitimate even if there was no corresponding logout request.",
          "type": "boolean"
        },
        "disableRecipientCheck": {
          "description": "When true, the built-in check against the AssertionConsumerService URL will be skipped.",
          "type": "boolean"
        },
        "disableTimePeriodCheck": {
          "description": "When true, a SAML response is valid regardless of when it was sent.",
          "type": "boolean"
        },
        "displayName": {
          "description": "The Display Name for the Identity Provider.",
          "type": "string"
        },
        "domainAttribute": {
          "description": "Optional AttributeName to use for matching a Secret Server user's domain.",
          "type": "string"
        },
        "enableDetailedLog": {
          "description": "When true, a more detailed log will be generated for SAML logins and logouts.",
          "type": "boolean"
        },
        "enableSLO": {
          "description": "When true, logging out of Secret Server will log the user out of this Identity Provider.",
          "type": "boolean"
        },
        "forceAuthentication": {
          "description": "When true, the Identity Provider will be instructed to re-authenticate the user, even if they are already authenticated.",
          "type": "boolean"
        },
        "logoutRequestLifeTime": {
          "description": "The logout request life time.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the Identity Provider.",
          "type": "string"
        },
        "overridePendingAuthnRequest": {
          "description": "When true, an in-progress SP-initiated login may be interrupted by an IDP-initiated login.",
          "type": "boolean"
        },
        "publicCertificate": {
          "description": "The public certificate for the Identity Provider. Base64 encoded",
          "type": "string"
        },
        "signAuthnRequest": {
          "description": "When true, the authentication requests sent to this IDP will be signed.",
          "type": "boolean"
        },
        "signLogoutRequest": {
          "description": "When true, logout requests sent to this IDP will be signed.<",
          "type": "boolean"
        },
        "signLogoutResponse": {
          "description": "When true, logout responses sent to this IDP will be signed.",
          "type": "boolean"
        },
        "singleLogoutServiceResponseUrl": {
          "description": "The URL where Secret Server will send responses to single logout messages.",
          "type": "string"
        },
        "singleLogoutServiceUrl": {
          "description": "The URL to send the single logout message to.",
          "type": "string"
        },
        "ssoServiceBinding": {
          "description": "Method for communicating with the Identity Provider.  HTTPRedirect is recommended in most cases.",
          "type": "integer",
          "format": "int32"
        },
        "ssoServiceUrl": {
          "description": "The URL of the Identity Provider where the user will be sent to authenticate.",
          "type": "string"
        },
        "usernameAttribute": {
          "description": "Optional AttributeName to use for matching a Secret Server user.",
          "type": "string"
        },
        "wantAssertionEncrypted": {
          "description": "When true, Secret Server will expect SAML assertions from this IDP to be encrypted. Unencrypted assertions or assertions that cannot be decrypted will cause an error.",
          "type": "boolean"
        },
        "wantAssertionOrResponseSigned": {
          "description": "When true, Secret Server will expect either SAML assertions or SAML responses from this IDP to be signed. Unsigned assertions/responses and assertions/responses whose signatures cannot be verified will cause an error.",
          "type": "boolean"
        },
        "wantAssertionSigned": {
          "description": "When true, Secret Server will expect SAML assertions from this IDP to be signed. Unsigned assertions or assertions whose signatures cannot be verified will cause an error.",
          "type": "boolean"
        },
        "wantLogoutRequestSigned": {
          "description": "When true, Secret Server will expect logout requests from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.",
          "type": "boolean"
        },
        "wantLogoutResponseSigned": {
          "description": "When true, Secret Server will expect logout responses from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.",
          "type": "boolean"
        },
        "wantSAMLResponseSigned": {
          "description": "When true, Secret Server will expect SAML responses from this IDP to be signed. Unsigned responses or responses whose signatures cannot be verified will cause an error.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationSamlIdentityProviderPatchArgs": {
      "description": "ConfigurationSamlIdentityProviderPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationSamlIdentityProviderPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SearchIndexerModel": {
      "description": "Configuration for Secret search indexer",
      "properties": {
        "daysToKeepLogs": {
          "description": "How many days to keep the logs for the search indexer",
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "description": "Whether or not the search indexer is enabled",
          "type": "boolean"
        },
        "indexingSeparators": {
          "description": "Characters that split keys to be indexed",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "indexMode": {
          "$ref": "#/definitions/SearchIndexMode",
          "description": "The index mode: standard or extended"
        },
        "indexPercentComplete": {
          "description": "The percent of the index that is built",
          "type": "number",
          "format": "float"
        },
        "lastIndexDate": {
          "description": "The time of the last indexing",
          "type": "string",
          "format": "date-time"
        },
        "logAvailable": {
          "description": "Whether or not a log is available for the Secret Search Indexer",
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/SearchIndexStatus",
          "description": "The current status of the search secret indexer"
        }
      },
      "type": "object"
    },
    "SearchIndexMode": {
      "description": "The index mode: standard or extended",
      "properties": {},
      "type": "string",
      "enum": [
        "Standard",
        "Extended"
      ]
    },
    "SearchIndexStatus": {
      "description": "The current status of the search secret indexer",
      "properties": {},
      "type": "string",
      "enum": [
        "NotStarted",
        "Idle",
        "Indexing"
      ]
    },
    "SearchIndexerUpdateArgs": {
      "description": "SearchIndexerUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SearchIndexerUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SearchIndexerUpdateModel": {
      "description": "Data",
      "properties": {
        "daysToKeepLogs": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How many days to keep the logs for the search indexer"
        },
        "enabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether or not the search indexer is enabled"
        },
        "indexingSeparators": {
          "$ref": "#/definitions/UpdateFieldValueOfString[]",
          "description": "Characters that split keys to be indexed"
        },
        "indexMode": {
          "$ref": "#/definitions/UpdateFieldValueOfSearchIndexMode",
          "description": "The index mode: standard or extended"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfString[]": {
      "description": "Characters that split keys to be indexed",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfSearchIndexMode": {
      "description": "The index mode: standard or extended",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/SearchIndexMode",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ConfigurationSecurityModel": {
      "description": "Security Configuration",
      "properties": {
        "allowWebServiceHttpGet": {
          "description": "Allows the Http Get verb for Web Services.  This allows REST-style calls to many Web Service methods, but reduces security",
          "type": "boolean"
        },
        "auditTlsErrors": {
          "description": "When enabled, this setting will add audits for TLS certificate validation. Auditing will apply to all Active Directory domains using LDAPS and Syslog using TLS. Certificate policy options including ignoring certificate revocation failures applies to Syslog using TLS only. The default is the most strict so the certificate chain policy may need to be updated. TLS errors will be logged to Security Audit Log found on the Administration page",
          "type": "boolean"
        },
        "auditTlsErrorsDebug": {
          "description": "Enable TLS Debugging and Connection Tracking",
          "type": "boolean"
        },
        "certificateChainPolicyOptions": {
          "description": "Certificate chain policy options",
          "type": "string"
        },
        "clientCertificateIds": {
          "description": "Client Certificate Thumbprint(s)",
          "type": "string"
        },
        "databaseIntegrityMonitoringSymmetricKey": {
          "description": "The secure symmetric key to use when sending data to the separate Database Integrity Monitoring service. This can be retrieved from the configuration utility in the Database Integrity Monitoring service install location",
          "type": "string"
        },
        "enableDatabaseIntegrityMonitoring": {
          "description": "When enabled, Secret Server will communicate with the separately installed Database Integrity Monitoring service.  This service will send email alerts if it detects possible database tampering.  Access to Secret Server's database and web servers should be restricted to highly trusted individuals only",
          "type": "boolean"
        },
        "enableFileRestrictions": {
          "description": "Enable restrictions on the types or sizes of files that can be uploaded into Secret Server",
          "type": "boolean"
        },
        "enableFrameBlocking": {
          "description": "Enable Frame Blocking",
          "type": "boolean"
        },
        "enableHSTS": {
          "description": "Enable HTTP Strict Transport Security",
          "type": "boolean"
        },
        "fileExtensionRestrictions": {
          "description": "File Extension Restrictions",
          "type": "string"
        },
        "fipsEnabled": {
          "description": "Allow only FIPS compliant encryption schemes to be used",
          "type": "boolean"
        },
        "forceHttps": {
          "description": "By requiring HTTPS, users will not be able to access Secret Server using HTTP",
          "type": "boolean"
        },
        "hideVersionNumber": {
          "description": "This will disable the VersionGet SOAP call. It will also hide the Secret Server Version Numbers from the Headers and Footer",
          "type": "boolean"
        },
        "hstsMaxAge": {
          "description": "Maximum Age (in seconds)",
          "type": "integer",
          "format": "int32"
        },
        "maximumFileSizeBytes": {
          "description": "Maximum File Size (bytes)",
          "type": "string"
        },
        "maximumFileSizeSupported": {
          "description": "Maximum File Size supported by ASP.NET",
          "type": "boolean"
        },
        "webPasswordFillerRequiresFullDomainMatch": {
          "description": "When enabled, the Web Password Filler will only allow exact domain matches.  When disabled, subdomains such as https://sub.google.com will match http://google.com Secrets.  The recommended setting is enabled.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigurationSecurityPatchArgs": {
      "description": "ConfigurationSecurityPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationSecurityPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationSecurityPatchModel": {
      "description": "Update security configuration",
      "properties": {
        "allowWebServiceHttpGet": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Allows the Http Get verb for Web Services.  This allows REST-style calls to many Web Service methods, but reduces security"
        },
        "auditTlsErrors": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When enabled, this setting will add audits for TLS certificate validation. Auditing will apply to all Active Directory domains using LDAPS and Syslog using TLS. Certificate policy options including ignoring certificate revocation failures applies to Syslog using TLS only. The default is the most strict so the certificate chain policy may need to be updated. TLS errors will be logged to Security Audit Log found on the Administration page"
        },
        "auditTlsErrorsDebug": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable TLS Debugging and Connection Tracking"
        },
        "certificateChainPolicyOptions": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Ignore failures for certificate revocations"
        },
        "clientCertificateIds": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Client Certificate Thumbprint(s)"
        },
        "databaseIntegrityMonitoringSymmetricKey": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The secure symmetric key to use when sending data to the separate Database Integrity Monitoring service. This can be retrieved from the configuration utility in the Database Integrity Monitoring service install location"
        },
        "enableDatabaseIntegrityMonitoring": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When enabled, Secret Server will communicate with the separately installed Database Integrity Monitoring service.  This service will send email alerts if it detects possible database tampering.  Access to Secret Server's database and web servers should be restricted to highly trusted individuals only"
        },
        "enableFileRestrictions": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable restrictions on the types or sizes of files that can be uploaded into Secret Server"
        },
        "enableFrameBlocking": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable Frame Blocking"
        },
        "enableHSTS": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable HTTP Strict Transport Security"
        },
        "fileExtensionRestrictions": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "File Extension Restrictions"
        },
        "fipsEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Allow only FIPS compliant encryption schemes to be used"
        },
        "forceHttps": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "By requiring HTTPS, users will not be able to access Secret Server using HTTP"
        },
        "hideVersionNumber": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "This will disable the VersionGet SOAP call. It will also hide the Secret Server Version Numbers from the Headers and Footer"
        },
        "hstsMaxAge": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Maximum Age (in seconds)"
        },
        "maximumFileSizeBytes": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Maximum File Size (Bytes)"
        },
        "maximumFileSizeSupported": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Maximum File Size supported by ASP.NET"
        },
        "webPasswordFillerRequiresFullDomainMatch": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When enabled, the Web Password Filler will only allow exact domain matches.  When disabled, subdomains such as https://sub.google.com will match http://google.com Secrets.  The recommended setting is enabled."
        }
      },
      "type": "object"
    },
    "ConfigurationSessionRecordingPatchArgs": {
      "description": "ConfigurationSessionRecordingPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationSessionRecordingPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationSessionRecordingPatchModel": {
      "description": "Update session recording configuration",
      "properties": {
        "archiveLocationBySite": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If archive location changes based on site"
        },
        "archivePath": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The archive location of the recordings stored on disk"
        },
        "daysUntilArchive": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The number of days until a recording is archived"
        },
        "daysUntilDelete": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The number of days before a session recording is deleted"
        },
        "enableArchive": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If recordings should be archived"
        },
        "enableDelete": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If session recordings will be automatically deleted"
        },
        "enableHardwareAcceleration": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If hardware acceleration should be enabled"
        },
        "enableInactivityTimeout": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If sessions should end if inactive"
        },
        "enableOnDemandVideoProcessing": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If on demand video processing should be available"
        },
        "enableSessionRecording": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether or not Session Recording is enabled"
        },
        "encryptArchive": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If archived session recordings should be encrypted"
        },
        "hideRecordingIndicator": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If the recording indicator should be shown"
        },
        "inactivityTimeoutMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The length of inactivity before the session is ended"
        },
        "maxSessionLength": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The longest a session is allowed to be in hours"
        },
        "rdpProxyRecordKeyStrokes": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If proxied RDP sessions should have keystrokes recorded"
        },
        "rdpProxyRecordVideo": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If proxied RDP sessions should have video recorded"
        },
        "sshProxyRecordKeyStrokes": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If proxied SSH sessions should have keystrokes recorded"
        },
        "sshProxyRecordVideo": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If proxied SSH sessions should have video recorded"
        },
        "storeInDatabase": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If session recordings should be stored in the database"
        },
        "useTemporaryArchives": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If the archive location should store temporary session recording data instead of the database"
        },
        "videoCodecId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Which video codec to use for session recordings on OSX"
        }
      },
      "type": "object"
    },
    "SiteConnectorsSummaryModel": {
      "description": "SiteConnectorsSummaryModel[]",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "siteConnectorId": {
          "description": "SiteConnectorId",
          "type": "integer",
          "format": "int32"
        },
        "siteConnectorName": {
          "description": "SiteConnectorName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SystemLogConfigurationViewModel": {
      "description": "System Log Configuration View Model",
      "properties": {
        "allowViewingOnline": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "When enabled, the log will be able to be viewed online"
        },
        "enableSystemLog": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "When enabled, the system log is enabled"
        },
        "maxLogLength": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "Maximum number of messages to keep in log. When null, it is unlimited"
        },
        "notifyWhenShrunk": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "When enabled, admins will get a notified when the log file is shrunk"
        }
      },
      "type": "object"
    },
    "SystemLogConfigurationUpdateArgs": {
      "description": "SystemLogConfigurationUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SystemLogConfigurationUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SystemLogConfigurationUpdateModel": {
      "description": "System Log Configuration Update Model",
      "properties": {
        "allowViewingOnline": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When enabled, the log will be able to be viewed online"
        },
        "enableSystemLog": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When enabled, the system log is enabled"
        },
        "maxLogLength": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Maximum number of messages to keep in log. When null, it is unlimited"
        },
        "notifyWhenShrunk": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When enabled, admins will get a notified when the log file is shrunk"
        }
      },
      "type": "object"
    },
    "ConfigurationTicketSystemViewModel": {
      "description": "Ticket System Configuration",
      "properties": {
        "ticketSystemList": {
          "description": "List of Ticket Systems",
          "items": {
            "$ref": "#/definitions/TicketSystemViewModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TicketSystemViewModel": {
      "description": "List of Ticket Systems",
      "properties": {
        "active": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Active"
        },
        "addCommentsToTicket": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "AddCommentsToTicket"
        },
        "bmcChangeManagementCommentWorkType": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBmcChangeManagementCommentWorkType",
          "description": "BmcChangeManagementCommentWorkType"
        },
        "bmcIncidentManagementCommentWorkType": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBmcIncidentManagementCommentWorkType",
          "description": "BmcIncidentManagementCommentWorkType"
        },
        "bmcRemedyAuthentication": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "BmcRemedyAuthentication"
        },
        "bmcRemedyUrlEndpoint": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "BmcRemedyUrlEndpoint"
        },
        "description": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Description"
        },
        "displayMessage": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "DisplayMessage"
        },
        "forceRequireTicketNumber": {
          "$ref": "#/definitions/ViewFieldValueOfForceRequireTicketSystemOptions",
          "description": "ForceRequireTicketNumber"
        },
        "isDefault": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "IsDefault"
        },
        "name": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Name"
        },
        "organizationId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "OrganizationId"
        },
        "powerShellAddCommentScriptArguments": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "PowerShellAddCommentScriptArguments"
        },
        "powerShellAddCommentScriptId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "PowerShellAddCommentScriptId"
        },
        "powerShellAddTicketCommentScriptArguments": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "PowerShellAddTicketCommentScriptArguments"
        },
        "powerShellAddTicketCommentScriptId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "PowerShellAddTicketCommentScriptId"
        },
        "powerShellRunAsAccountSecretId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "PowerShellRunAsAccountSecretId"
        },
        "powerShellTicketStatusScriptArguments": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "PowerShellTicketStatusScriptArguments"
        },
        "powerShellTicketStatusScriptId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "PowerShellTicketStatusScriptId"
        },
        "serviceNowAllowedStatuses": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "ServiceNowAllowedStatuses"
        },
        "serviceNowDomainName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "ServiceNowDomainName"
        },
        "siteId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "SiteId"
        },
        "systemCredentialSecretId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "SystemCredentialSecretId"
        },
        "ticketNumberErrorMessage": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "TicketNumberErrorMessage"
        },
        "ticketNumberValidation": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "TicketNumberValidation"
        },
        "ticketSystemId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "TicketSystemId"
        },
        "ticketSystemType": {
          "$ref": "#/definitions/ViewFieldValueOfTicketSystemTypes",
          "description": "TicketSystemType"
        },
        "viewTicketURL": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "ViewTicketURL"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfOptionalBmcChangeManagementCommentWorkType": {
      "description": "BmcChangeManagementCommentWorkType",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfOptionalBmcIncidentManagementCommentWorkType": {
      "description": "BmcIncidentManagementCommentWorkType",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfForceRequireTicketSystemOptions": {
      "description": "ForceRequireTicketNumber",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ForceRequireTicketSystemOptions",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ForceRequireTicketSystemOptions": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "ReasonOnlyRequired",
        "BothRequired",
        "TicketNumberOrReasonRequired",
        "TicketNumberOnlyRequired"
      ]
    },
    "ViewFieldValueOfTicketSystemTypes": {
      "description": "TicketSystemType",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/TicketSystemTypes",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "TicketSystemTypes": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "TicketNumberValidation",
        "BmcRemedyIncidentManagement",
        "BmcRemedyChangeManagement",
        "PowerShell",
        "ServiceNowChangeManagement",
        "ServiceNowIncidentManagement"
      ]
    },
    "ConfigurationTicketSystemArgs": {
      "description": "ConfigurationTicketSystemArgs",
      "properties": {
        "data": {
          "description": "Data",
          "items": {
            "$ref": "#/definitions/TicketSystemPatchModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TicketSystemPatchModel": {
      "description": "Data",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Ticket System Active status"
        },
        "addCommentsToTicket": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Send comment to your integrated Ticket System and add it to the incident or change request."
        },
        "bmcChangeManagementCommentWorkType": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBmcChangeManagementCommentWorkType",
          "description": "BMC Remedy Change Management integration only.  Select work type for comments added."
        },
        "bmcIncidentManagementCommentWorkType": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBmcIncidentManagementCommentWorkType",
          "description": "BMC Remedy Incident Management integration only.  Select work type for comments added."
        },
        "bmcRemedyAuthentication": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "BMC Remedy integration only. Authentication value that usually represents a login server."
        },
        "bmcRemedyUrlEndpoint": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "BMC Remedy integration only.  The SOAP URL endpoint for the BMC Remedy Incident or Change Management.  Should be the CHG_ChangeInterface_WS or HPD_IncidentInterface_WS endpoint."
        },
        "description": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Ticket System Dexcription"
        },
        "displayMessage": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Ticket System Ticket Title"
        },
        "forceRequireTicketNumber": {
          "$ref": "#/definitions/UpdateFieldValueOfForceRequireTicketSystemOptions",
          "description": "Ticket System Comment and/or Number Requirement"
        },
        "isDefault": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Indicates the Ticket System is the default choice."
        },
        "name": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Ticket System Name"
        },
        "powerShellAddCommentScriptArguments": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "PowerShell integration only.  Optional arguments for the comment script.  Arguemnts are separated by a space."
        },
        "powerShellAddCommentScriptId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "PowerShell integration only.  Custom PowerSHell script to add a comment to a ticket system."
        },
        "powerShellAddTicketCommentScriptArguments": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "PowerShell integration only.  Optional arguments for the ticket comment script.  Arguemnts are separated by a space."
        },
        "powerShellAddTicketCommentScriptId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "PowerShell integration only.  Custom PowerSHell script to add a comment to a ticket in a ticket system."
        },
        "powerShellRunAsAccountSecretId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "PowerShell integration only.  Secret Id for credentials to use to run the Powershell."
        },
        "powerShellTicketStatusScriptArguments": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "PowerShell integration only.  Optional arguments for the ticket status script.  Arguemnts are separated by a space."
        },
        "powerShellTicketStatusScriptId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Powreshell Integration only.  Custom PowerShell script to get the ticket status."
        },
        "serviceNowAllowedStatuses": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "ServiceNow integration only.  Statuses to accept from ServiceNow, separated by commas."
        },
        "serviceNowDomainName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "ServiceNow integration only. The domain name that hosts the RESTful web services for Ticket System integration."
        },
        "siteId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Ticket System Site"
        },
        "systemCredentialSecretId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Privilged Secret Id for credentials to connect to integrated Ticket Systems."
        },
        "ticketNumberErrorMessage": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Ticket Number Validation Error Message"
        },
        "ticketNumberValidation": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Ticket Number Validation Regex"
        },
        "ticketSystemId": {
          "description": "TicketSystemId",
          "type": "integer",
          "format": "int32"
        },
        "ticketSystemType": {
          "$ref": "#/definitions/UpdateFieldValueOfTicketSystemTypes",
          "description": "Ticket System Type"
        },
        "viewTicketUrl": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Ticket System URL pattern"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalBmcChangeManagementCommentWorkType": {
      "description": "BMC Remedy Change Management integration only.  Select work type for comments added.",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalBmcIncidentManagementCommentWorkType": {
      "description": "BMC Remedy Incident Management integration only.  Select work type for comments added.",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfForceRequireTicketSystemOptions": {
      "description": "Ticket System Comment and/or Number Requirement",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/ForceRequireTicketSystemOptions",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfTicketSystemTypes": {
      "description": "Ticket System Type",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/TicketSystemTypes",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ConfigurationTicketSystemListCreateOrPatchModel": {
      "description": "ConfigurationTicketSystemListCreateOrPatchModel",
      "properties": {
        "ticketSystemList": {
          "description": "TicketSystemList",
          "items": {
            "$ref": "#/definitions/TicketSystemPatchModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UnlimitedAdminUpdateArgs": {
      "description": "UnlimitedAdminUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/UnlimitedAdminUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "UnlimitedAdminUpdateModel": {
      "description": "Unlimited Admin Update Model",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "State of Unlimited Admin Mode"
        },
        "notes": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Notes for the change. Only updated if state has changed"
        }
      },
      "type": "object"
    },
    "ConfigurationUserExperiencePatchArgs": {
      "description": "ConfigurationUserExperiencePatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationUserExperiencePatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationUserExperiencePatchModel": {
      "description": "Update user experience configuration",
      "properties": {
        "applicationLanguage": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The default language for all users"
        },
        "defaultDateFormat": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The default date format that everyone sees unless they override with a user preference"
        },
        "defaultNewUserRoleId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "The role that should be assigned when a new user is created"
        },
        "defaultTimeFormat": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The default time format that everyone sees unless they override with a user preference"
        },
        "forceInactivityTimeout": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Logout users that are inactive"
        },
        "forceInactivityTimeoutMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Logout users that are inactive for this many minutes"
        },
        "requireFolderForSecret": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Secrets must be created within a folder"
        },
        "secretPasswordHistoryRestrictionAll": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "No duplicate passwords on a Secret"
        },
        "secretPasswordHistoryRestrictionCount": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "The number of recently used passwords on a Secret that cannot be used"
        },
        "secretViewIntervalMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The number of minutes entering a comment is valid"
        },
        "serverTimeZoneId": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The timezone that the server shows by default and when job scheduling runs"
        },
        "uiInactivitySleepMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How long until the UI will go inactive and stop polling for updates"
        }
      },
      "type": "object"
    },
    "ConfigurationUserExperienceViewModel": {
      "description": "ConfigurationUserExperienceViewModel",
      "properties": {
        "applicationLanguage": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfInt32",
          "description": "ApplicationLanguage"
        },
        "defaultDateFormat": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfInt32",
          "description": "DefaultDateFormat"
        },
        "defaultNewUserRoleId": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfOptionalInt32",
          "description": "DefaultNewUserRoleId"
        },
        "defaultTimeFormat": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfInt32",
          "description": "DefaultTimeFormat"
        },
        "forceInactivityTimeout": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "ForceInactivityTimeout"
        },
        "forceInactivityTimeoutMinutes": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "ForceInactivityTimeoutMinutes"
        },
        "requireFolderForSecret": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "RequireFolderForSecret"
        },
        "secretPasswordHistoryRestrictionAll": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "SecretPasswordHistoryRestrictionAll"
        },
        "secretPasswordHistoryRestrictionCount": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "SecretPasswordHistoryRestrictionCount"
        },
        "secretViewIntervalMinutes": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "SecretViewIntervalMinutes"
        },
        "serverTimeZoneId": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfString",
          "description": "ServerTimeZoneId"
        },
        "uiInactivitySleepMinutes": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "UiInactivitySleepMinutes"
        }
      },
      "type": "object"
    },
    "ViewFieldDropDownValueOfInt32": {
      "description": "ApplicationLanguage",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "dropDownOptions": {
          "description": "DropDownOptions",
          "items": {
            "$ref": "#/definitions/ViewFieldDropDownOption"
          },
          "type": "array"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ViewFieldDropDownValueOfString": {
      "description": "ServerTimeZoneId",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "dropDownOptions": {
          "description": "DropDownOptions",
          "items": {
            "$ref": "#/definitions/ViewFieldDropDownOption"
          },
          "type": "array"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationUserInterfacePatchArgs": {
      "description": "ConfigurationUserInterfacePatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurationUserInterfacePatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ConfigurationUserInterfacePatchModel": {
      "description": "Update user interface configuration",
      "properties": {
        "allowUserToSelectTheme": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Allow users to pick their theme when in classic mode"
        },
        "customLogoCollapsed": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Custom logo when left nav is collapsed"
        },
        "customLogoFullSize": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Custom logo full size"
        },
        "defaultClassicTheme": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Default classic theme"
        },
        "newUiDefault": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "New users will use the new ui by default"
        }
      },
      "type": "object"
    },
    "ConfigurationUserInterfaceViewModel": {
      "description": "ConfigurationUserInterfaceViewModel",
      "properties": {
        "allowUserToSelectTheme": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "AllowUserToSelectTheme"
        },
        "customLogoCollapsed": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "CustomLogoCollapsed"
        },
        "customLogoFullSize": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "CustomLogoFullSize"
        },
        "defaultClassicTheme": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfString",
          "description": "DefaultClassicTheme"
        },
        "newUiDefault": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "NewUiDefault"
        }
      },
      "type": "object"
    },
    "ConnectionManagerSettingsModel": {
      "description": "Connection Manager Settings",
      "properties": {
        "allowLocalConnections": {
          "description": "Allow Local Connections",
          "type": "boolean"
        },
        "allowSavingCredentials": {
          "description": "Allow Saving Credentials",
          "type": "boolean"
        },
        "downloadUrl": {
          "description": "Download Url",
          "type": "string"
        },
        "hasValidLicense": {
          "description": "Has Valid License",
          "type": "boolean"
        },
        "isTrialLicense": {
          "description": "Is Trial License",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DevOpsSecretsVaultCreateSyncArgs": {
      "description": "DevOpsSecretsVaultCreateSyncArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DevOpsSecretVaultSyncUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DevOpsSecretVaultSyncUpdateModel": {
      "description": "Data",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If this mapping of Secret to Tenant is active."
        },
        "dsvTenantId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Tenant to push the secret to."
        },
        "fieldNamesPath": {
          "$ref": "#/definitions/UpdateFieldValueOfString[]",
          "description": "The path in DSV to push the secret to."
        },
        "secretId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Secret to Sync."
        }
      },
      "type": "object"
    },
    "DevOpsSecretsVaultSyncStatusModel": {
      "description": "DevOps Secrets Vault Synchronization Status",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "dateAdded": {
          "description": "Date Added",
          "type": "string",
          "format": "date-time"
        },
        "devOpsSecretVaultPath": {
          "description": "DevOps Secrets Vault Path",
          "type": "string"
        },
        "devOpsSyncMapId": {
          "description": "DevOps Synchronization Map Id",
          "type": "integer",
          "format": "int32"
        },
        "lastSyncTime": {
          "description": "Last Sync Time",
          "type": "string",
          "format": "date-time"
        },
        "nextSyncTime": {
          "description": "Next Sync Time",
          "type": "string",
          "format": "date-time"
        },
        "secretId": {
          "description": "Secret Id",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "Secret Name",
          "type": "string"
        },
        "status": {
          "description": "Status",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant Id",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DevOpsSecretsVaultSyncSecretsArgs": {
      "description": "DevOpsSecretsVaultSyncSecretsArgs",
      "properties": {
        "data": {
          "description": "Data",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DevOpsSecretsVaultSyncStatusViewModel": {
      "description": "DevOpsSecretsVaultSyncStatusViewModel[]",
      "properties": {
        "active": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "If the mapping is active."
        },
        "dateAdded": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfDateTime",
          "description": "When the Secret was originally mapped to the Tenant."
        },
        "devOpsSecretVaultPath": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Where to push the Secret to in the Tenant."
        },
        "devOpsSyncMapId": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfInt32",
          "description": "ID of the mapping between the Tenant and Secret."
        },
        "lastSyncTime": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfOptionalDateTime",
          "description": "When the Secret was last pushed."
        },
        "nextSyncTime": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfOptionalDateTime",
          "description": "When the Secret will be pushed next."
        },
        "secretId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "Secret ID."
        },
        "secretName": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "Name of the Secret."
        },
        "status": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "Status of syncing progress."
        },
        "tenantId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "Tenant ID."
        }
      },
      "type": "object"
    },
    "ViewFieldValueReadOnlyOfDateTime": {
      "description": "When the Secret was originally mapped to the Tenant.",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "ViewFieldValueReadOnlyOfInt32": {
      "description": "ID of the mapping between the Tenant and Secret.",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ViewFieldValueReadOnlyOfOptionalDateTime": {
      "description": "When the Secret was last pushed.",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "ViewFieldValueReadOnlyOfString": {
      "description": "Name of the Secret.",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfDevOpsSecretsVaultSyncStatusSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/DevOpsSecretsVaultSyncStatusSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DevOpsSecretsVaultSyncStatusSummary": {
      "description": "Query results",
      "properties": {
        "active": {
          "description": "If the mapping is active.",
          "type": "boolean"
        },
        "dateAdded": {
          "description": "When the Secret will be pushed next.",
          "type": "string",
          "format": "date-time"
        },
        "devOpsSecretVaultPath": {
          "description": "Where to push the Secret to in the Tenant.",
          "type": "string"
        },
        "devOpsSyncMapId": {
          "description": "ID of the mapping between the Tenant and Secret.",
          "type": "integer",
          "format": "int32"
        },
        "lastSyncTime": {
          "description": "When the Secret was last pushed.",
          "type": "string",
          "format": "date-time"
        },
        "secretName": {
          "description": "Name of the Secret.",
          "type": "string"
        },
        "status": {
          "description": "Status of syncing progress.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfDevOpsSecretsVaultTenantSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/DevOpsSecretsVaultTenantSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DevOpsSecretsVaultTenantSummary": {
      "description": "Query results",
      "properties": {
        "active": {
          "description": "If this Tenant should be pushed to.",
          "type": "boolean"
        },
        "dateAdded": {
          "description": "When the Tenant was added to Secret Server.",
          "type": "string",
          "format": "date-time"
        },
        "dsvTenantId": {
          "description": "Tenant ID.",
          "type": "integer",
          "format": "int32"
        },
        "lastSynced": {
          "description": "The last time the Sync Interval expired.",
          "type": "string",
          "format": "date-time"
        },
        "secretName": {
          "description": "The Secret in which to connect to DSV.",
          "type": "string"
        },
        "syncInterval": {
          "description": "How often to check if secrets need to be pushed to the Tenant.",
          "type": "integer",
          "format": "int32"
        },
        "tenantName": {
          "description": "Tenant Name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DevOpsSecretsVaultCreateTenantArgs": {
      "description": "DevOpsSecretsVaultCreateTenantArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DevOpsSecretsVaultTenantUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DevOpsSecretsVaultTenantUpdateModel": {
      "description": "Data",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Active"
        },
        "secretId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "SecretId"
        },
        "syncInterval": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "SyncInterval"
        },
        "tenantName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "TenantName"
        }
      },
      "type": "object"
    },
    "DevOpsSecretsVaultTenantModel": {
      "description": "DevOps Secrets Vault Tenant",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "dateAdded": {
          "description": "Date Added",
          "type": "string",
          "format": "date-time"
        },
        "dsvTenantId": {
          "description": "DSV Tenant Id",
          "type": "integer",
          "format": "int32"
        },
        "lastSynced": {
          "description": "Last Synchronized",
          "type": "string",
          "format": "date-time"
        },
        "secretId": {
          "description": "Secret Id",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "Secret Name",
          "type": "string"
        },
        "syncInterval": {
          "description": "Synchronization Interval",
          "type": "integer",
          "format": "int32"
        },
        "tenantName": {
          "description": "Tenant Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DevOpsSecretsVaultUpdateTenantArgs": {
      "description": "DevOpsSecretsVaultUpdateTenantArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DevOpsSecretsVaultTenantUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DevOpsSecretsVaultTenantAuditSummary": {
      "description": "DevOpsSecretsVaultTenantAuditSummary",
      "properties": {
        "action": {
          "description": "What the user did.",
          "type": "string"
        },
        "date": {
          "description": "When the action occurred.",
          "type": "string",
          "format": "date-time"
        },
        "notes": {
          "description": "A description of the action.",
          "type": "string"
        },
        "tenantName": {
          "description": "Tenant being audited.",
          "type": "string"
        },
        "userDisplayName": {
          "description": "User that performed the action.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DiagnosticsSummary": {
      "description": "Diagnostics summary",
      "properties": {
        "activeDirectorySynchronizationThreadStatus": {
          "description": "Active Directory Synchronization Status",
          "type": "string"
        },
        "backboneClass": {
          "description": "Backbone Class Name",
          "type": "string"
        },
        "backboneType": {
          "description": "Backbone Type",
          "type": "string"
        },
        "hsmCacheMapSize": {
          "description": "HSM Cache Map Size",
          "type": "string"
        },
        "hsmTiming": {
          "description": "HSM Timing",
          "type": "string"
        },
        "isDomainController": {
          "description": "Is Domain Controller",
          "type": "string"
        },
        "lastUpgrade": {
          "description": "Last Upgrade",
          "type": "string"
        },
        "ldapProvider": {
          "description": "LDAP Provider",
          "type": "string"
        },
        "maxDegreeOfParallelism": {
          "description": "Max Degrees Of Parallelism",
          "type": "string"
        },
        "netFxVersion": {
          "description": "Net FX Version",
          "type": "string"
        },
        "operatingSystem": {
          "description": "Operating System",
          "type": "string"
        },
        "operatingSystemArchitecture": {
          "description": "Operating System Architecture",
          "type": "string"
        },
        "physicalMemory": {
          "description": "Physical Memory",
          "type": "string"
        },
        "productVersion": {
          "description": "Product Version",
          "type": "string"
        },
        "proxyConfiguration": {
          "description": "Proxy Configuration",
          "type": "string"
        },
        "readOnlyMode": {
          "description": "Read Only Mode",
          "type": "string"
        },
        "searchIndexerThreadStatus": {
          "description": "Search Indexer Status",
          "type": "string"
        },
        "secretServerUrl": {
          "description": "Secret Server URL",
          "type": "string"
        },
        "serverName": {
          "description": "Server Name",
          "type": "string"
        },
        "serverTime": {
          "description": "Server Time",
          "type": "string"
        },
        "serverTimeZone": {
          "description": "Server TimeZone",
          "type": "string"
        },
        "sqlDatabaseName": {
          "description": "SQL Database Name",
          "type": "string"
        },
        "sqlIsDatabaseReplicated": {
          "description": "SQL Is Database Replicated",
          "type": "string"
        },
        "sqlServerCollation": {
          "description": "SQL Server Collation",
          "type": "string"
        },
        "sqlServerConnectionString": {
          "description": "SQL Server Connection String",
          "type": "string"
        },
        "sqlServerEdition": {
          "description": "SQL Server Edition",
          "type": "string"
        },
        "sqlServerIsPublished": {
          "description": "SQL Server Is Published",
          "type": "string"
        },
        "sqlServerIsReplicationRunning": {
          "description": "SQL Server Is Replication Running",
          "type": "string"
        },
        "sqlServerIsSubscribed": {
          "description": "SQL Server Is Subscribed",
          "type": "string"
        },
        "sqlServerName": {
          "description": "SQL Server Name",
          "type": "string"
        },
        "sqlServerTime": {
          "description": "SQL Server Time",
          "type": "string"
        },
        "sqlServerVersion": {
          "description": "SQL Server Version",
          "type": "string"
        },
        "upgradeAvailable": {
          "description": "Upgrade Available",
          "type": "string"
        },
        "upgradeInProgress": {
          "description": "Upgrade In Progress",
          "type": "string"
        },
        "upTime": {
          "description": "Up Time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DictionaryOfStringAndString": {
      "description": "DictionaryOfStringAndString",
      "properties": {},
      "type": "object"
    },
    "ThreadInformation": {
      "description": "ThreadInformation[]",
      "properties": {
        "applicationName": {
          "description": "ApplicationName",
          "type": "string"
        },
        "hostName": {
          "description": "HostName",
          "type": "string"
        },
        "identityName": {
          "description": "IdentityName",
          "type": "string"
        },
        "lastActivity": {
          "description": "LastActivity",
          "type": "string",
          "format": "date-time"
        },
        "managedThreadId": {
          "description": "ManagedThreadId",
          "type": "integer",
          "format": "int32"
        },
        "threadName": {
          "description": "ThreadName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "QuartzTrigger": {
      "description": "QuartzTrigger[]",
      "properties": {
        "jobName": {
          "description": "JobName",
          "type": "string"
        },
        "nextFireTicks": {
          "description": "NextFireTicks",
          "type": "integer",
          "format": "int64"
        },
        "nextFireTime": {
          "description": "NextFireTime",
          "type": "string",
          "format": "date-time"
        },
        "previousFireTicks": {
          "description": "PreviousFireTicks",
          "type": "integer",
          "format": "int64"
        },
        "previousFireTime": {
          "description": "PreviousFireTime",
          "type": "string",
          "format": "date-time"
        },
        "triggerState": {
          "description": "TriggerState",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryServicesConfigurationModel": {
      "description": "Directory Services Configuration",
      "properties": {
        "daysToKeepOperationalLogs": {
          "description": "How long to keep operational logs",
          "type": "integer",
          "format": "int32"
        },
        "disableInactiveUsersMonths": {
          "description": "How long to wait before disabling inactive users",
          "type": "integer",
          "format": "int32"
        },
        "enableDirectoryIntegration": {
          "description": "Whether or not any Directory Services integrations are enabled or not",
          "type": "boolean"
        },
        "enableDirectorySynchronization": {
          "description": "Synchronize users and group membership on a time interval",
          "type": "boolean"
        },
        "enableIntegratedWindowsAuthentication": {
          "description": "Integrated Windows Authentication (IWA) allows users to log into Secret Server automatically if they are logged into a workstation with their Active Directory credentials.",
          "type": "boolean"
        },
        "enableUserDisabling": {
          "description": "When enabled inactive users will be automatically disabled regardless of their Directory status",
          "type": "boolean"
        },
        "synchronizationIntervalDays": {
          "description": "Synchronize days interval for users and group membership",
          "type": "integer",
          "format": "int32"
        },
        "synchronizationIntervalHours": {
          "description": "Synchronize hours interval for users and group membership",
          "type": "integer",
          "format": "int32"
        },
        "synchronizationIntervalMinutes": {
          "description": "Synchronize minutes interval for users and group membership",
          "type": "integer",
          "format": "int32"
        },
        "userAccountOptions": {
          "$ref": "#/definitions/DirectoryServicesSynchronizationUserOption",
          "description": "Indicates how to synchronize the enabled status for new and existing users"
        }
      },
      "type": "object"
    },
    "DirectoryServicesSynchronizationUserOption": {
      "description": "Indicates how to synchronize the enabled status for new and existing users",
      "properties": {},
      "type": "string",
      "enum": [
        "ImportEnabled",
        "ImportDisabled",
        "MirrorDirectory"
      ]
    },
    "DirectoryServicesConfigurationUpdateArgs": {
      "description": "DirectoryServicesConfigurationUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DirectoryServicesConfigurationUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DirectoryServicesConfigurationUpdateModel": {
      "description": "The fields to update on the Directory Services configuration.",
      "properties": {
        "daysToKeepOperationalLogs": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How long to keep operational logs"
        },
        "disableInactiveUsersMonths": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How long to wait before disabling inactive users.  Valid values are 1 to 12 months."
        },
        "enableDirectoryIntegration": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether or not any Directory Services integrations are enabled or not"
        },
        "enableDirectorySynchronization": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Synchronize users and group membership on a time interval"
        },
        "enableIntegratedWindowsAuthentication": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Integrated Windows Authentication (IWA) allows users to log into Secret Server automatically if they are logged into a workstation with their Active Directory credentials."
        },
        "enableUserDisabling": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "When enabled inactive users will be automatically disabled regardless of their Directory status"
        },
        "synchronizationIntervalDays": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Synchronize days interval for users and group membership"
        },
        "synchronizationIntervalHours": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Synchronize hours interval for users and group membership"
        },
        "synchronizationIntervalMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Synchronize minutes interval for users and group membership"
        },
        "userAccountOptions": {
          "$ref": "#/definitions/UpdateFieldValueOfDirectoryServicesSynchronizationUserOption",
          "description": "Indicates how to synchronize the enabled status for new and existing users"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfDirectoryServicesSynchronizationUserOption": {
      "description": "Indicates how to synchronize the enabled status for new and existing users",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/DirectoryServicesSynchronizationUserOption",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "IPagingOfDomainSummaryModel": {
      "description": "IPagingOfDomainSummaryModel",
      "properties": {
        "records": {
          "description": "Records",
          "items": {
            "$ref": "#/definitions/DomainSummaryModel"
          },
          "type": "array"
        },
        "sortBy": {
          "description": "SortBy",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DomainSummaryModel": {
      "description": "Domain Summary",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "domainId": {
          "description": "Domain Id",
          "type": "integer",
          "format": "int32"
        },
        "domainName": {
          "description": "Domain Name",
          "type": "string"
        },
        "domainType": {
          "$ref": "#/definitions/DomainType",
          "description": "Domain Type"
        },
        "friendlyName": {
          "description": "Friendly Name",
          "type": "string"
        },
        "requireRadiusAuthentication": {
          "description": "Require Radius Authentication",
          "type": "boolean"
        },
        "useSecureLdap": {
          "description": "Use Secure LDAP",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LinkDomainGroupArgs": {
      "description": "LinkDomainGroupArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/LinkDomainGroupSettings",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "LinkDomainGroupSettings": {
      "description": "Information about the directory group that is needed to create a link",
      "properties": {
        "domainIdentifier": {
          "description": "The unique directory identifier for the group to be linked.  For example, this is ADGuid in Active Directory",
          "type": "string"
        },
        "name": {
          "description": "Name of the group in the directory",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryServicesGroupViewModel": {
      "description": "Directory Groups",
      "properties": {
        "errorMessage": {
          "description": "Error Message returned when populating groups array if error occurs, otherwise null",
          "type": "string"
        },
        "groups": {
          "description": "Groups that matched the search criteria",
          "items": {
            "$ref": "#/definitions/DirectoryServicesGroupModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DirectoryServicesGroupModel": {
      "description": "Directory Group",
      "properties": {
        "dsGuid": {
          "description": "Unique Identifier of the Group",
          "type": "string"
        },
        "name": {
          "description": "Name Guid of the Group",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryServicesGroupMemberResponse": {
      "description": "Group Member Response",
      "properties": {
        "errorMessage": {
          "description": "Indicates if an error message occurred",
          "type": "string"
        },
        "members": {
          "description": "Members of the group",
          "items": {
            "$ref": "#/definitions/DirectoryGroupUserViewModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DirectoryGroupUserViewModel": {
      "description": "Directory Group User",
      "properties": {
        "displayName": {
          "description": "Display Name of the user",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LdapSyncSettingsViewModel": {
      "description": "LdapSyncSettingsViewModel",
      "properties": {
        "actions": {
          "description": "Valid Actions",
          "items": {
            "$ref": "#/definitions/DomainActionType"
          },
          "type": "array"
        },
        "baseDnCode": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfString",
          "description": "Base Distinguished Name Code"
        },
        "displayNameAttribute": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Display name attribute"
        },
        "domainId": {
          "description": "Domain Id",
          "type": "integer",
          "format": "int32"
        },
        "emailAttribute": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Email attribute"
        },
        "groupMemberAttribute": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Group member attribute"
        },
        "groupNameAttribute": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Group name attribute"
        },
        "groupObjectClasses": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Group object classes"
        },
        "groupSearchFilter": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Ldap Filter for finding groups"
        },
        "guidAttribute": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Guid attribute"
        },
        "usernameAttribute": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Username attribute"
        },
        "userObjectClasses": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "User object classes"
        },
        "userPrincipalNameAttribute": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "User Principal Name attribute"
        }
      },
      "type": "object"
    },
    "DomainActionType": {
      "description": "Valid Actions",
      "properties": {},
      "type": "string",
      "enum": [
        "EditDomain",
        "EditGroups"
      ]
    },
    "DirectoryServicesSynchronizationStatus": {
      "description": "Directory Synchronization Status",
      "properties": {
        "domainStatus": {
          "description": "Results from the last syncrhonization for each domain.  If a synchronization is currently running this will indicate the results for the last synchronization and not the current running totals.",
          "items": {
            "$ref": "#/definitions/DomainSynchronizationStatus"
          },
          "type": "array"
        },
        "endDateTime": {
          "description": "The date and time that the last synchronization ended.  If a synchronization is currently running this will be empty.",
          "type": "string",
          "format": "date-time"
        },
        "errorCount": {
          "description": "The number of errors since the last synchronization start time",
          "type": "integer",
          "format": "int32"
        },
        "estimatedPercentComplete": {
          "description": "Based on last run time duration the percent complete assumes each run takes approximately the same amount of time",
          "type": "integer",
          "format": "int32"
        },
        "nextSynchronizationDateTime": {
          "description": "The next time the synchronization is expected to run",
          "type": "string",
          "format": "date-time"
        },
        "startDateTime": {
          "description": "The date and time that the last synchronization started.  This will be empty if a synchronization has never been run.",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "DomainSynchronizationStatus": {
      "description": "Results of the last synchronization for this domain",
      "properties": {
        "disabledUsers": {
          "description": "Number of users that were disabled",
          "type": "integer",
          "format": "int32"
        },
        "domainId": {
          "description": "Which domain is this status for",
          "type": "integer",
          "format": "int32"
        },
        "domainUsersUpdatedSinceLastSynchronization": {
          "description": "Number of users that have been updated for any reason since last synchronization",
          "type": "integer",
          "format": "int32"
        },
        "newUsersCreated": {
          "description": "Total new users that were created",
          "type": "integer",
          "format": "int32"
        },
        "newUsersCreatedAsDisabled": {
          "description": "Total new users that were created and then set as disabled due to either license limits or other settings",
          "type": "integer",
          "format": "int32"
        },
        "usersRemovedFromGroups": {
          "description": "Total users removed from groups",
          "type": "integer",
          "format": "int32"
        },
        "usersWithGroupMembershipChanges": {
          "description": "Total number of users that were added or removed from any group in this domain",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfDirectoryServicesSynchronizationLogEntry": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/DirectoryServicesSynchronizationLogEntry"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DirectoryServicesSynchronizationLogEntry": {
      "description": "Query results",
      "properties": {},
      "type": "object"
    },
    "DiscoveryConfigurationModel": {
      "description": "DiscoveryConfigurationModel",
      "properties": {
        "discoveryIntervalDays": {
          "description": "Synchronize days interval for Discovery",
          "type": "integer",
          "format": "int32"
        },
        "discoveryIntervalHours": {
          "description": "Synchronize hours interval for Discovery",
          "type": "integer",
          "format": "int32"
        },
        "discoveryScanOffsetHours": {
          "description": "Sets time offset in hours for discovery scan operations. Default value: 0",
          "type": "integer",
          "format": "int32"
        },
        "enableDiscovery": {
          "description": "Whether or not discovery is enabled",
          "type": "boolean"
        },
        "engineADDiscoveryBatchSize": {
          "description": "The size of the batch for Active Directory Account engine scanning - set higher if engine takes too much time to process. Default value: 1",
          "type": "integer",
          "format": "int32"
        },
        "ignoreClusterNodeObjects": {
          "description": "If set to true, Discovery scans will bypass machines identified as 'msclustervirtualserver.' Default value: False",
          "type": "boolean"
        },
        "maxLogAgeDays": {
          "description": "How long to keep logs",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DiscoveryConfigurationUpdateArgs": {
      "description": "DiscoveryConfigurationUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DiscoveryConfigurationUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DiscoveryConfigurationUpdateModel": {
      "description": "Update discovery configuration",
      "properties": {
        "discoveryIntervalDays": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Synchronize days interval for users and group membership"
        },
        "discoveryIntervalHours": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Synchronize hours interval for users and group membership"
        },
        "discoveryScanOffsetHours": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Sets time offset in hours for discovery scan operations. Default value: 0"
        },
        "enableDiscovery": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether or not discovery is enabled"
        },
        "engineADDiscoveryBatchSize": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The size of the batch for Active Directory Account engine scanning - set higher if engine takes too much time to process. Default value: 1"
        },
        "ignoreClusterNodeObjects": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "If set to true, Discovery scans will bypass machines identified as 'msclustervirtualserver.' Default value: False"
        },
        "maxLogAgeDays": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "How long to keep logs"
        }
      },
      "type": "object"
    },
    "DiscoveryRunArgs": {
      "description": "DiscoveryRunArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DiscoveryRunModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DiscoveryRunModel": {
      "description": "Data",
      "properties": {
        "commandType": {
          "$ref": "#/definitions/DiscoveryCommandType",
          "description": "CommandType"
        }
      },
      "type": "object"
    },
    "DiscoveryCommandType": {
      "description": "CommandType",
      "properties": {},
      "type": "string",
      "enum": [
        "Discovery",
        "ComputerScan"
      ]
    },
    "DiscoveryScanTypeSummary": {
      "description": "DiscoveryScanTypeSummary[]",
      "properties": {
        "discoveryScanTypeId": {
          "description": "Discovery Scan Type Id",
          "type": "integer",
          "format": "int32"
        },
        "scanTypeDescription": {
          "description": "Scan Type Description",
          "type": "string"
        },
        "scanTypeName": {
          "description": "Scan Type Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DiscoverySourceCreateArgs": {
      "description": "DiscoverySourceCreateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DiscoverySourceCreateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DiscoverySourceCreateModel": {
      "description": "Data",
      "properties": {
        "active": {
          "description": "Is discovery source active",
          "type": "boolean"
        },
        "discoverSpecificOUs": {
          "description": "Discover specific OUs",
          "type": "boolean"
        },
        "discoveryScannerId": {
          "description": "Discovery scanner ID",
          "type": "string"
        },
        "discoverySourceSettings": {
          "$ref": "#/definitions/DiscoverySourceSettingsCreateModel",
          "description": "Additional settings for discovery source"
        },
        "lastDiscoveryRunDate": {
          "description": "Last discovery run date",
          "type": "string",
          "format": "date-time"
        },
        "machineNameResolutionType": {
          "$ref": "#/definitions/MachineNameResolutionType",
          "description": "Use machine name and FQDM or only use machine name"
        },
        "name": {
          "description": "The discovery source naame",
          "type": "string"
        },
        "secretId": {
          "description": "Discovery Secret credential",
          "type": "integer",
          "format": "int32"
        },
        "siteId": {
          "description": "The site ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DiscoverySourceSettingsCreateModel": {
      "description": "Additional settings for discovery source",
      "properties": {
        "domainType": {
          "$ref": "#/definitions/DomainType",
          "description": "Domain type: ActiveDirectory, OpenLdap, or AzureActiveDirectory"
        },
        "friendlyName": {
          "description": "The domain friendly name",
          "type": "string"
        },
        "fullyQualifiedDomainName": {
          "description": "The fully qualified domain name",
          "type": "string"
        },
        "useSecureLDAP": {
          "description": "Use secure LDAP",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MachineNameResolutionType": {
      "description": "Use machine name and FQDM or only use machine name",
      "properties": {},
      "type": "string",
      "enum": [
        "UseMachineNameAndFQDM",
        "OnlyUseMachineName"
      ]
    },
    "DiscoverySourceModel": {
      "description": "DiscoverySourceModel",
      "properties": {
        "active": {
          "description": "Is discovery source active",
          "type": "boolean"
        },
        "discoverSpecificOUs": {
          "description": "Discover specific OUs",
          "type": "boolean"
        },
        "discoveryScannerId": {
          "description": "Discovery scanner ID",
          "type": "string"
        },
        "discoverySourceId": {
          "description": "The discovery source ID",
          "type": "integer",
          "format": "int32"
        },
        "discoverySourceSettings": {
          "$ref": "#/definitions/DiscoverySourceSettingsModel",
          "description": "Additional settings for discovery source"
        },
        "lastDiscoveryRunDate": {
          "description": "Last discovery run date",
          "type": "string",
          "format": "date-time"
        },
        "machineNameResolutionType": {
          "$ref": "#/definitions/MachineNameResolutionType",
          "description": "Use machine name and FQDM or only use machine name"
        },
        "name": {
          "description": "The discovery source naame",
          "type": "string"
        },
        "secretId": {
          "description": "Default Discovery Secret credentials",
          "type": "integer",
          "format": "int32"
        },
        "siteId": {
          "description": "The site ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DiscoverySourceSettingsModel": {
      "description": "Additional settings for discovery source",
      "properties": {
        "distinguishedName": {
          "description": "The domain distinguished name",
          "type": "string"
        },
        "domainType": {
          "description": "Domain type: ActiveDirectory, OpenLdap, or AzureActiveDirectory",
          "type": "string"
        },
        "friendlyName": {
          "description": "The domain friendly name",
          "type": "string"
        },
        "fullyQualifiedDomainName": {
          "description": "The fully qualified domain name",
          "type": "string"
        },
        "netBIOSName": {
          "description": "The NetBIOS name",
          "type": "string"
        },
        "useSecureLDAP": {
          "description": "Use secure LDAP",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DiscoveryScannerSettingTypeSummary": {
      "description": "DiscoveryScannerSettingTypeSummary[]",
      "properties": {
        "discoveryItemScannerDescription": {
          "description": "Description of the scanner",
          "type": "string"
        },
        "discoveryItemScannerId": {
          "description": "Item Scanner ID",
          "type": "integer",
          "format": "int32"
        },
        "discoveryItemScannerName": {
          "description": "Scanner name",
          "type": "string"
        },
        "discoveryScanTypeId": {
          "description": "Scanner Type ID",
          "type": "integer",
          "format": "int32"
        },
        "isSuggested": {
          "description": "True if this scanner is typically created",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DiscoverySourceFilterPatchArgs": {
      "description": "DiscoverySourceFilterPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DomainDiscoveryScopeFilterPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DomainDiscoveryScopeFilterPatchModel": {
      "description": "A filter on a domain scope",
      "properties": {
        "scanTargetType": {
          "$ref": "#/definitions/UpdateFieldValueOfScanTargetType",
          "description": "The scan target type for the member"
        },
        "secretId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "The secret ID associated with the member"
        },
        "siteId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "The site ID"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfScanTargetType": {
      "description": "The scan target type for the member",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/ScanTargetType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ScanTargetType": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "Users",
        "Computers",
        "UsersAndComputers"
      ]
    },
    "DomainDiscoveryScopeFilterModel": {
      "description": "A filter for a discovery source",
      "properties": {
        "discoveryFilterId": {
          "description": "A filter ID",
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "description": "The display name of the member",
          "type": "string"
        },
        "filterType": {
          "$ref": "#/definitions/DiscoveryFilterType",
          "description": "Indicates if the filter is an include or exclude"
        },
        "guid": {
          "description": "The GUID of the member",
          "type": "string"
        },
        "scanTargetType": {
          "$ref": "#/definitions/ScanTargetType",
          "description": "The scan target type for the member"
        },
        "secretId": {
          "description": "The secret ID associated with the member",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "The secret name associated with the member",
          "type": "string"
        },
        "siteId": {
          "description": "The site ID",
          "type": "integer",
          "format": "int32"
        },
        "siteName": {
          "description": "The site name of the member",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DiscoveryFilterType": {
      "description": "Indicates if the filter is an include or exclude",
      "properties": {},
      "type": "string",
      "enum": [
        "Include",
        "Exclude"
      ]
    },
    "DiscoverySourceFiltersUpdateArgs": {
      "description": "DiscoverySourceFiltersUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DiscoverySourceFiltersUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DiscoverySourceFiltersUpdateModel": {
      "description": "Data",
      "properties": {
        "filters": {
          "description": "Filters",
          "items": {
            "$ref": "#/definitions/DomainDiscoveryScopeFilterUpdateModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DomainDiscoveryScopeFilterUpdateModel": {
      "description": "Filters",
      "properties": {
        "discoveryFilterId": {
          "description": "A filter ID",
          "type": "integer",
          "format": "int32"
        },
        "filterType": {
          "$ref": "#/definitions/DiscoveryFilterType",
          "description": "FilterType"
        },
        "guid": {
          "description": "The AD GUID",
          "type": "string"
        },
        "scanTargetType": {
          "$ref": "#/definitions/ScanTargetType",
          "description": "The scan target type for the member"
        },
        "secretId": {
          "description": "The secret ID associated with the member",
          "type": "integer",
          "format": "int32"
        },
        "siteId": {
          "description": "The site ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DomainDiscoveryScopeModel": {
      "description": "A discovery filter to limit discovery to specific OU",
      "properties": {
        "discoverySourceId": {
          "description": "The Secret Server ID of the discovery soure",
          "type": "integer",
          "format": "int32"
        },
        "filters": {
          "description": "A list of filter memebers",
          "items": {
            "$ref": "#/definitions/DomainDiscoveryScopeFilterModel"
          },
          "type": "array"
        },
        "lookupTableIsReady": {
          "description": "Is the look up table ready for the discovery source",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "OUModel": {
      "description": "OUModel[]",
      "properties": {
        "displayName": {
          "description": "The display name of the OU",
          "type": "string"
        },
        "distinguishedName": {
          "description": "The distinguished name of the OU",
          "type": "string"
        },
        "guid": {
          "description": "The GUID of the OU",
          "type": "string"
        },
        "id": {
          "description": "The Secret Server ID of the OU",
          "type": "integer",
          "format": "int32"
        },
        "parentGuid": {
          "description": "The parent GUID of the OU",
          "type": "string"
        },
        "type": {
          "description": "The type of the OU",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DiscoveryScannerSettingCreateArgs": {
      "description": "Discovery Scanner Settings Create Args",
      "properties": {
        "data": {
          "$ref": "#/definitions/DiscoveryScannerSettingCreateData",
          "description": "Discovery Scanner Settings Create Data"
        }
      },
      "type": "object"
    },
    "DiscoveryScannerSettingCreateData": {
      "description": "Create discovery scanner settings",
      "properties": {
        "discoveryScanTypeId": {
          "description": "DiscoveryScanTypeId to create",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DiscoveryScannerSettingViewModel": {
      "description": "Discovery Scanner Settings",
      "properties": {
        "discoverySourceScannerMapId": {
          "description": "Unique ID for scanner setting",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DiscoveryScannerSettingSummaryModel": {
      "description": "DiscoveryScannerSettingSummaryModel[]",
      "properties": {
        "discoveryScannerId": {
          "description": "Discovery Scanner Id",
          "type": "integer",
          "format": "int32"
        },
        "discoverySourceScannerMapId": {
          "description": "The ID for the map",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DiscoverySourceUpdateArgs": {
      "description": "DiscoverySourceUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DiscoverySourceUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DiscoverySourceUpdateModel": {
      "description": "Data",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Is discovery source active"
        },
        "discoverSpecificOUs": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Discover specific OUs"
        },
        "discoverySourceSettings": {
          "$ref": "#/definitions/UpdateFieldValueOfDiscoverySourceSettingsUpdateModel",
          "description": "Additional discovery settings"
        },
        "machineNameResolutionType": {
          "$ref": "#/definitions/UpdateFieldValueOfMachineNameResolutionType",
          "description": "Use machine name and FQDM or only use machine name"
        },
        "name": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The discovery source name"
        },
        "secretId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Default Discovery Secret credentials"
        },
        "siteId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "The discovery source site"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfDiscoverySourceSettingsUpdateModel": {
      "description": "Additional discovery settings",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/DiscoverySourceSettingsUpdateModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "DiscoverySourceSettingsUpdateModel": {
      "description": "Value",
      "properties": {
        "friendlyName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The domain friendly name"
        },
        "fullyQualifiedDomainName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "The fully qualified domain name"
        },
        "useSecureLDAP": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Use secure LDAP"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfMachineNameResolutionType": {
      "description": "Use machine name and FQDM or only use machine name",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/MachineNameResolutionType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "DiscoverySourceSummaryModel": {
      "description": "DiscoverySourceSummaryModel",
      "properties": {
        "active": {
          "description": "Is discovery source active",
          "type": "boolean"
        },
        "discoverSpecificOUs": {
          "description": "Discover specific OUs",
          "type": "boolean"
        },
        "discoveryScannerId": {
          "description": "Discovery scanner ID",
          "type": "string"
        },
        "discoverySourceId": {
          "description": "The discovery source ID",
          "type": "integer",
          "format": "int32"
        },
        "discoverySourceSettings": {
          "$ref": "#/definitions/DiscoverySourceSettingsSummaryModel",
          "description": "Additional settings for discovery source"
        },
        "lastDiscoveryRunDate": {
          "description": "Last discovery run date",
          "type": "string",
          "format": "date-time"
        },
        "machineNameResolutionType": {
          "$ref": "#/definitions/MachineNameResolutionType",
          "description": "Use machine name and FQDM or only use machine name"
        },
        "name": {
          "description": "The discovery source naame",
          "type": "string"
        },
        "secretId": {
          "description": "Default Discovery Secret credentials",
          "type": "integer",
          "format": "int32"
        },
        "siteId": {
          "description": "The site ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DiscoverySourceSettingsSummaryModel": {
      "description": "Additional settings for discovery source",
      "properties": {
        "distinguishedName": {
          "description": "The domain distinguished name",
          "type": "string"
        },
        "domainType": {
          "description": "Domain type: ActiveDirectory, OpenLdap, or AzureActiveDirectory",
          "type": "string"
        },
        "friendlyName": {
          "description": "The domain friendly name",
          "type": "string"
        },
        "fullyQualifiedDomainName": {
          "description": "The fully qualified domain name",
          "type": "string"
        },
        "netBIOSName": {
          "description": "The NetBIOS name",
          "type": "string"
        },
        "useSecureLDAP": {
          "description": "Use secure LDAP",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DiscoveryStatusModel": {
      "description": "DiscoveryStatusModel",
      "properties": {
        "actions": {
          "description": "Actions the current user can perform for Discovery",
          "items": {
            "$ref": "#/definitions/DiscoveryActionType"
          },
          "type": "array"
        },
        "discoveryComputerScanEndDateTime": {
          "description": "The date and time the Scan Computer messages completed queueing last.",
          "type": "string",
          "format": "date-time"
        },
        "discoveryComputerScanStartDateTime": {
          "description": "The date and time Scan Computer messages last started.",
          "type": "string",
          "format": "date-time"
        },
        "discoveryFetchEndDateTime": {
          "description": "The date and time the Host Range and Machine fetching last completed.  This will be empty if a synchronization has never been run.",
          "type": "string",
          "format": "date-time"
        },
        "discoveryFetchStartDateTime": {
          "description": "The date and time the Host Range and Machine fetching was last run or started.  This will be empty if a synchronization has never been run.",
          "type": "string",
          "format": "date-time"
        },
        "discoverySourceCount": {
          "description": "Total number of discovery sources either active or inactive",
          "type": "integer",
          "format": "int32"
        },
        "isDiscoveryComputerScanRunning": {
          "description": "Indicates if computer scanning is actively queueing.",
          "type": "boolean"
        },
        "isDiscoveryEnabled": {
          "description": "Indicates if Discovery is currently enabled",
          "type": "boolean"
        },
        "isDiscoveryFetchRunning": {
          "description": "Indicates if the Host Range and Machine fetching is currently running.",
          "type": "boolean"
        },
        "nextComputerScanDiscoveryDateTime": {
          "description": "The next time computer scanning is expected to run",
          "type": "string",
          "format": "date-time"
        },
        "nextFetchDiscoveryDateTime": {
          "description": "The next time the Host Range and Machine fetching is expected to run",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "DiscoveryActionType": {
      "description": "Actions the current user can perform for Discovery",
      "properties": {},
      "type": "string",
      "enum": [
        "CreateDiscoverySource",
        "EditDiscoverySource",
        "RunDiscovery",
        "RunComputerScan",
        "EditConfiguration",
        "ViewScanners"
      ]
    },
    "IPagingOfDiscoverySourceAudit": {
      "description": "IPagingOfDiscoverySourceAudit",
      "properties": {
        "records": {
          "description": "Records",
          "items": {
            "$ref": "#/definitions/DiscoverySourceAudit"
          },
          "type": "array"
        },
        "sortBy": {
          "description": "SortBy",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DiscoverySourceAudit": {
      "description": "Records",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "date": {
          "description": "Date",
          "type": "string",
          "format": "date-time"
        },
        "discoverySourceAuditId": {
          "description": "DiscoverySourceAuditId",
          "type": "integer",
          "format": "int32"
        },
        "discoverySourceId": {
          "description": "DiscoverySourceId",
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "formattedDate": {
          "description": "FormattedDate",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "UserName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EngineServerCapabilitiesSummary": {
      "description": "EngineServerCapabilitiesSummary[]",
      "properties": {
        "lastModifiedDate": {
          "description": "When the capability was last updated",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Which capability",
          "type": "string"
        },
        "value": {
          "description": "The server's capability",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DistributedEngineConfigurationModel": {
      "description": "Distributed Engine Configuration",
      "properties": {
        "azureServiceBusTransportType": {
          "$ref": "#/definitions/AzureServiceBusTransportType",
          "description": "Azure Service Bus Transport Type"
        },
        "callbackPort": {
          "description": "Port of the Distributed Engines",
          "type": "integer",
          "format": "int32"
        },
        "callbackUrl": {
          "description": "Url of the Distributed Engines",
          "type": "string"
        },
        "defaultCallbackIntervalSeconds": {
          "description": "Default Callback Interval Seconds",
          "type": "integer",
          "format": "int32"
        },
        "enableDistributedEngines": {
          "description": "Whether Distributed Engines are enabled or not",
          "type": "boolean"
        },
        "protocol": {
          "$ref": "#/definitions/DistributedEngineProtocol",
          "description": "Protocol used by Distibuted Engines"
        },
        "responseBusSiteConnectorId": {
          "description": "Response Bus Site Connector",
          "type": "integer",
          "format": "int32"
        },
        "secretHeartbeatMessageMinutesToLive": {
          "description": "Secret Heartbeat Message Time to Live in Minutes",
          "type": "integer",
          "format": "int32"
        },
        "secretHeartbeatMessageRetryMinutes": {
          "description": "Secret Heartbeat Message Retry Time in Minutes",
          "type": "integer",
          "format": "int32"
        },
        "secretPasswordChangeMessageMinutesToLive": {
          "description": "Secret Password Change Message Time to Live in Minutes",
          "type": "integer",
          "format": "int32"
        },
        "secretPasswordChangeMessageRetryMinutes": {
          "description": "Secret Password Change Message Retry Time in Minutes",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "AzureServiceBusTransportType": {
      "description": "Azure Service Bus Transport Type",
      "properties": {},
      "type": "string",
      "enum": [
        "Amqp",
        "AmqpWebSockets"
      ]
    },
    "DistributedEngineProtocol": {
      "description": "Protocol used by Distibuted Engines",
      "properties": {},
      "type": "string",
      "enum": [
        "Http",
        "Https",
        "Tcp"
      ]
    },
    "DistributedEngineConfigurationUpdateArgs": {
      "description": "DistributedEngineConfigurationUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DistributedEngineConfigurationUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DistributedEngineConfigurationUpdateModel": {
      "description": "The fields to update on the Distributed Engine Configuration",
      "properties": {
        "azureServiceBusTransportType": {
          "$ref": "#/definitions/UpdateFieldValueOfAzureServiceBusTransportType",
          "description": "Azure Service Bus Transport Type"
        },
        "callbackPort": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Port of the Distributed Engines"
        },
        "callbackUrl": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Url of the Distributed Engines"
        },
        "defaultCallbackIntervalSeconds": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Default Callback Interval Seconds"
        },
        "enableDistributedEngines": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether Distributed Engines are enabled or not"
        },
        "protocol": {
          "$ref": "#/definitions/UpdateFieldValueOfDistributedEngineProtocol",
          "description": "Protocol used by Distibuted Engine"
        },
        "responseBusSiteConnectorId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Response Bus Site Connector"
        },
        "secretHeartbeatMessageMinutesToLive": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Secret Heartbeat Message Time to Live in Minutes"
        },
        "secretHeartbeatMessageRetryMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Secret Heartbeat Message Retry Time in Minutes"
        },
        "secretPasswordChangeMessageMinutesToLive": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Secret Password Change Message Time to Live in Minutes"
        },
        "secretPasswordChangeMessageRetryMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Secret Password Change Message Retry Time in Minutes"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfAzureServiceBusTransportType": {
      "description": "Azure Service Bus Transport Type",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/AzureServiceBusTransportType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfDistributedEngineProtocol": {
      "description": "Protocol used by Distibuted Engine",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/DistributedEngineProtocol",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "FileStream": {
      "description": "FileStream",
      "properties": {
        "canRead": {
          "description": "CanRead",
          "type": "boolean"
        },
        "canSeek": {
          "description": "CanSeek",
          "type": "boolean"
        },
        "canTimeout": {
          "description": "CanTimeout",
          "type": "boolean"
        },
        "canWrite": {
          "description": "CanWrite",
          "type": "boolean"
        },
        "handle": {
          "$ref": "#/definitions/IntPtr",
          "description": "Handle"
        },
        "isAsync": {
          "description": "IsAsync",
          "type": "boolean"
        },
        "length": {
          "description": "Length",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "position": {
          "description": "Position",
          "type": "integer",
          "format": "int64"
        },
        "readTimeout": {
          "description": "ReadTimeout",
          "type": "integer",
          "format": "int32"
        },
        "safeFileHandle": {
          "$ref": "#/definitions/SafeFileHandle",
          "description": "SafeFileHandle"
        },
        "writeTimeout": {
          "description": "WriteTimeout",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "IntPtr": {
      "description": "Handle",
      "properties": {},
      "type": "object"
    },
    "SafeFileHandle": {
      "description": "SafeFileHandle",
      "properties": {
        "isClosed": {
          "description": "IsClosed",
          "type": "boolean"
        },
        "isInvalid": {
          "description": "IsInvalid",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "IPagingOfEngineSummaryModel": {
      "description": "IPagingOfEngineSummaryModel",
      "properties": {
        "records": {
          "description": "Records",
          "items": {
            "$ref": "#/definitions/EngineSummaryModel"
          },
          "type": "array"
        },
        "sortBy": {
          "description": "SortBy",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EngineSummaryModel": {
      "description": "Records",
      "properties": {
        "activationStatus": {
          "$ref": "#/definitions/EngineActivationStatusType",
          "description": "ActivationStatus"
        },
        "bindAddress": {
          "description": "BindAddress",
          "type": "string"
        },
        "connectionStatus": {
          "$ref": "#/definitions/EngineConnectionStatusType",
          "description": "ConnectionStatus"
        },
        "engineId": {
          "description": "EngineId",
          "type": "integer",
          "format": "int32"
        },
        "friendlyName": {
          "description": "FriendlyName",
          "type": "string"
        },
        "hostName": {
          "description": "HostName",
          "type": "string"
        },
        "isBlockedByNet48": {
          "description": "IsBlockedByNet48",
          "type": "boolean"
        },
        "lastConnected": {
          "description": "LastConnected",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "EngineActivationStatusType": {
      "description": "ActivationStatus",
      "properties": {},
      "type": "string",
      "enum": [
        "Pending",
        "Activated",
        "Inactive",
        "Deleted"
      ]
    },
    "EngineConnectionStatusType": {
      "description": "ConnectionStatus",
      "properties": {},
      "type": "string",
      "enum": [
        "Offline",
        "Online",
        "Invalid",
        "OldVersion"
      ]
    },
    "SiteCreateArgs": {
      "description": "SiteCreateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SiteCreateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SiteCreateModel": {
      "description": "Site Create Model",
      "properties": {
        "active": {
          "description": "Is Site Active",
          "type": "boolean"
        },
        "enableCredSspForWinRm": {
          "description": "Enable CredSSP For WinRM",
          "type": "boolean"
        },
        "enableRdpProxy": {
          "description": "Enable RDP Proxy",
          "type": "boolean"
        },
        "enableSshProxy": {
          "description": "Enable SSH Proxy",
          "type": "boolean"
        },
        "heartbeatInterval": {
          "description": "Heartbeat Interval of Site",
          "type": "integer",
          "format": "int32"
        },
        "powershellSecretId": {
          "description": "Powershell Secret Id of Site if set",
          "type": "integer",
          "format": "int32"
        },
        "rdpProxyPort": {
          "description": "RDP Proxy Port",
          "type": "integer",
          "format": "int32"
        },
        "siteConnectorId": {
          "description": "Id of Site Connector of Site",
          "type": "integer",
          "format": "int32"
        },
        "siteName": {
          "description": "Name of Site",
          "type": "string"
        },
        "sshProxyPort": {
          "description": "SSH Proxy Port",
          "type": "integer",
          "format": "int32"
        },
        "winRmEndPointUrl": {
          "description": "WinRM End Point URL of Site",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SiteViewModel": {
      "description": "SiteViewModel",
      "properties": {
        "active": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Active"
        },
        "enableCredSspForWinRm": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "EnableCredSspForWinRm"
        },
        "enableRdpProxy": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "EnableRdpProxy"
        },
        "enableSshProxy": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "EnableSshProxy"
        },
        "heartbeatInterval": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "HeartbeatInterval"
        },
        "powershellSecretId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "PowershellSecretId"
        },
        "processingLocation": {
          "$ref": "#/definitions/ViewFieldValueOfProcessingLocationType",
          "description": "ProcessingLocation"
        },
        "rdpProxyPort": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "RdpProxyPort"
        },
        "rdpProxyPortInherited": {
          "description": "RdpProxyPortInherited",
          "type": "boolean"
        },
        "secretCount": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "SecretCount"
        },
        "siteConnectorId": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfOptionalInt32",
          "description": "SiteConnectorId"
        },
        "siteId": {
          "description": "SiteId",
          "type": "integer",
          "format": "int32"
        },
        "siteMessage": {
          "description": "SiteMessage",
          "type": "string"
        },
        "siteName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SiteName"
        },
        "sshProxyPort": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "SshProxyPort"
        },
        "sshProxyPortInherited": {
          "description": "SshProxyPortInherited",
          "type": "boolean"
        },
        "systemSite": {
          "description": "SystemSite",
          "type": "boolean"
        },
        "winRmEndPointUrl": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "WinRmEndPointUrl"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfProcessingLocationType": {
      "description": "ProcessingLocation",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ProcessingLocationType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ProcessingLocationType": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "UseWebSite",
        "UseDistributedEngine"
      ]
    },
    "SiteUpdateArgs": {
      "description": "SiteUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SiteUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SiteUpdateModel": {
      "description": "Data",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Is Site Active"
        },
        "enableCredSspForWinRm": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Enable CredSSP For WinRM"
        },
        "enableRdpProxy": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable RDP Proxy"
        },
        "enableSshProxy": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable SSH Proxy"
        },
        "heartbeatInterval": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Heartbeat Interval of Site"
        },
        "powershellSecretId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Powershell Secret Id of Site if set"
        },
        "processingLocation": {
          "$ref": "#/definitions/UpdateFieldValueOfProcessingLocationType",
          "description": "Processing Location of Site"
        },
        "rdpProxyPort": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "RDP Proxy Port"
        },
        "siteConnectorId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Id of Site Connector of Site"
        },
        "siteName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Name of Site"
        },
        "sshProxyPort": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "SSH Proxy Port"
        },
        "winRmEndPointUrl": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "WinRM End Point URL of Site"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfProcessingLocationType": {
      "description": "Processing Location of Site",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/ProcessingLocationType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "PagingOfSiteAuditSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SiteAuditSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SiteAuditSummary": {
      "description": "Site Audit Summary",
      "properties": {
        "action": {
          "description": "Site Audit Action",
          "type": "string"
        },
        "dateRecorded": {
          "description": "Site Audit DateRecorded",
          "type": "string",
          "format": "date-time"
        },
        "notes": {
          "description": "Site Audit Notes",
          "type": "string"
        },
        "siteAuditId": {
          "description": "Site Audit Id",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "Site Audit UserName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfSiteLogSummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SiteLogSummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SiteLogSummaryModel": {
      "description": "Site Log Summary Model",
      "properties": {
        "dateRecorded": {
          "description": "Date Log Message was Recorded",
          "type": "string",
          "format": "date-time"
        },
        "engineName": {
          "description": "Name of Engine",
          "type": "string"
        },
        "message": {
          "description": "Message that was Logged",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReassignSecretsArgs": {
      "description": "ReassignSecretsArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ReassignSecretsModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ReassignSecretsModel": {
      "description": "Data",
      "properties": {
        "disableSite": {
          "description": "Should the site be disabled as part of the reassign",
          "type": "boolean"
        },
        "newSiteId": {
          "description": "The new site ID to reassign to",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SiteConnectorViewModel": {
      "description": "Site Connector View Model",
      "properties": {
        "active": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Whether Site Connector is active or not"
        },
        "hostName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Host Name of Site Connector"
        },
        "port": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "Port of Site Connector"
        },
        "queueType": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfMessageQueueType",
          "description": "Queue Type of Site Connector"
        },
        "sharedAccessKeyName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Shared Access Key Name of Site Connector"
        },
        "sharedAccessKeyValue": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Shared Access Key Value of Site Connector"
        },
        "siteConnectorId": {
          "description": "Id of Site Connector",
          "type": "integer",
          "format": "int32"
        },
        "siteConnectorName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Name of Site Connector"
        },
        "sslCertificateThumbprint": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SSL Certificate Thumbprint of Site Connector"
        },
        "useSsl": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Whether Site Connector uses SSL or not"
        },
        "validated": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Whether Site Connector is validated or not"
        }
      },
      "type": "object"
    },
    "ViewFieldDropDownValueOfMessageQueueType": {
      "description": "Queue Type of Site Connector",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "dropDownOptions": {
          "description": "DropDownOptions",
          "items": {
            "$ref": "#/definitions/ViewFieldDropDownOption"
          },
          "type": "array"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/MessageQueueType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "MessageQueueType": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "MemoryMq",
        "RabbitMq",
        "AzureServiceBus"
      ]
    },
    "SiteConnectorCreateArgs": {
      "description": "SiteConnectorCreateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SiteConnectorCreateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SiteConnectorCreateModel": {
      "description": "Site Connector Create Model",
      "properties": {
        "active": {
          "description": "Whether Site Connector is active or not",
          "type": "boolean"
        },
        "hostName": {
          "description": "Host Name of Site Connector",
          "type": "string"
        },
        "port": {
          "description": "Port of Site Connector",
          "type": "integer",
          "format": "int32"
        },
        "queueType": {
          "$ref": "#/definitions/MessageQueueType",
          "description": "Queue Type of Site Connector"
        },
        "sharedAccessKeyName": {
          "description": "Shared Access Key Name of Site Connector",
          "type": "string"
        },
        "sharedAccessKeyValue": {
          "description": "Shared Access Key Value of Site Connector",
          "type": "string"
        },
        "siteConnectorName": {
          "description": "Name of Site Connector",
          "type": "string"
        },
        "sslCertificateThumbprint": {
          "description": "SSL Certificate Thumbprint of Site Connector",
          "type": "string"
        },
        "useSsl": {
          "description": "Whether Site Connector uses SSL or not",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SiteConnectorUpdateArgs": {
      "description": "SiteConnectorUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SiteConnectorUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SiteConnectorUpdateModel": {
      "description": "Site Connector Update Model",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether Site Connector is active or not"
        },
        "hostName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Host Name of Site Connector"
        },
        "port": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Port of Site Connector"
        },
        "queueType": {
          "$ref": "#/definitions/UpdateFieldValueOfMessageQueueType",
          "description": "Queue Type of Site Connector"
        },
        "sharedAccessKeyName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Shared Access Key Name of Site Connector"
        },
        "sharedAccessKeyValue": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Shared Access Key Value of Site Connector"
        },
        "siteConnectorName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Name of Site Connector"
        },
        "sslCertificateThumbprint": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "SSL Certificate Thumbprint of Site Connector"
        },
        "useSsl": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether Site Connector uses SSL or not"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfMessageQueueType": {
      "description": "Queue Type of Site Connector",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/MessageQueueType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "SiteConnectorCredentialsModel": {
      "description": "The credentials that should exist in the site connector service",
      "properties": {
        "password": {
          "description": "The password that should exist in the site connector service",
          "type": "string"
        },
        "username": {
          "description": "The username that should exist in the site connector service",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SiteConnectorValidationResult": {
      "description": "Result of site connector validation",
      "properties": {
        "validationMessage": {
          "description": "When false, may contain reason for failure",
          "type": "string"
        },
        "validationSuccess": {
          "description": "True if successfully validated",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "IPagingOfSiteConnectorSummaryModel": {
      "description": "IPagingOfSiteConnectorSummaryModel",
      "properties": {
        "records": {
          "description": "Records",
          "items": {
            "$ref": "#/definitions/SiteConnectorSummaryModel"
          },
          "type": "array"
        },
        "sortBy": {
          "description": "SortBy",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SiteConnectorSummaryModel": {
      "description": "Site Connector Summary",
      "properties": {
        "active": {
          "description": "Whether Site Connector is active or not",
          "type": "boolean"
        },
        "hostName": {
          "description": "Host Name of Site Connector",
          "type": "string"
        },
        "queueType": {
          "description": "Queue Type of Site Connector",
          "type": "string"
        },
        "siteConnectorId": {
          "description": "Id of Site Connector",
          "type": "integer",
          "format": "int32"
        },
        "siteConnectorName": {
          "description": "Name of Site Connector",
          "type": "string"
        },
        "validated": {
          "description": "Whether Site Connector has been validated or not",
          "type": "boolean"
        },
        "version": {
          "description": "Version of Site Connector",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IPagingOfSiteSummaryModel": {
      "description": "IPagingOfSiteSummaryModel",
      "properties": {
        "records": {
          "description": "Records",
          "items": {
            "$ref": "#/definitions/SiteSummaryModel"
          },
          "type": "array"
        },
        "sortBy": {
          "description": "SortBy",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SiteSummaryModel": {
      "description": "Site Summary",
      "properties": {
        "active": {
          "description": "Is Site Active",
          "type": "boolean"
        },
        "isLocal": {
          "description": "Indicates if this site is the local site that cannot have engines assigned",
          "type": "boolean"
        },
        "lastActivity": {
          "description": "Last Date of Activity of Site",
          "type": "string",
          "format": "date-time"
        },
        "numEnginesMissingNetFramework": {
          "description": "The number of engines on the site missing the minimum DotNet Framework",
          "type": "integer",
          "format": "int32"
        },
        "offlineEngineCount": {
          "description": "Offline Engine Count of Site",
          "type": "integer",
          "format": "int32"
        },
        "onlineEngineCount": {
          "description": "Online Engine Count of Site",
          "type": "integer",
          "format": "int32"
        },
        "siteId": {
          "description": "Id of Site",
          "type": "integer",
          "format": "int32"
        },
        "siteMetrics": {
          "description": "List of Metrics for this site such as ConnectionStatusOffline, ConnectionStatusOnline, ActivationStatusPending, LostConnection, and more.  Only returned on a search when IncludeSiteMetrics is true.",
          "items": {
            "$ref": "#/definitions/SiteMetric"
          },
          "type": "array"
        },
        "siteName": {
          "description": "Name of Site",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SiteMetric": {
      "description": "List of Metrics for this site such as ConnectionStatusOffline, ConnectionStatusOnline, ActivationStatusPending, LostConnection, and more.  Only returned on a search when IncludeSiteMetrics is true.",
      "properties": {
        "metricDisplayName": {
          "description": "MetricDisplayName",
          "type": "string"
        },
        "metricName": {
          "description": "MetricName",
          "type": "string"
        },
        "metricValue": {
          "description": "MetricValue",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EngineActivationRequestArgs": {
      "description": "EngineActivationRequestArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/EngineActivationRequestModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "EngineActivationRequestModel": {
      "description": "Data",
      "properties": {
        "engines": {
          "description": "Engines",
          "items": {
            "$ref": "#/definitions/EngineStatusChangeModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EngineStatusChangeModel": {
      "description": "Change engine status",
      "properties": {
        "callbackInterval": {
          "description": "When activating an engine if SiteId is null this will be the default callback interval",
          "type": "integer",
          "format": "int32"
        },
        "changeType": {
          "$ref": "#/definitions/EngineStatusChangeType",
          "description": "The action to perform on the engine"
        },
        "engineId": {
          "description": "The ID of the engine to change status",
          "type": "integer",
          "format": "int32"
        },
        "siteConnectorId": {
          "description": "When activating an engine if SiteId is null this is the site connector that will be used.",
          "type": "integer",
          "format": "int32"
        },
        "siteId": {
          "description": "When activating an engine SiteId is required",
          "type": "integer",
          "format": "int32"
        },
        "siteName": {
          "description": "When activating an engine if SiteId is null you can pass a SiteName and it will create the site and then activate the engine",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EngineStatusChangeType": {
      "description": "The action to perform on the engine",
      "properties": {},
      "type": "string",
      "enum": [
        "Activate",
        "Deactivate",
        "RemoveFromSite",
        "Delete"
      ]
    },
    "EngineActivationResultModel": {
      "description": "EngineActivationResultModel",
      "properties": {
        "results": {
          "description": "Results",
          "items": {
            "$ref": "#/definitions/EngineActivationResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EngineActivationResult": {
      "description": "The result of the engine status update",
      "properties": {
        "engineId": {
          "description": "Engine ID",
          "type": "integer",
          "format": "int32"
        },
        "engineName": {
          "description": "The name of the engine",
          "type": "string"
        },
        "error": {
          "description": "If there was an error",
          "type": "string"
        },
        "success": {
          "description": "Whether or not the status change was successful",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DomainNameIndexModel": {
      "description": "Domain Name Index",
      "properties": {
        "discoverySourceId": {
          "description": "DiscoverySourceId",
          "type": "integer",
          "format": "int32"
        },
        "discoverySourceIdScanned": {
          "description": "DiscoverySourceIdScanned",
          "type": "integer",
          "format": "int32"
        },
        "discoverySourceIdSuggested": {
          "description": "DiscoverySourceIdSuggested",
          "type": "integer",
          "format": "int32"
        },
        "domainMarkedAsIgnored": {
          "description": "Indicates if the domain is marked As Ignored",
          "type": "boolean"
        },
        "domainNameDiscovered": {
          "description": "Domain Name Discovered",
          "type": "string"
        },
        "domainNameIndexId": {
          "description": "Domain Name Index Id",
          "type": "integer",
          "format": "int32"
        },
        "domainResolveType": {
          "$ref": "#/definitions/DomainResolveType",
          "description": "How the domain was resolved"
        },
        "expiredDate": {
          "description": "Expired date",
          "type": "string",
          "format": "date-time"
        },
        "lastIndexedDate": {
          "description": "The date the domain was last indexed",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "DomainResolveType": {
      "description": "How the domain was resolved",
      "properties": {},
      "type": "string",
      "enum": [
        "CouldNotResolve",
        "MatchedDomainInDb",
        "MatchedFQDNOrFriendlyOrNetBIOSInDb",
        "MatchedFriendlyNameWithAd",
        "ManualUserInputDiscoverySourceId"
      ]
    },
    "DomainNameIndexUpdateArgs": {
      "description": "DomainNameIndexUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DomainNameIndexUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DomainNameIndexUpdateModel": {
      "description": "Data",
      "properties": {
        "discoverySourceIdSuggested": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "DiscoverySourceIdSuggested"
        },
        "domainMarkedAsIgnored": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "DomainMarkedAsIgnored"
        }
      },
      "type": "object"
    },
    "DomainNameIndexCreateArgs": {
      "description": "DomainNameIndexCreateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DomainNameIndexUpdateModel",
          "description": "Data"
        },
        "domainNameDiscovered": {
          "description": "DomainNameDiscovered",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DomainNameIndexExpireUpdateArgs": {
      "description": "DomainNameIndexExpireUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/DomainNameIndexExpireUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "DomainNameIndexExpireUpdateModel": {
      "description": "Data",
      "properties": {
        "domainNameIndexId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "DomainNameIndexId"
        },
        "reIndexNow": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "ReIndexNow"
        }
      },
      "type": "object"
    },
    "PagingOfDualControlSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/DualControlSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DualControlSummary": {
      "description": "Dual control summary",
      "properties": {
        "active": {
          "description": "Whether this dual control is active",
          "type": "boolean"
        },
        "dualControlTypeId": {
          "$ref": "#/definitions/DualControlType",
          "description": "Dual control type ID"
        },
        "dualControlTypeName": {
          "description": "Dual control type name",
          "type": "string"
        },
        "id": {
          "description": "Dual control ID",
          "type": "integer",
          "format": "int32"
        },
        "itemId": {
          "description": "Dual control item ID",
          "type": "integer",
          "format": "int32"
        },
        "itemName": {
          "description": "Dual control item name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DualControlType": {
      "description": "Dual control type ID",
      "properties": {},
      "type": "string",
      "enum": [
        "Report",
        "UserAuditReport",
        "Secret",
        "CreateReport",
        "AllSecretSessions"
      ]
    },
    "DualControlCreateArgs": {
      "description": "Dual control creation options",
      "properties": {
        "active": {
          "description": "Create the dual control as active or not",
          "type": "boolean"
        },
        "dualControlApprovalGroups": {
          "description": "Dual control approval groups",
          "items": {
            "$ref": "#/definitions/IDualControlApprovalGroup"
          },
          "type": "array"
        },
        "dualControlTypeId": {
          "description": "Dual control type ID",
          "type": "integer",
          "format": "int32"
        },
        "itemId": {
          "description": "ItemId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "IDualControlApprovalGroup": {
      "description": "Dual control approval groups",
      "properties": {
        "dualControlId": {
          "description": "DualControlId",
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "description": "Enabled",
          "type": "boolean"
        },
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "GroupName",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DualControlModel": {
      "description": "Dual control",
      "properties": {
        "active": {
          "description": "Whether this dual control is active",
          "type": "boolean"
        },
        "dualControlApprovalGroups": {
          "description": "Dual control approval groups",
          "items": {
            "$ref": "#/definitions/IDualControlApprovalGroup"
          },
          "type": "array"
        },
        "dualControlTypeId": {
          "description": "Dual control type ID",
          "type": "integer",
          "format": "int32"
        },
        "dualControlTypeName": {
          "description": "Dual control type name",
          "type": "string"
        },
        "id": {
          "description": "Dual control ID",
          "type": "integer",
          "format": "int32"
        },
        "itemId": {
          "description": "Dual control item ID",
          "type": "integer",
          "format": "int32"
        },
        "itemName": {
          "description": "Dual control item name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DualControlUpdateArgs": {
      "description": "Dual control update options",
      "required": [
        "id"
      ],
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "dualControlApprovalGroups": {
          "description": "Dual control approval groups",
          "items": {
            "$ref": "#/definitions/IDualControlApprovalGroup"
          },
          "type": "array"
        },
        "dualControlTypeId": {
          "description": "Dual control type",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "App client ID. Must match ID in path",
          "type": "integer",
          "format": "int32"
        },
        "itemId": {
          "description": "ItemId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DualControlAuthArgs": {
      "description": "Dual control auth args ",
      "properties": {
        "data": {
          "$ref": "#/definitions/DualControlAuthDataModel",
          "description": "Dual control auth data"
        }
      },
      "type": "object"
    },
    "DualControlAuthDataModel": {
      "description": "Used to authorize dual controls",
      "properties": {
        "domain": {
          "description": "Domain for the user, null if local",
          "type": "integer",
          "format": "int32"
        },
        "password": {
          "description": "User password",
          "type": "string"
        },
        "twoFactorToken": {
          "description": "Two Factor Token to login",
          "type": "string"
        },
        "username": {
          "description": "Username that can login",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DualControlAuthResult": {
      "description": "The result of the authorization request",
      "properties": {
        "success": {
          "description": "True if the auth succeeded",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DualControlStateModel": {
      "description": "Whether or not dual control access has been authorized",
      "properties": {
        "stateResult": {
          "$ref": "#/definitions/DualControlStateResultType",
          "description": "The status for the dual control entity"
        }
      },
      "type": "object"
    },
    "DualControlStateResultType": {
      "description": "The status for the dual control entity",
      "properties": {},
      "type": "string",
      "enum": [
        "ApprovalRequired",
        "AccessAllowed"
      ]
    },
    "EnterpriseSearchRequestModel": {
      "description": "Enterprise Search Request Model",
      "properties": {
        "requestId": {
          "description": "Id of Request",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EnterpriseSearchResultModel": {
      "description": "Enterprise Search Result Model",
      "properties": {
        "data": {
          "description": "Date enterprise was accessed",
          "items": {
            "$ref": "#/definitions/EnterpriseSearchResultDataModel"
          },
          "type": "array"
        },
        "processEndDate": {
          "description": "Date process was completed",
          "type": "string",
          "format": "date-time"
        },
        "processStartDate": {
          "description": "Date process was started",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "EnterpriseSearchResultDataModel": {
      "description": "Enterprise Search Result Data Model",
      "properties": {
        "action": {
          "description": "Action taken on the accessed enterprise",
          "type": "string"
        },
        "dateRecorded": {
          "description": "Date enterprise was accessed",
          "type": "string",
          "format": "date-time"
        },
        "secretName": {
          "description": "Name of secret associated to the accessed enterprise",
          "type": "string"
        },
        "secretTemplateName": {
          "description": "Secret Template of secret associated to the accessed enterprise",
          "type": "string"
        },
        "userId": {
          "description": "Id of user that accessed the enterprise",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "Name of user that accessed the enterprise",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventPipelineCreateArgs": {
      "description": "EventPipelineCreateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/EventPipelineUpdateModel",
          "description": "Data"
        },
        "eventEntityTypeId": {
          "description": "EventEntityTypeId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyId": {
          "description": "EventPipelinePolicyId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelineUpdateModel": {
      "description": "Data",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Active"
        },
        "eventPipelineDescription": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "EventPipelineDescription"
        },
        "eventPipelineName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "EventPipelineName"
        },
        "filters": {
          "$ref": "#/definitions/UpdateFieldValueOfEventPipelineFilterMapUpdateModel[]",
          "description": "Filters"
        },
        "tasks": {
          "$ref": "#/definitions/UpdateFieldValueOfEventPipelineTaskMapUpdateModel[]",
          "description": "Tasks"
        },
        "triggers": {
          "$ref": "#/definitions/UpdateFieldValueOfEventPipelineTriggerUpdateModel[]",
          "description": "Triggers"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfEventPipelineFilterMapUpdateModel[]": {
      "description": "Filters",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/EventPipelineFilterMapUpdateModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EventPipelineFilterMapUpdateModel": {
      "description": "Value",
      "properties": {
        "eventPipelineFilterId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "EventPipelineFilterId"
        },
        "eventPipelineFilterMapId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "EventPipelineFilterMapId"
        },
        "eventPipelineFilterName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "EventPipelineFilterName"
        },
        "settings": {
          "$ref": "#/definitions/UpdateFieldValueOfSettingUpdateModel[]",
          "description": "Settings"
        },
        "sortOrder": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "SortOrder"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfSettingUpdateModel[]": {
      "description": "Settings",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/SettingUpdateModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SettingUpdateModel": {
      "description": "Value",
      "properties": {
        "settingName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "SettingName"
        },
        "settingValue": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "SettingValue"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfEventPipelineTaskMapUpdateModel[]": {
      "description": "Tasks",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/EventPipelineTaskMapUpdateModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EventPipelineTaskMapUpdateModel": {
      "description": "Value",
      "properties": {
        "eventPipelineTaskId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "EventPipelineTaskId"
        },
        "eventPipelineTaskMapId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "EventPipelineTaskMapId"
        },
        "eventPipelineTaskName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "EventPipelineTaskName"
        },
        "settings": {
          "$ref": "#/definitions/UpdateFieldValueOfSettingUpdateModel[]",
          "description": "Settings"
        },
        "sortOrder": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "SortOrder"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfEventPipelineTriggerUpdateModel[]": {
      "description": "Triggers",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/EventPipelineTriggerUpdateModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EventPipelineTriggerUpdateModel": {
      "description": "Value",
      "properties": {
        "eventActionId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "EventActionId"
        }
      },
      "type": "object"
    },
    "EventPipelineModel": {
      "description": "Event Pipeline",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "createdDate": {
          "description": "Event Pipeline Created Date",
          "type": "string",
          "format": "date-time"
        },
        "eventEntityTypeId": {
          "description": "Entity Type Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineDescription": {
          "description": "Event Pipeline Description",
          "type": "string"
        },
        "eventPipelineId": {
          "description": "Event Pipeline Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineName": {
          "description": "Event Pipeline Name",
          "type": "string"
        },
        "eventPipelinePolicyId": {
          "description": "Event Pipeline Policy Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyMapId": {
          "description": "Event Pipeline Policy Map Id",
          "type": "integer",
          "format": "int32"
        },
        "filterList": {
          "description": "Event Pipeline Filters",
          "items": {
            "$ref": "#/definitions/EventPipelineFilterModel"
          },
          "type": "array"
        },
        "isSystem": {
          "description": "Event pipeline used by the system",
          "type": "boolean"
        },
        "lastModifiedDate": {
          "description": "Event Pipeline Modified Date",
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedDisplayName": {
          "description": "Event Pipeline Last Modified Date",
          "type": "string"
        },
        "sortOrder": {
          "description": "Sort Order",
          "type": "integer",
          "format": "int32"
        },
        "taskList": {
          "description": "Event Pipeline Tasks",
          "items": {
            "$ref": "#/definitions/EventPipelineTaskModel"
          },
          "type": "array"
        },
        "triggers": {
          "description": "Event Pipeline Triggers",
          "items": {
            "$ref": "#/definitions/EventPipelineTriggerModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EventPipelineFilterModel": {
      "description": "Event Pipeline Filter",
      "properties": {
        "eventEntityTypeId": {
          "description": "Event Entity Type Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineFilterDescription": {
          "description": "Event Pipeline Filter Description",
          "type": "string"
        },
        "eventPipelineFilterDisplayName": {
          "description": "Event Pipeline Filter Display Name",
          "type": "string"
        },
        "eventPipelineFilterId": {
          "description": "Event Pipeline Filter Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineFilterMapId": {
          "description": "Event Pipeline Filter Map Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineFilterName": {
          "description": "Event Pipeline Filter Name",
          "type": "string"
        },
        "settings": {
          "description": "Settings",
          "items": {
            "$ref": "#/definitions/EventPipelineFilterSettingValueMapModel"
          },
          "type": "array"
        },
        "sortOrder": {
          "description": "Sort Order",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelineFilterSettingValueMapModel": {
      "description": "Event Pipeline Filter Setting Value Map",
      "properties": {
        "eventPipelineFilterMapId": {
          "description": "Event Pipeline Filter Map Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineFilterSettingValueMapId": {
          "description": "Event Pipeline Filter Setting Value Map Id",
          "type": "integer",
          "format": "int32"
        },
        "overrideDefault": {
          "description": "Whether to override the default value",
          "type": "boolean"
        },
        "setting": {
          "$ref": "#/definitions/SettingForDisplay",
          "description": "Setting"
        },
        "settingDisplay": {
          "description": "Setting Display",
          "type": "string"
        },
        "settingDisplayValue": {
          "description": "Setting Display Value",
          "type": "string"
        },
        "settingId": {
          "description": "Setting Id",
          "type": "integer",
          "format": "int32"
        },
        "settingValue": {
          "description": "Setting Value",
          "type": "string"
        },
        "usingDefault": {
          "description": "Whether or not to use the setting's default value.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SettingForDisplay": {
      "description": "Setting",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "canEdit": {
          "description": "CanEdit",
          "type": "boolean"
        },
        "canEditValue": {
          "description": "CanEditValue",
          "type": "boolean"
        },
        "childLoadSQL": {
          "description": "ChildLoadSQL",
          "type": "string"
        },
        "childSettings": {
          "description": "ChildSettings",
          "items": {
            "$ref": "#/definitions/Setting"
          },
          "type": "array"
        },
        "defaultValue": {
          "description": "DefaultValue",
          "type": "string"
        },
        "isVisible": {
          "description": "IsVisible",
          "type": "boolean"
        },
        "nameLocalizeKey": {
          "description": "NameLocalizeKey",
          "type": "string"
        },
        "parentSettingId": {
          "description": "ParentSettingId",
          "type": "integer",
          "format": "int32"
        },
        "regexValidation": {
          "description": "RegexValidation",
          "type": "string"
        },
        "settingId": {
          "description": "SettingId",
          "type": "integer",
          "format": "int32"
        },
        "settingName": {
          "description": "SettingName",
          "type": "string"
        },
        "settingSectionId": {
          "description": "SettingSectionId",
          "type": "integer",
          "format": "int32"
        },
        "settingType": {
          "$ref": "#/definitions/SettingType",
          "description": "SettingType"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "subSettingSectionId": {
          "description": "SubSettingSectionId",
          "type": "integer",
          "format": "int32"
        },
        "tooltipLocalizeKey": {
          "description": "TooltipLocalizeKey",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Setting": {
      "description": "ChildSettings",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "canEdit": {
          "description": "CanEdit",
          "type": "boolean"
        },
        "canEditValue": {
          "description": "CanEditValue",
          "type": "boolean"
        },
        "childLoadSQL": {
          "description": "ChildLoadSQL",
          "type": "string"
        },
        "defaultValue": {
          "description": "DefaultValue",
          "type": "string"
        },
        "isVisible": {
          "description": "IsVisible",
          "type": "boolean"
        },
        "nameLocalizeKey": {
          "description": "NameLocalizeKey",
          "type": "string"
        },
        "parentSettingId": {
          "description": "ParentSettingId",
          "type": "integer",
          "format": "int32"
        },
        "regexValidation": {
          "description": "RegexValidation",
          "type": "string"
        },
        "settingId": {
          "description": "SettingId",
          "type": "integer",
          "format": "int32"
        },
        "settingName": {
          "description": "SettingName",
          "type": "string"
        },
        "settingSectionId": {
          "description": "SettingSectionId",
          "type": "integer",
          "format": "int32"
        },
        "settingType": {
          "$ref": "#/definitions/SettingType",
          "description": "SettingType"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "subSettingSectionId": {
          "description": "SubSettingSectionId",
          "type": "integer",
          "format": "int32"
        },
        "tooltipLocalizeKey": {
          "description": "TooltipLocalizeKey",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SettingType": {
      "description": "SettingType",
      "properties": {},
      "type": "string",
      "enum": [
        "Default",
        "Integer",
        "String",
        "Boolean",
        "StringArray",
        "DropDown",
        "DropDownItem",
        "MultilineString",
        "IntegerArray"
      ]
    },
    "EventPipelineTaskModel": {
      "description": "Event Pipeline Task",
      "properties": {
        "eventEntityTypeId": {
          "description": "Event Entity Type Id",
          "type": "string"
        },
        "eventPipelineTaskDescription": {
          "description": "Event Pipeline Task Description",
          "type": "string"
        },
        "eventPipelineTaskDisplayName": {
          "description": "Event Pipeline Task Display Name",
          "type": "string"
        },
        "eventPipelineTaskId": {
          "description": "Event Pipeline Task Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTaskMapId": {
          "description": "Event Pipeline Task Map Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTaskName": {
          "description": "Event Pipeline Name",
          "type": "string"
        },
        "isMultiSelect": {
          "description": "Multiselect",
          "type": "boolean"
        },
        "settings": {
          "description": "Settings",
          "items": {
            "$ref": "#/definitions/EventPipelineTaskSettingValueMapModel"
          },
          "type": "array"
        },
        "sortOrder": {
          "description": "Sort ORder",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelineTaskSettingValueMapModel": {
      "description": "Event Pipeline Task Setting Value Map",
      "properties": {
        "eventPipelineTaskMapId": {
          "description": "Event Pipeline Task Map Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTaskSettingValueMapId": {
          "description": "Event Pipeline Task Setting Value Map Id",
          "type": "integer",
          "format": "int32"
        },
        "overrideDefault": {
          "description": "Override Default",
          "type": "boolean"
        },
        "setting": {
          "$ref": "#/definitions/SettingForDisplay",
          "description": "Setting"
        },
        "settingDisplay": {
          "description": "Setting Display",
          "type": "string"
        },
        "settingDisplayValue": {
          "description": "Setting Display Value",
          "type": "string"
        },
        "settingId": {
          "description": "Setting Id",
          "type": "integer",
          "format": "int32"
        },
        "settingValue": {
          "description": "Setting Value",
          "type": "string"
        },
        "usingDefault": {
          "description": "Whether or not to use the setting's default value.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "EventPipelineTriggerModel": {
      "description": "Event Pipeline Trigger",
      "properties": {
        "entityTypeDisplayName": {
          "description": "Entity Type Display Name",
          "type": "string"
        },
        "eventActionId": {
          "description": "Event Action Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineId": {
          "description": "Event Pipeline Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTriggerId": {
          "description": "Event Pipeline Trigger Id",
          "type": "integer",
          "format": "int32"
        },
        "triggerDisplayName": {
          "description": "Trigger Display Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventPipelineUpdateArgs": {
      "description": "EventPipelineUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/EventPipelineUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "EventPipelineActivateUpdateArgs": {
      "description": "EventPipelineActivateUpdateArgs",
      "properties": {
        "activate": {
          "description": "Activate",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "EventPipelineOrderUpdateArgs": {
      "description": "EventPipelineOrderUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/EventPipelineOrderUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "EventPipelineOrderUpdateModel": {
      "description": "Data",
      "properties": {
        "eventPipelinePolicyId": {
          "description": "EventPipelinePolicyId",
          "type": "integer",
          "format": "int32"
        },
        "sortOrder": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "SortOrder"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyMap": {
      "description": "EventPipelinePolicyMap[]",
      "properties": {
        "eventPipelineId": {
          "description": "EventPipelineId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyId": {
          "description": "EventPipelinePolicyId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyMapId": {
          "description": "EventPipelinePolicyMapId",
          "type": "integer",
          "format": "int32"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelineTriggerSummary": {
      "description": "EventPipelineTriggerSummary[]",
      "properties": {
        "entityTypeDisplayName": {
          "description": "Entity Type Display Name",
          "type": "string"
        },
        "eventActionId": {
          "description": "Event Action ID ID",
          "type": "integer",
          "format": "int32"
        },
        "eventEntityTypeId": {
          "description": "Event Entity Type ID",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineId": {
          "description": "Event Pipeline ID",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTriggerId": {
          "description": "Event Pipeline Trigger ID",
          "type": "integer",
          "format": "int32"
        },
        "triggerDisplayName": {
          "description": "Trigger Display Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfEventPipelineViewModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/EventPipelineViewModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelineViewModel": {
      "description": "Query results",
      "properties": {
        "active": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Active"
        },
        "createdDate": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfDateTime",
          "description": "CreatedDate"
        },
        "eventEntityTypeId": {
          "description": "EventEntityTypeId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineDescription": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "EventPipelineDescription"
        },
        "eventPipelineId": {
          "description": "EventPipelineId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "EventPipelineName"
        },
        "eventPipelinePolicyId": {
          "description": "EventPipelinePolicyId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyMapId": {
          "description": "EventPipelinePolicyMapId",
          "type": "integer",
          "format": "int32"
        },
        "filterList": {
          "description": "FilterList",
          "items": {
            "$ref": "#/definitions/EventPipelineFilterViewModel"
          },
          "type": "array"
        },
        "isSystem": {
          "description": "IsSystem",
          "type": "boolean"
        },
        "lastModifiedDate": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfDateTime",
          "description": "LastModifiedDate"
        },
        "lastModifiedDisplayName": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "LastModifiedDisplayName"
        },
        "sortOrder": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "SortOrder"
        },
        "taskList": {
          "description": "TaskList",
          "items": {
            "$ref": "#/definitions/EventPipelineTaskViewModel"
          },
          "type": "array"
        },
        "triggers": {
          "description": "Triggers",
          "items": {
            "$ref": "#/definitions/EventPipelineTriggerViewModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EventPipelineFilterViewModel": {
      "description": "FilterList",
      "properties": {
        "eventEntityTypeId": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfOptionalInt32",
          "description": "EventEntityTypeId"
        },
        "eventPipelineFilterDescription": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "EventPipelineFilterDescription"
        },
        "eventPipelineFilterDisplayName": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "EventPipelineFilterDisplayName"
        },
        "eventPipelineFilterId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "EventPipelineFilterId"
        },
        "eventPipelineFilterMapId": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfInt32",
          "description": "EventPipelineFilterMapId"
        },
        "eventPipelineFilterName": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "EventPipelineFilterName"
        },
        "settings": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfEventPipelineFilterSettingValueMapViewModel[]",
          "description": "Settings"
        },
        "sortOrder": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfInt32",
          "description": "SortOrder"
        }
      },
      "type": "object"
    },
    "ViewFieldValueReadOnlyOfOptionalInt32": {
      "description": "EventEntityTypeId",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ViewFieldValueReadOnlyOfEventPipelineFilterSettingValueMapViewModel[]": {
      "description": "Settings",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/EventPipelineFilterSettingValueMapViewModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EventPipelineFilterSettingValueMapViewModel": {
      "description": "Value",
      "properties": {
        "eventPipelineFilterMapId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "EventPipelineFilterMapId"
        },
        "eventPipelineFilterSettingValueMapId": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfOptionalInt32",
          "description": "EventPipelineFilterSettingValueMapId"
        },
        "overrideDefault": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "OverrideDefault"
        },
        "setting": {
          "$ref": "#/definitions/ViewFieldValueOfSettingForDisplay",
          "description": "Setting"
        },
        "settingDisplay": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "SettingDisplay"
        },
        "settingDisplayValue": {
          "description": "SettingDisplayValue",
          "type": "string"
        },
        "settingId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "SettingId"
        },
        "settingValue": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SettingValue"
        },
        "usingDefault": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "UsingDefault"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfSettingForDisplay": {
      "description": "Setting",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/SettingForDisplay",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "EventPipelineTaskViewModel": {
      "description": "TaskList",
      "properties": {
        "eventEntityTypeId": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfOptionalEventEntityTypeEnum",
          "description": "EventEntityTypeId"
        },
        "eventPipelineTaskDescription": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "EventPipelineTaskDescription"
        },
        "eventPipelineTaskDisplayName": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "EventPipelineTaskDisplayName"
        },
        "eventPipelineTaskId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "EventPipelineTaskId"
        },
        "eventPipelineTaskMapId": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfInt32",
          "description": "EventPipelineTaskMapId"
        },
        "eventPipelineTaskName": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "EventPipelineTaskName"
        },
        "isMultiSelect": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfBoolean",
          "description": "IsMultiSelect"
        },
        "settings": {
          "$ref": "#/definitions/ViewFieldValueOfEventPipelineTaskSettingValueMapViewModel[]",
          "description": "Settings"
        },
        "sortOrder": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "SortOrder"
        }
      },
      "type": "object"
    },
    "ViewFieldValueReadOnlyOfOptionalEventEntityTypeEnum": {
      "description": "EventEntityTypeId",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueReadOnlyOfBoolean": {
      "description": "IsMultiSelect",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfEventPipelineTaskSettingValueMapViewModel[]": {
      "description": "Settings",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/EventPipelineTaskSettingValueMapViewModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EventPipelineTaskSettingValueMapViewModel": {
      "description": "Value",
      "properties": {
        "eventPipelineTaskMapId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "EventPipelineTaskMapId"
        },
        "eventPipelineTaskSettingValueMapId": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfOptionalInt32",
          "description": "EventPipelineTaskSettingValueMapId"
        },
        "overrideDefault": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "OverrideDefault"
        },
        "setting": {
          "$ref": "#/definitions/ViewFieldValueOfSettingForDisplay",
          "description": "Setting"
        },
        "settingDisplay": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "SettingDisplay"
        },
        "settingDisplayValue": {
          "description": "SettingDisplayValue",
          "type": "string"
        },
        "settingId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "SettingId"
        },
        "settingValue": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SettingValue"
        },
        "usingDefault": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "UsingDefault"
        }
      },
      "type": "object"
    },
    "EventPipelineTriggerViewModel": {
      "description": "Triggers",
      "properties": {
        "entityTypeDisplayName": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "EntityTypeDisplayName"
        },
        "eventActionId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "EventActionId"
        },
        "eventEntityTypeId": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfOptionalEventEntityTypeEnum",
          "description": "EventEntityTypeId"
        },
        "eventPipelineId": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfInt32",
          "description": "EventPipelineId"
        },
        "eventPipelineTriggerId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "EventPipelineTriggerId"
        },
        "triggerDisplayName": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "TriggerDisplayName"
        }
      },
      "type": "object"
    },
    "PagingOfEventPipelinePolicyRunActivityViewModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/EventPipelinePolicyRunActivityViewModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyRunActivityViewModel": {
      "description": "Query results",
      "properties": {
        "duration": {
          "description": "Duration",
          "type": "string"
        },
        "endDateTime": {
          "description": "EndDateTime",
          "type": "string",
          "format": "date-time"
        },
        "eventAction": {
          "description": "EventAction",
          "type": "string"
        },
        "eventEntityType": {
          "description": "EventEntityType",
          "type": "string"
        },
        "eventPipelineDescription": {
          "description": "EventPipelineDescription",
          "type": "string"
        },
        "eventPipelineId": {
          "description": "EventPipelineId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineName": {
          "description": "EventPipelineName",
          "type": "string"
        },
        "eventPipelinePolicyRunId": {
          "description": "EventPipelinePolicyRunId",
          "type": "string",
          "format": "uuid"
        },
        "eventPipelineTaskDescription": {
          "description": "EventPipelineTaskDescription",
          "type": "string"
        },
        "eventPipelineTaskId": {
          "description": "EventPipelineTaskId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTaskName": {
          "description": "EventPipelineTaskName",
          "type": "string"
        },
        "itemId": {
          "description": "ItemId",
          "type": "integer",
          "format": "int32"
        },
        "itemName": {
          "description": "ItemName",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        },
        "queuedDateTime": {
          "description": "QueuedDateTime",
          "type": "string",
          "format": "date-time"
        },
        "runOrder": {
          "description": "RunOrder",
          "type": "integer",
          "format": "int32"
        },
        "startDateTime": {
          "description": "StartDateTime",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/EventPipelineStatus",
          "description": "Status"
        }
      },
      "type": "object"
    },
    "EventPipelineStatus": {
      "description": "Status",
      "properties": {},
      "type": "string",
      "enum": [
        "Failed",
        "Success",
        "Skipped",
        "Processing",
        "Pending",
        "Scheduled"
      ]
    },
    "EventPipeline": {
      "description": "EventPipeline",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "createdDate": {
          "description": "CreatedDate",
          "type": "string",
          "format": "date-time"
        },
        "eventEntityTypeId": {
          "description": "EventEntityTypeId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineDescription": {
          "description": "EventPipelineDescription",
          "type": "string"
        },
        "eventPipelineId": {
          "description": "EventPipelineId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineName": {
          "description": "EventPipelineName",
          "type": "string"
        },
        "eventPipelinePolicyId": {
          "description": "EventPipelinePolicyId",
          "type": "integer",
          "format": "int32"
        },
        "isSystem": {
          "description": "IsSystem",
          "type": "boolean"
        },
        "lastModifiedDate": {
          "description": "LastModifiedDate",
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedUser": {
          "description": "LastModifiedUser",
          "type": "string"
        },
        "lastModifiedUserId": {
          "description": "LastModifiedUserId",
          "type": "integer",
          "format": "int32"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfEventPipelineSummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/EventPipelineSummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelineSummaryModel": {
      "description": "Query results",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "createdDate": {
          "description": "Event Pipeline Created Date",
          "type": "string",
          "format": "date-time"
        },
        "eventEntityTypeId": {
          "description": "Entity Type Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineDescription": {
          "description": "Event Pipeline Description",
          "type": "string"
        },
        "eventPipelineId": {
          "description": "Event Pipeline Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineName": {
          "description": "Event Pipeline Name",
          "type": "string"
        },
        "eventPipelinePolicyId": {
          "description": "Event Pipeline Policy Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyMapId": {
          "description": "Event Pipeline Policy Map Id",
          "type": "integer",
          "format": "int32"
        },
        "isSystem": {
          "description": "Event pipeline used by the system",
          "type": "boolean"
        },
        "lastModifiedDate": {
          "description": "Event Pipeline Modified Date",
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedDisplayName": {
          "description": "Event Pipeline Last Modified Date",
          "type": "string"
        },
        "sortOrder": {
          "description": "Sort Order",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelineTrigger": {
      "description": "EventPipelineTrigger",
      "properties": {
        "entityTypeDisplayName": {
          "description": "EntityTypeDisplayName",
          "type": "string"
        },
        "eventActionId": {
          "description": "EventActionId",
          "type": "integer",
          "format": "int32"
        },
        "eventActionName": {
          "description": "EventActionName",
          "type": "string"
        },
        "eventEntityTypeId": {
          "description": "EventEntityTypeId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineId": {
          "description": "EventPipelineId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTriggerId": {
          "description": "EventPipelineTriggerId",
          "type": "integer",
          "format": "int32"
        },
        "triggerDisplayName": {
          "description": "TriggerDisplayName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfEventPipelinePolicyAuditSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/EventPipelinePolicyAuditSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyAuditSummary": {
      "description": "Query results",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "auditId": {
          "description": "Audit ID",
          "type": "integer",
          "format": "int32"
        },
        "date": {
          "description": "Date",
          "type": "string"
        },
        "isPolicy": {
          "description": "Is Policy",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        },
        "userDisplayName": {
          "description": "User Display Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyCreateArgs": {
      "description": "EventPipelinePolicyCreateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/EventPipelinePolicyCreateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyCreateModel": {
      "description": "Data",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Active"
        },
        "eventEntityTypeId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "EventEntityTypeId"
        },
        "eventPipelinePolicyDescription": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "EventPipelinePolicyDescription"
        },
        "eventPipelinePolicyName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "EventPipelinePolicyName"
        },
        "externalInstanceId": {
          "description": "ExternalInstanceId",
          "type": "string",
          "format": "uuid"
        },
        "isSystem": {
          "description": "IsSystem",
          "type": "boolean"
        },
        "pipelines": {
          "$ref": "#/definitions/UpdateFieldValueOfEventPipelineUpdateModel[]",
          "description": "Pipelines"
        },
        "reuseExistingPipelines": {
          "description": "ReuseExistingPipelines",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfEventPipelineUpdateModel[]": {
      "description": "Pipelines",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/EventPipelineUpdateModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyModel": {
      "description": "Event Pipeline Policy",
      "properties": {
        "active": {
          "description": "If the Policy is Active",
          "type": "boolean"
        },
        "createdDate": {
          "description": "The Date the Policy was created",
          "type": "string",
          "format": "date-time"
        },
        "eventEntityTypeId": {
          "description": "Event Pipeline Type Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyDescription": {
          "description": "Event Pipeline Policy Description",
          "type": "string"
        },
        "eventPipelinePolicyId": {
          "description": "Event Pipeline Policy Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyName": {
          "description": "Event Pipeline Policy Name",
          "type": "string"
        },
        "isSystem": {
          "description": "Event pipeline policy used by the system",
          "type": "boolean"
        },
        "lastModifiedDate": {
          "description": "The Date the Policy was last modified",
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedDisplayName": {
          "description": "The display name of the user who last modified the Policy",
          "type": "string"
        },
        "sortOrder": {
          "description": "Sort Order",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyAddPipelineArgs": {
      "description": "EventPipelinePolicyAddPipelineArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/EventPipelinePolicyAddPipelineModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyAddPipelineModel": {
      "description": "Data",
      "properties": {
        "eventPipelineId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "EventPipelineId"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyMapModel": {
      "description": "Event Pipeline Policy Map",
      "properties": {
        "eventPipelineId": {
          "description": "Event Pipeline Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyId": {
          "description": "Event Pipeline Policy Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyMapId": {
          "description": "Event Pipeline Policy Map Id",
          "type": "integer",
          "format": "int32"
        },
        "sortOrder": {
          "description": "Sort Order",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyUpdateArgs": {
      "description": "EventPipelinePolicyUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/EventPipelinePolicyUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyUpdateModel": {
      "description": "Data",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Active"
        },
        "eventPipelinePolicyDescription": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "EventPipelinePolicyDescription"
        },
        "eventPipelinePolicyName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "EventPipelinePolicyName"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyActivateArgs": {
      "description": "EventPipelinePolicyActivateArgs",
      "properties": {
        "activate": {
          "description": "Activate",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "FolderSimpleViewModel": {
      "description": "FolderSimpleViewModel[]",
      "properties": {
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "path": {
          "description": "Path",
          "type": "string"
        },
        "restricted": {
          "description": "Restricted",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyFolderMapUpdateArgs": {
      "description": "EventPipelinePolicyFolderMapUpdateArgs",
      "properties": {
        "data": {
          "description": "Data",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserGroupSearchResultModel": {
      "description": "UserGroupSearchResultModel[]",
      "properties": {
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "domainName": {
          "description": "DomainName",
          "type": "string"
        },
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyGroupMapUpdateArgs": {
      "description": "EventPipelinePolicyGroupMapUpdateArgs",
      "properties": {
        "data": {
          "description": "Data",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicySortOrderUpdateArgs": {
      "description": "EventPipelinePolicySortOrderUpdateArgs",
      "properties": {
        "newSortOrder": {
          "description": "NewSortOrder",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfSecretPolicyViewModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretPolicyViewModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretPolicyViewModel": {
      "description": "Query results",
      "properties": {
        "active": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Active"
        },
        "secretPolicyDescription": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SecretPolicyDescription"
        },
        "secretPolicyId": {
          "description": "SecretPolicyId",
          "type": "integer",
          "format": "int32"
        },
        "secretPolicyName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SecretPolicyName"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicyImportArgs": {
      "description": "EventPipelinePolicyImportArgs",
      "properties": {
        "data": {
          "description": "Data",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfEventPipelinePolicySummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/EventPipelinePolicySummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelinePolicySummary": {
      "description": "Query results",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "createdDate": {
          "description": "Created Date",
          "type": "string",
          "format": "date-time"
        },
        "eventEntityTypeId": {
          "description": "Event Entity Type ID",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyDescription": {
          "description": "Event Pipeline Policy Description",
          "type": "string"
        },
        "eventPipelinePolicyId": {
          "description": "Event Pipeline Policy ID",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyName": {
          "description": "Event Pipeline Policy Name",
          "type": "string"
        },
        "isSystem": {
          "description": "Is System",
          "type": "boolean"
        },
        "lastModifiedDate": {
          "description": "Last Modified Date",
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedDisplayName": {
          "description": "Last Modified Display Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfEventPipelineRunViewModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/EventPipelineRunViewModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelineRunViewModel": {
      "description": "Query results",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "duration": {
          "description": "Duration",
          "type": "string"
        },
        "endDate": {
          "description": "EndDate",
          "type": "string",
          "format": "date-time"
        },
        "entityTypeName": {
          "description": "EntityTypeName",
          "type": "string"
        },
        "eventDateTime": {
          "description": "EventDateTime",
          "type": "string",
          "format": "date-time"
        },
        "eventDetails": {
          "description": "EventDetails",
          "type": "string"
        },
        "eventName": {
          "description": "EventName",
          "type": "string"
        },
        "eventPipelineId": {
          "description": "EventPipelineId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelinePolicyRunId": {
          "description": "EventPipelinePolicyRunId",
          "type": "string",
          "format": "uuid"
        },
        "itemId": {
          "description": "ItemId",
          "type": "integer",
          "format": "int32"
        },
        "itemName": {
          "description": "ItemName",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "queuedDate": {
          "description": "QueuedDate",
          "type": "string",
          "format": "date-time"
        },
        "startDate": {
          "description": "StartDate",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/EventPipelineStatus",
          "description": "Status"
        }
      },
      "type": "object"
    },
    "EventPipelineFilterSummary": {
      "description": "EventPipelineFilterSummary[]",
      "properties": {
        "eventEntityTypeId": {
          "description": "Event Entity Type ID",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineFilterDescription": {
          "description": "Event Pipeline Filter Description",
          "type": "string"
        },
        "eventPipelineFilterDisplayName": {
          "description": "Event Pipeline Filter Display Name",
          "type": "string"
        },
        "eventPipelineFilterId": {
          "description": "Event Pipeline Filter Id",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineFilterMapId": {
          "description": "Event Pipeline Filter Map ID",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineFilterName": {
          "description": "Event Pipeline Filter Name",
          "type": "string"
        },
        "sortOrder": {
          "description": "Sort Order",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelineFilterSettingMapSummary": {
      "description": "EventPipelineFilterSettingMapSummary[]",
      "properties": {
        "eventPipelineFilterId": {
          "description": "Event Pipeline Filter ID",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineFilterSettingMapId": {
          "description": "Event Pipeline Filter Setting Map ID",
          "type": "integer",
          "format": "int32"
        },
        "setting": {
          "$ref": "#/definitions/SettingForDisplay",
          "description": "Setting"
        },
        "settingDisplay": {
          "description": "Setting Display",
          "type": "string"
        },
        "settingId": {
          "description": "Setting ID",
          "type": "integer",
          "format": "int32"
        },
        "settingValue": {
          "description": "Setting Value",
          "type": "string"
        },
        "sortOrder": {
          "description": "Sort Order",
          "type": "integer",
          "format": "int32"
        },
        "usingDefault": {
          "description": "Using Default",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfEventPipelineTask": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/EventPipelineTask"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelineTask": {
      "description": "Query results",
      "properties": {
        "eventEntityTypeId": {
          "description": "EventEntityTypeId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTaskDescription": {
          "description": "EventPipelineTaskDescription",
          "type": "string"
        },
        "eventPipelineTaskId": {
          "description": "EventPipelineTaskId",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTaskName": {
          "description": "EventPipelineTaskName",
          "type": "string"
        },
        "isMultiSelect": {
          "description": "IsMultiSelect",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "EventPipelineTaskSummary": {
      "description": "EventPipelineTaskSummary[]",
      "properties": {
        "eventEntityTypeId": {
          "description": "Event Entity Type ID",
          "type": "string"
        },
        "eventPipelineTaskDescription": {
          "description": "Event Pipeline Task Description",
          "type": "string"
        },
        "eventPipelineTaskDisplayName": {
          "description": "Event Pipeline Task Display Name",
          "type": "string"
        },
        "eventPipelineTaskId": {
          "description": "Event Pipeline Task ID",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTaskMapId": {
          "description": "Event Pipeline Task Map ID",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTaskName": {
          "description": "Event Pipeline Task Name",
          "type": "string"
        },
        "isMultiSelect": {
          "description": "Is Multi Select",
          "type": "boolean"
        },
        "sortOrder": {
          "description": "Sort Order",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EventPipelineTaskSettingMapSummary": {
      "description": "EventPipelineTaskSettingMapSummary[]",
      "properties": {
        "eventPipelineTaskId": {
          "description": "Event Pipeline Task ID",
          "type": "integer",
          "format": "int32"
        },
        "eventPipelineTaskSettingMapId": {
          "description": "Event Pipeline Task Setting Map ID",
          "type": "integer",
          "format": "int32"
        },
        "setting": {
          "$ref": "#/definitions/SettingForDisplay",
          "description": "Setting"
        },
        "settingDisplay": {
          "description": "Setting Display",
          "type": "string"
        },
        "settingId": {
          "description": "Setting ID",
          "type": "integer",
          "format": "int32"
        },
        "settingValue": {
          "description": "Setting Value",
          "type": "string"
        },
        "sortOrder": {
          "description": "Event Pipeline Sort Order",
          "type": "integer",
          "format": "int32"
        },
        "usingDefault": {
          "description": "Using Default",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RegexValuesSummary": {
      "description": "Regex Values Summary",
      "properties": {
        "regexList": {
          "description": "List of Regex values on the Secret, mapped to the Extended Field",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "FolderPatchArgs": {
      "description": "FolderPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/FolderPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "FolderPatchModel": {
      "description": "Data",
      "properties": {
        "allowedTemplates": {
          "description": "AllowedTemplates",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "allowRemoveOwner": {
          "description": "AllowRemoveOwner",
          "type": "boolean"
        },
        "enableInheritPermissions": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "EnableInheritPermissions"
        },
        "enableInheritSecretPolicy": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "EnableInheritSecretPolicy"
        },
        "folderName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "FolderName"
        },
        "permissons": {
          "description": "Permissons",
          "items": {
            "$ref": "#/definitions/FolderPermissionModel"
          },
          "type": "array"
        },
        "secretPolicy": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "SecretPolicy"
        }
      },
      "type": "object"
    },
    "FolderPermissionModel": {
      "description": "Permissons",
      "properties": {
        "folderAccessRoleId": {
          "description": "FolderAccessRoleId",
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        },
        "secretAccessRoleId": {
          "description": "SecretAccessRoleId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "FolderBasicModel": {
      "description": "FolderBasicModel",
      "properties": {
        "allowedTemplates": {
          "description": "Allowed Templates",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "enableInheritPermissions": {
          "description": "Should the folder inherit permissions from the parent folder",
          "type": "boolean"
        },
        "enableInheritSecretPolicy": {
          "description": "Should the folder inherit the secret policy from the parent folder",
          "type": "boolean"
        },
        "folderName": {
          "description": "The dispay name for the folder",
          "type": "string"
        },
        "hasEdit": {
          "description": "If the user can edit the folder",
          "type": "boolean"
        },
        "hasOwner": {
          "description": "If the user owns the folder",
          "type": "boolean"
        },
        "isPersonalFolder": {
          "description": "Whether or not this is a personal folder",
          "type": "boolean"
        },
        "parentFolderId": {
          "description": "The ID of the parent folder",
          "type": "integer",
          "format": "int32"
        },
        "parentFolderPolicyName": {
          "description": "Policy name on the parent folder",
          "type": "string"
        },
        "secretPolicies": {
          "description": "SecretPolicies",
          "items": {
            "$ref": "#/definitions/SecretPolicyModel"
          },
          "type": "array"
        },
        "secretPolicy": {
          "description": "The secret policy ID that is assigned to the folder",
          "type": "integer",
          "format": "int32"
        },
        "secretTemplates": {
          "description": "Secret Templates",
          "items": {
            "$ref": "#/definitions/TemplateViewModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SecretPolicyModel": {
      "description": "SecretPolicies",
      "properties": {
        "active": {
          "description": "Whether or not the Secret Policy is Active",
          "type": "boolean"
        },
        "secretPolicyDescription": {
          "description": "The Description of the Secret Policy",
          "type": "string"
        },
        "secretPolicyId": {
          "description": "The Id of the Secret Policy",
          "type": "integer",
          "format": "int32"
        },
        "secretPolicyName": {
          "description": "The Name of the Secret Policy",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TemplateViewModel": {
      "description": "Template View Model",
      "properties": {
        "id": {
          "description": "Template Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Template Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FolderDetailViewModel": {
      "description": "FolderDetailViewModel",
      "properties": {
        "actions": {
          "description": "Actions",
          "items": {
            "$ref": "#/definitions/FolderDetailActionType"
          },
          "type": "array"
        },
        "allowedTemplates": {
          "description": "AllowedTemplates",
          "items": {
            "$ref": "#/definitions/TemplateViewModel"
          },
          "type": "array"
        },
        "folderWarning": {
          "description": "FolderWarning",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FolderDetailActionType": {
      "description": "Actions",
      "properties": {},
      "type": "string",
      "enum": [
        "CreateSubfolder",
        "EditFolder",
        "AddSecret",
        "DeleteFolder",
        "MoveFolder"
      ]
    },
    "PagingOfFolderPermissionSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/FolderPermissionSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "FolderPermissionSummary": {
      "description": "Folder permission summary",
      "properties": {
        "folderAccessRoleId": {
          "description": "Role ID granted on the folder",
          "type": "integer",
          "format": "int32"
        },
        "folderAccessRoleName": {
          "description": "Role name granted on the folder",
          "type": "string"
        },
        "folderId": {
          "description": "Folder ID",
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "description": "Group ID having permissions on the folder",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "Group name having permissions on the folder",
          "type": "string"
        },
        "id": {
          "description": "Folder permission ID",
          "type": "integer",
          "format": "int32"
        },
        "knownAs": {
          "description": "KnownAs",
          "type": "string"
        },
        "secretAccessRoleId": {
          "description": "Role ID granted on secrets in the folder",
          "type": "integer",
          "format": "int32"
        },
        "secretAccessRoleName": {
          "description": "Role name granted on secrets in the folder",
          "type": "string"
        },
        "userId": {
          "description": "User ID having permissions on the folder",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User name having permissions on the folder",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FolderPermissionCreateArgs": {
      "description": "FolderPermissionCreateArgs",
      "properties": {
        "breakInheritance": {
          "description": "Allow updating of inherited permissions",
          "type": "boolean",
          "default": true
        },
        "folderAccessRoleName": {
          "description": "Role to grant on the folder (View, Edit, Add Secret, Owner)",
          "type": "string"
        },
        "folderId": {
          "description": "Folder on which to grant permissions",
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "description": "Group to receive permissions",
          "type": "integer",
          "format": "int32"
        },
        "secretAccessRoleName": {
          "description": "Role to grant on secrets in the folder (View, Edit, List, Owner)",
          "type": "string"
        },
        "userId": {
          "description": "User to receive permissions",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "FolderPermissionUpdateArgs": {
      "description": "Folder permission update options",
      "required": [
        "id",
        "folderId",
        "folderAccessRoleName"
      ],
      "properties": {
        "breakInheritance": {
          "description": "Allow updating of inherited permissions",
          "type": "boolean",
          "default": true
        },
        "folderAccessRoleName": {
          "description": "Role to grant on the folder (View, Edit, Add Secret, Owner)",
          "type": "string"
        },
        "folderId": {
          "description": "Folder ID",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "Folder permission ID. Must match ID in path",
          "type": "integer",
          "format": "int32"
        },
        "secretAccessRoleName": {
          "description": "Role to grant on secrets in the folder (View, Edit, List, Owner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfFolderSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/FolderSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "FolderSummary": {
      "description": "Representation of a secret folder object",
      "properties": {
        "folderName": {
          "description": "Folder name",
          "type": "string"
        },
        "folderPath": {
          "description": "Folder path",
          "type": "string"
        },
        "folderTypeId": {
          "description": "Folder type ID",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "Folder ID",
          "type": "integer",
          "format": "int32"
        },
        "inheritPermissions": {
          "description": "Whether the folder inherits permissions from its parent",
          "type": "boolean"
        },
        "inheritSecretPolicy": {
          "description": "Whether the folder inherits the secret policy",
          "type": "boolean"
        },
        "parentFolderId": {
          "description": "Parent folder ID",
          "type": "integer",
          "format": "int32"
        },
        "secretPolicyId": {
          "description": "Secret policy ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "FolderCreateArgs": {
      "description": "Available options for creating a secret folder",
      "required": [
        "folderName",
        "folderTypeId",
        "parentFolderId"
      ],
      "properties": {
        "folderName": {
          "description": "Folder name",
          "type": "string"
        },
        "folderTypeId": {
          "description": "Folder type ID",
          "type": "integer",
          "format": "int32",
          "maximum": 3,
          "minimum": 1
        },
        "inheritPermissions": {
          "description": "Whether the folder should inherit permissions from its parent (default: true)",
          "type": "boolean"
        },
        "inheritSecretPolicy": {
          "description": "Whether the folder should inherit the secret policy.  Defaults to true unless creating a root folder.",
          "type": "boolean"
        },
        "parentFolderId": {
          "description": "Parent folder ID",
          "type": "integer",
          "format": "int32",
          "minimum": -1
        },
        "secretPolicyId": {
          "description": "Secret policy ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "FolderModel": {
      "description": "Describes the properties of a secret folder",
      "properties": {
        "childFolders": {
          "description": "List of folders within this folder",
          "items": {
            "$ref": "#/definitions/IFolderModel"
          },
          "type": "array"
        },
        "folderName": {
          "description": "Folder name",
          "type": "string"
        },
        "folderPath": {
          "description": "Path of this folder",
          "type": "string"
        },
        "folderTypeId": {
          "description": "Folder type ID",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "Folder ID",
          "type": "integer",
          "format": "int32"
        },
        "inheritPermissions": {
          "description": "Whether the folder inherits permissions from its parent",
          "type": "boolean"
        },
        "inheritSecretPolicy": {
          "description": "Whether the folder inherits the secret policy",
          "type": "boolean"
        },
        "parentFolderId": {
          "description": "Parent folder ID",
          "type": "integer",
          "format": "int32"
        },
        "secretPolicyId": {
          "description": "Secret policy ID",
          "type": "integer",
          "format": "int32"
        },
        "secretTemplates": {
          "description": "List of templates that may be used to create secrets in this folder",
          "items": {
            "$ref": "#/definitions/ISecretTemplateSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "IFolderModel": {
      "description": "Describes the properties of a secret folder",
      "properties": {
        "childFolders": {
          "description": "List of folders within this folder",
          "items": {
            "$ref": "#/definitions/IFolderModel"
          },
          "type": "array"
        },
        "folderName": {
          "description": "Folder name",
          "type": "string"
        },
        "folderPath": {
          "description": "Path of this folder",
          "type": "string"
        },
        "folderTypeId": {
          "description": "Folder type ID",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "Folder ID",
          "type": "integer",
          "format": "int32"
        },
        "inheritPermissions": {
          "description": "Whether the folder inherits permissions from its parent",
          "type": "boolean"
        },
        "inheritSecretPolicy": {
          "description": "Whether the folder inherits the secret policy",
          "type": "boolean"
        },
        "parentFolderId": {
          "description": "Parent folder ID",
          "type": "integer",
          "format": "int32"
        },
        "secretPolicyId": {
          "description": "Secret policy ID",
          "type": "integer",
          "format": "int32"
        },
        "secretTemplates": {
          "description": "Secret templates associated with this folder",
          "items": {
            "$ref": "#/definitions/ISecretTemplateSummary"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ISecretTemplateSummary": {
      "description": "Secret templates associated with this folder",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "secretCount": {
          "description": "SecretCount",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "FolderUpdateArgs": {
      "description": "Available options for updating a secret folder",
      "required": [
        "id",
        "folderTypeId",
        "folderName"
      ],
      "properties": {
        "folderName": {
          "description": "Folder name",
          "type": "string"
        },
        "folderTypeId": {
          "description": "Folder type ID",
          "type": "integer",
          "format": "int32",
          "maximum": 3,
          "minimum": 1
        },
        "id": {
          "description": "Folder ID. Must match ID in path",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "inheritPermissions": {
          "description": "Whether the folder inherits permissions from its parent",
          "type": "boolean"
        },
        "inheritSecretPolicy": {
          "description": "Whether the folder inherits the secret policy",
          "type": "boolean"
        },
        "parentFolderId": {
          "description": "ID of parent folder",
          "type": "integer",
          "format": "int32",
          "minimum": -1
        },
        "secretPolicyId": {
          "description": "Secret policy ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfFolderAuditSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/FolderAuditSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "FolderAuditSummary": {
      "description": "Folder Audit Summary",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "auditFolderId": {
          "description": "Audit Folder Id",
          "type": "integer",
          "format": "int32"
        },
        "dateRecorded": {
          "description": "Date Recorded",
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "description": "Display Name",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FolderTemplateArgs": {
      "description": "Available options for associating a template to a folder",
      "required": [
        "folderId",
        "templateId"
      ],
      "properties": {
        "folderId": {
          "description": "Folder ID to associate. Must match ID in path",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "templateId": {
          "description": "Template ID to associate",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        }
      },
      "type": "object"
    },
    "FolderTemplateModel": {
      "description": "Describes the properties of a folder/template association",
      "properties": {
        "associated": {
          "description": "Whether the template is associated with the folder",
          "type": "boolean"
        },
        "folderId": {
          "description": "Folder ID",
          "type": "integer",
          "format": "int32"
        },
        "templateId": {
          "description": "Template ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfFolderLookup": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/FolderLookup"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "FolderLookup": {
      "description": "Simple folder representation",
      "properties": {
        "id": {
          "description": "Folder ID",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Folder name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfGroupSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/GroupSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "GroupSummary": {
      "description": "Group summary",
      "properties": {
        "created": {
          "description": "Created Date",
          "type": "string",
          "format": "date-time"
        },
        "domainGuid": {
          "description": "If this a synchronized group and the user requesting access has access this will be populated with the unique guid for the directory with a group search.",
          "type": "string"
        },
        "domainId": {
          "description": "Active Directory domain ID",
          "type": "integer",
          "format": "int32"
        },
        "domainName": {
          "description": "Active Directory domain name",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the group is active",
          "type": "boolean"
        },
        "id": {
          "description": "Group ID",
          "type": "integer",
          "format": "int32"
        },
        "memberCount": {
          "description": "Number of members in group",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "synchronized": {
          "description": "Whether the group is synchronized with Active Directory",
          "type": "boolean"
        },
        "synchronizeNow": {
          "description": "Active Directory Sync will only pull in members for domain groups that have this set to true.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GroupCreateArgs": {
      "description": "Group create options",
      "required": [
        "name",
        "enabled"
      ],
      "properties": {
        "adGuid": {
          "description": "The Object GUID of the Active Directory Group (Hexadecimal)",
          "type": "string"
        },
        "domainId": {
          "description": "Active Directory Domain ID",
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "description": "Whether the group is active",
          "type": "boolean"
        },
        "hasGroupOwners": {
          "description": "If true, the group is owned by specific other users/groups. If false, if it is owned by Group Administrators.",
          "type": "boolean"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "ownerGroupIds": {
          "description": "List of owner GroupIds. Only used if HasGroupOwners is true.",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "ownerGroupNames": {
          "description": "List of owner Group Names. Only used if HasGroupOwners is true.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ownerUserIds": {
          "description": "List of owner UserIds. Only used if HasGroupOwners is true.",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "ownerUserNames": {
          "description": "List of owner Usernames. Only used if HasGroupOwners is true.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "synchronized": {
          "description": "Whether the group is synchronized with Active Directory",
          "type": "boolean"
        },
        "synchronizeNow": {
          "description": "Active Directory Sync will only pull in members for domain groups that have this set to true.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GroupModel": {
      "description": "Group",
      "properties": {
        "adGuid": {
          "description": "Active Directory unique identifier",
          "type": "string"
        },
        "canEditMembers": {
          "description": "Whether you can edit the members of this group.  For example, Directory Services group members cannot be edited.  Populated on a single group get.",
          "type": "boolean"
        },
        "created": {
          "description": "Group created date",
          "type": "string",
          "format": "date-time"
        },
        "domainId": {
          "description": "Active Directory Domain ID",
          "type": "integer",
          "format": "int32"
        },
        "domainName": {
          "description": "Active Directory domain name",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the group is active",
          "type": "boolean"
        },
        "hasGroupOwners": {
          "description": "If true, the group is owned by specific other users/groups. If false, if it is owned by Group Administrators.",
          "type": "boolean"
        },
        "id": {
          "description": "Group ID",
          "type": "integer",
          "format": "int32"
        },
        "isEditable": {
          "description": "Whether you have permission to edit this group",
          "type": "boolean"
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "ownerGroups": {
          "$ref": "#/definitions/DictionaryOfInt32AndString",
          "description": "Hash of GroupIds and GroupNames that own this group. Only used if HasGroupOwners is true."
        },
        "owners": {
          "description": "The owners for the group, both users and groups",
          "items": {
            "$ref": "#/definitions/GroupOwner"
          },
          "type": "array"
        },
        "ownerUsers": {
          "$ref": "#/definitions/DictionaryOfInt32AndString",
          "description": "Hash of UserIds and UserNames that own this group. Only used if HasGroupOwners is true."
        },
        "synchronized": {
          "description": "Whether the group is synchronized with Active Directory",
          "type": "boolean"
        },
        "synchronizeNow": {
          "description": "Active Directory Sync will only pull in members for domain groups that have this set to true.",
          "type": "boolean"
        },
        "systemGroup": {
          "description": "Whether the group is an Active Directory system group",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DictionaryOfInt32AndString": {
      "description": "Hash of GroupIds and GroupNames that own this group. Only used if HasGroupOwners is true.",
      "properties": {},
      "type": "object"
    },
    "GroupOwner": {
      "description": "The owners for the group",
      "properties": {
        "groupId": {
          "description": "The group ID, or personal group ID in the case of a user",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The display name for the user or group",
          "type": "string"
        },
        "userId": {
          "description": "The user ID, or null in the case of a group",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "GroupPatchArgs": {
      "description": "GroupPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/GroupPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "GroupPatchModel": {
      "description": "Patch group",
      "properties": {
        "addedOwnerGroupIds": {
          "description": "Only the group IDs to add as owners, this take precedence over the OwnerGroupIds",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "enabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Is the group enabled"
        },
        "name": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Name of the group"
        },
        "ownerGroupIds": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32[]",
          "description": "The owner IDs"
        },
        "removedOwnerGroupIds": {
          "description": "Only the group IDs to removed as owners, this take precedence over the OwnerGroupIds",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfInt32[]": {
      "description": "The owner IDs",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GroupMemberAssignmentRequest": {
      "description": "GroupMemberAssignmentRequest",
      "properties": {
        "userIds": {
          "description": "This list will be the exact members for the group",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GroupMembershipAssignmentResponse": {
      "description": "GroupMembershipAssignmentResponse",
      "properties": {
        "success": {
          "description": "Success",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GroupUpdateArgs": {
      "description": "Group update options",
      "required": [
        "id"
      ],
      "properties": {
        "adGuid": {
          "description": "The Object GUID of the Active Directory Group (Hexadecimal)",
          "type": "string"
        },
        "domainId": {
          "description": "Active Directory Domain ID",
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "description": "Whether the group is active",
          "type": "boolean"
        },
        "hasGroupOwners": {
          "description": "If true, the group is owned by specific other users/groups. If false, if it is owned by Group Administrators.",
          "type": "boolean"
        },
        "id": {
          "description": "Group ID. Must match ID in path",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "name": {
          "description": "Group name",
          "type": "string"
        },
        "ownerGroupIds": {
          "description": "List of owner GroupIds. Only used if HasGroupOwners is true.",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "ownerGroupNames": {
          "description": "List of owner Group Names. Only used if HasGroupOwners is true.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ownerUserIds": {
          "description": "List of owner UserIds. Only used if HasGroupOwners is true.",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "ownerUserNames": {
          "description": "List of owner Usernames. Only used if HasGroupOwners is true.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "synchronized": {
          "description": "Whether the group is synchronized with Active Directory",
          "type": "boolean"
        },
        "synchronizeNow": {
          "description": "Active Directory Sync will only pull in members for domain groups that have this set to true.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfGroupIpAddressRestrictionModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/GroupIpAddressRestrictionModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "GroupIpAddressRestrictionModel": {
      "description": "Query results",
      "properties": {
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "GroupName",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "ipAddressRestrictionId": {
          "description": "IpAddressRestrictionId",
          "type": "integer",
          "format": "int32"
        },
        "ipAddressRestrictionName": {
          "description": "IpAddressRestrictionName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfRoleSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/RoleSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "RoleSummary": {
      "description": "Role Summary",
      "properties": {
        "name": {
          "description": "Role Name",
          "type": "string"
        },
        "roleId": {
          "description": "Role ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "RoleAssignments": {
      "description": "Roles to be assigned",
      "properties": {
        "roleIds": {
          "description": "Role IDs",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RoleChangeStatusModel": {
      "description": "The status of the Role change action.",
      "properties": {
        "success": {
          "description": "The success or failure of the user or group role action.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RoleRemovals": {
      "description": "Roles to be removed",
      "properties": {
        "roleIds": {
          "description": "Role IDs",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PagingOfGroupUserSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/GroupUserSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "GroupUserSummary": {
      "description": "Query results",
      "properties": {
        "displayName": {
          "description": "User display name",
          "type": "string"
        },
        "enabled": {
          "description": "User Enabled",
          "type": "boolean"
        },
        "groupDomainId": {
          "description": "Group Active Directory domain ID",
          "type": "integer",
          "format": "int32"
        },
        "groupDomainName": {
          "description": "Group Domain Name",
          "type": "string"
        },
        "groupId": {
          "description": "Group ID",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "Group name",
          "type": "string"
        },
        "userDomainId": {
          "description": "User Active Directory domain ID",
          "type": "integer",
          "format": "int32"
        },
        "userDomainName": {
          "description": "User Active Directory domain name",
          "type": "string"
        },
        "userId": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupUserCreateArgs": {
      "description": "Group memberhsip create options",
      "properties": {
        "userId": {
          "description": "User ID to add",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "GroupUserModel": {
      "description": "Represents a single user's membership in a group",
      "properties": {
        "groupDomainId": {
          "description": "Group Active Directory domain ID",
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "description": "Group ID",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "Group name",
          "type": "string"
        },
        "userDomainId": {
          "description": "User Active Directory domain ID",
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupMembershipPatchModel": {
      "description": "Patch group membership",
      "properties": {
        "addedUserIds": {
          "description": "Only the group IDs to add as members",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "removeUserIds": {
          "description": "Only the group IDs to removed as members",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GroupMembershipPatchResult": {
      "description": "GroupMembershipPatchResult",
      "properties": {
        "success": {
          "description": "Success of the patch",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfAdminAuditItem": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/AdminAuditItem"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "AdminAuditItem": {
      "description": "Audit entries for administration items",
      "properties": {
        "action": {
          "description": "The action that occurred",
          "type": "string"
        },
        "dateRecorded": {
          "description": "The date the audit entry was recorded",
          "type": "string",
          "format": "date-time"
        },
        "notes": {
          "description": "Extended information for the audit",
          "type": "string"
        },
        "userDisplayName": {
          "description": "Display Name for the user that made the audit",
          "type": "string"
        },
        "userId": {
          "description": "The user id of the user that made the audit",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfGroupLookup": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/GroupLookup"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "GroupLookup": {
      "description": "Simple group representation",
      "properties": {
        "id": {
          "description": "Group ID",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Group name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "HealthCheckModel": {
      "description": "HealthCheckModel",
      "properties": {
        "databaseHealthy": {
          "description": "DatabaseHealthy",
          "type": "boolean"
        },
        "databaseMismatch": {
          "description": "DatabaseMismatch",
          "type": "boolean"
        },
        "healthy": {
          "description": "Healthy",
          "type": "boolean"
        },
        "now": {
          "description": "Now",
          "type": "string",
          "format": "date-time"
        },
        "readOnlyMode": {
          "description": "ReadOnlyMode",
          "type": "boolean"
        },
        "serviceBusHealthy": {
          "description": "ServiceBusHealthy",
          "type": "boolean"
        },
        "storageAccountHealthy": {
          "description": "StorageAccountHealthy",
          "type": "boolean"
        },
        "utcNow": {
          "description": "UtcNow",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "PagingOfHsmConfigurationAuditViewModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/HsmConfigurationAuditViewModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "HsmConfigurationAuditViewModel": {
      "description": "Query results",
      "properties": {
        "action": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "Action"
        },
        "date": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "Date"
        },
        "displayName": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "DisplayName"
        },
        "hsmConfigurationAuditId": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfInt32",
          "description": "HsmConfigurationAuditId"
        },
        "notes": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "Notes"
        }
      },
      "type": "object"
    },
    "PagingOfIpAddressRestrictionSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/IpAddressRestrictionSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "IpAddressRestrictionSummary": {
      "description": "Query results",
      "properties": {
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "range": {
          "description": "Range",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IpAddressRestrictionCreateArgs": {
      "description": "IpAddressRestrictionCreateArgs",
      "required": [
        "name",
        "range"
      ],
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "range": {
          "description": "Range",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IpAddressRestrictionModel": {
      "description": "IpAddressRestrictionModel",
      "properties": {
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "range": {
          "description": "Range",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IpAddressRestrictionUpdateArgs": {
      "description": "IpAddressRestrictionUpdateArgs",
      "properties": {
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "range": {
          "description": "Range",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupIpAddressRestrictionCreateArgs": {
      "description": "GroupIpAddressRestrictionCreateArgs",
      "required": [
        "groupId",
        "ipAddressRestrictionId"
      ],
      "properties": {
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        },
        "ipAddressRestrictionId": {
          "description": "IpAddressRestrictionId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfUserIpAddressRestrictionModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/UserIpAddressRestrictionModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UserIpAddressRestrictionModel": {
      "description": "Query results",
      "properties": {
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "ipAddressRestrictionId": {
          "description": "IpAddressRestrictionId",
          "type": "integer",
          "format": "int32"
        },
        "ipAddressRestrictionName": {
          "description": "IpAddressRestrictionName",
          "type": "string"
        },
        "userDisplayName": {
          "description": "UserDisplayName",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "UserName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserIpAddressRestrictionCreateArgs": {
      "description": "UserIpAddressRestrictionCreateArgs",
      "required": [
        "userId",
        "ipAddressRestrictionId"
      ],
      "properties": {
        "ipAddressRestrictionId": {
          "description": "IpAddressRestrictionId",
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "KeyManagementConfigModel": {
      "description": "KeyManagementConfigModel",
      "properties": {
        "awsKmsAccessKeyId": {
          "description": "AwsKmsAccessKeyId",
          "type": "string"
        },
        "awsKmsKeyArn": {
          "description": "AwsKmsKeyArn",
          "type": "string"
        },
        "awsKmsKeyId": {
          "description": "AwsKmsKeyId",
          "type": "string"
        },
        "awsKmsSecretAccessKey": {
          "description": "AwsKmsSecretAccessKey",
          "type": "string"
        },
        "keyManagementConfigId": {
          "description": "KeyManagementConfigId",
          "type": "integer",
          "format": "int32"
        },
        "keyManagementTypeId": {
          "description": "KeyManagementTypeId",
          "type": "integer",
          "format": "int32"
        },
        "keyManagementTypeName": {
          "description": "KeyManagementTypeName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "KeyManagementConfigUpdateArgs": {
      "description": "KeyManagementConfigUpdateArgs",
      "properties": {
        "awsKmsAccessKeyId": {
          "description": "AwsKmsAccessKeyId",
          "type": "string"
        },
        "awsKmsKeyArn": {
          "description": "AwsKmsKeyArn",
          "type": "string"
        },
        "awsKmsKeyId": {
          "description": "AwsKmsKeyId",
          "type": "string"
        },
        "awsKmsSecretAccessKey": {
          "description": "AwsKmsSecretAccessKey",
          "type": "string"
        },
        "azureKeyVaultBaseUrl": {
          "description": "AzureKeyVaultBaseUrl",
          "type": "string"
        },
        "azureKeyVaultKeyName": {
          "description": "AzureKeyVaultKeyName",
          "type": "string"
        },
        "azureKeyVaultKeyVersion": {
          "description": "AzureKeyVaultKeyVersion",
          "type": "string"
        },
        "azureKeyVaultPrincipalId": {
          "description": "AzureKeyVaultPrincipalId",
          "type": "string"
        },
        "azureKeyVaultPrincipalSecret": {
          "description": "AzureKeyVaultPrincipalSecret",
          "type": "string"
        },
        "keyManagementTypeId": {
          "description": "KeyManagementTypeId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfLauncherAgentSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/LauncherAgentSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "LauncherAgentSummary": {
      "description": "Query results",
      "properties": {
        "active": {
          "description": "Whether or not the agent is running",
          "type": "boolean"
        },
        "collectionId": {
          "description": "The identifier of the collection to which this agent belongs",
          "type": "integer",
          "format": "int32"
        },
        "collectionName": {
          "description": "The name of the collection to which this agent belongs",
          "type": "string"
        },
        "collectionRecordKeystrokes": {
          "description": "Whether or not this agent will record keystrokes as the default setting for the Collection",
          "type": "boolean"
        },
        "collectionRecordStandaloneSessions": {
          "description": "Whether or not headless session recording is enabled as the default setting for the Collection",
          "type": "boolean"
        },
        "created": {
          "description": "The date the agent was installed",
          "type": "string",
          "format": "date-time"
        },
        "hostName": {
          "description": "Name of the computer which the agent is running on",
          "type": "string"
        },
        "id": {
          "description": "Unique ID for this agent",
          "type": "integer",
          "format": "int32"
        },
        "issue": {
          "description": "Any issues with this agent regarding its version and configuration",
          "type": "string"
        },
        "lastActivity": {
          "description": "The date the agent was last active",
          "type": "string",
          "format": "date-time"
        },
        "recordKeystrokes": {
          "description": "Whether or not this agent will record keystrokes, or using the Collection Default",
          "type": "boolean"
        },
        "recordStandaloneSessions": {
          "description": "Whether or not headless session recording is enabled, or using the Collection Default",
          "type": "boolean"
        },
        "version": {
          "description": "The version number currently installed",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LauncherAgentModel": {
      "description": "LauncherAgentModel",
      "properties": {
        "active": {
          "description": "Whether or not the agent is active",
          "type": "boolean"
        },
        "collectionId": {
          "description": "The ID of the collection the agent belongs to",
          "type": "integer",
          "format": "int32"
        },
        "collectionName": {
          "description": "The name of the collection the agent belongs to",
          "type": "string"
        },
        "created": {
          "description": "When the agent was created",
          "type": "string",
          "format": "date-time"
        },
        "hostName": {
          "description": "The hostname of the machine the agent is installed on",
          "type": "string"
        },
        "id": {
          "description": "The ID of the agent",
          "type": "integer",
          "format": "int32"
        },
        "lastActivity": {
          "description": "The date the agent was last active",
          "type": "string",
          "format": "date-time"
        },
        "recordKeystrokes": {
          "description": "Whether or not this agent will record keystrokes",
          "type": "boolean"
        },
        "recordStandaloneSessions": {
          "description": "Whether or not headless session recording is enabled",
          "type": "boolean"
        },
        "version": {
          "description": "The version number currently installed",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LauncherAgentUpdateArgs": {
      "description": "Launcher Agent update options",
      "properties": {
        "active": {
          "description": "Whether the Launcher Agent is active",
          "type": "boolean"
        },
        "id": {
          "description": "Launcher Agent ID. Must match ID in path",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "recordKeystrokes": {
          "description": "Whether or not this agent is allowed to record keystroke data",
          "type": "boolean"
        },
        "recordStandaloneSessions": {
          "description": "Whether or not this agent is allowed to record headless sessions",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfLauncherAgentCollectionSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/LauncherAgentCollectionSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "LauncherAgentCollectionSummary": {
      "description": "Launcher Agent Collection summary",
      "properties": {
        "active": {
          "description": "Whether the Collection is enabled",
          "type": "boolean"
        },
        "activeAgentCount": {
          "description": "Total number of active Launcher Agents in this Collection",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Collection Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LauncherAgentCollectionCreateArgs": {
      "description": "Launcher Agent Collection create options",
      "required": [
        "name",
        "recordStandaloneSessions",
        "recordKeystrokes"
      ],
      "properties": {
        "name": {
          "description": "Collection Name",
          "type": "string"
        },
        "recordKeystrokes": {
          "description": "Record Keystrokes",
          "type": "boolean"
        },
        "recordStandaloneSessions": {
          "description": "Record Standalone Sessions",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LauncherAgentCollectionModel": {
      "description": "Launcher Agent Collection",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "activeAgentCount": {
          "description": "ActiveAgentCount",
          "type": "integer",
          "format": "int32"
        },
        "created": {
          "description": "Created",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "recordKeystrokes": {
          "description": "RecordKeystrokes",
          "type": "boolean"
        },
        "recordStandaloneSessions": {
          "description": "RecordStandaloneSessions",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LauncherAgentCollectionUpdateArgs": {
      "description": "Launcher Agent Collection update options",
      "properties": {
        "active": {
          "description": "Whether the Launcher Agent Collection is active",
          "type": "boolean"
        },
        "id": {
          "description": "Launcher Agent ID. Must match ID in path",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "name": {
          "description": "Collection Name",
          "type": "string"
        },
        "recordKeystrokes": {
          "description": "Whether or not agents in this collection will record standalone sessions by default",
          "type": "boolean"
        },
        "recordStandaloneSessions": {
          "description": "Whether or not agents in this collection will record standalone sessions by default",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfLauncherSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/LauncherSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "LauncherSummary": {
      "description": "Launcher summary",
      "properties": {
        "active": {
          "description": "Whether the launcher is active",
          "type": "boolean"
        },
        "application": {
          "description": "Associated application",
          "type": "string"
        },
        "id": {
          "description": "Launcher ID",
          "type": "integer",
          "format": "int32"
        },
        "isCustom": {
          "description": "Whether this is a custom launcher",
          "type": "boolean"
        },
        "name": {
          "description": "Launcher name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LauncherModel": {
      "description": "Launcher",
      "properties": {
        "active": {
          "description": "Whether the launcher is active",
          "type": "boolean"
        },
        "application": {
          "description": "Associated application",
          "type": "string"
        },
        "customLauncherId": {
          "description": "Associated custom launcher ID",
          "type": "integer",
          "format": "int32"
        },
        "customLauncherProcessName": {
          "description": "Associated custom launcher process name",
          "type": "string"
        },
        "customParameters": {
          "description": "Associated custom launcher parameters",
          "type": "string"
        },
        "id": {
          "description": "Launcher ID",
          "type": "integer",
          "format": "int32"
        },
        "isCustom": {
          "description": "Whether this is a custom launcher",
          "type": "boolean"
        },
        "name": {
          "description": "Launcher name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfLauncherLookup": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/LauncherLookup"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "LauncherLookup": {
      "description": "Simple launcher representation",
      "properties": {
        "id": {
          "description": "Launcher ID",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Launcher name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfLauncherDetails": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/LauncherDetails"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "LauncherDetails": {
      "description": "Launcher And Fields",
      "properties": {
        "application": {
          "description": "Associated application",
          "type": "string"
        },
        "approvedList": {
          "description": "If the restricted host is on the allowed list",
          "type": "boolean"
        },
        "customLauncherId": {
          "description": "Associated custom launcher ID",
          "type": "integer",
          "format": "int32"
        },
        "customLauncherProcessName": {
          "description": "Associated custom launcher process name",
          "type": "string"
        },
        "customParameters": {
          "description": "Associated custom launcher parameters",
          "type": "string"
        },
        "isCustom": {
          "description": "Whether this is a custom launcher",
          "type": "boolean"
        },
        "launcherId": {
          "description": "Launcher ID",
          "type": "integer",
          "format": "int32"
        },
        "launcherName": {
          "description": "Launcher name",
          "type": "string"
        },
        "promptedField": {
          "$ref": "#/definitions/ILauncherTypeField",
          "description": "Fields required by the launcher"
        },
        "restrictedHost": {
          "description": "Whether there is a host restriction",
          "type": "boolean"
        },
        "restrictedHosts": {
          "description": "The restricted hosts.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ILauncherTypeField": {
      "description": "Fields required by the launcher",
      "properties": {
        "allowDefault": {
          "description": "AllowDefault",
          "type": "boolean"
        },
        "defaultType": {
          "description": "DefaultType",
          "type": "string"
        },
        "defaultTypeIntMax": {
          "description": "DefaultTypeIntMax",
          "type": "integer",
          "format": "int32"
        },
        "defaultTypeIntMin": {
          "description": "DefaultTypeIntMin",
          "type": "integer",
          "format": "int32"
        },
        "launcherTypeFieldId": {
          "description": "LauncherTypeFieldId",
          "type": "integer",
          "format": "int32"
        },
        "launcherTypeId": {
          "description": "LauncherTypeId",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "promptableField": {
          "description": "PromptableField",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LaunchSecretArgs": {
      "description": "LaunchSecretArgs",
      "properties": {
        "launcherId": {
          "description": "The Id of the launcher to use.",
          "type": "integer",
          "format": "int32"
        },
        "promptFieldValue": {
          "description": "The value to apply to the prompted field.",
          "type": "string"
        },
        "secretId": {
          "description": "The Id of the secret to launch.",
          "type": "integer",
          "format": "int32"
        },
        "siteId": {
          "description": "The site used to launch when using RDP proxy",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "LaunchedSecretModel": {
      "description": "Launcher",
      "properties": {
        "apiVersion": {
          "description": "The version of the Launcher API used.",
          "type": "integer",
          "format": "int32"
        },
        "baseUrl": {
          "description": "The url to the launcher",
          "type": "string"
        },
        "encodedUrl": {
          "description": "The url to Secret Server",
          "type": "string"
        },
        "guid": {
          "description": "The launcher request guid",
          "type": "string",
          "format": "uuid"
        },
        "launcherType": {
          "description": "The name of the launcher used.",
          "type": "string"
        },
        "launcherTypeId": {
          "description": "The Id of the launcher used.",
          "type": "integer",
          "format": "int32"
        },
        "sessionGuid": {
          "description": "The Id for a running session.",
          "type": "string",
          "format": "uuid"
        },
        "ssUrl": {
          "description": "The query string for the launcher.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidLicenseModel": {
      "description": "Valid License Model",
      "properties": {
        "isLicensed": {
          "description": "Is Licensed",
          "type": "boolean"
        },
        "isTrial": {
          "description": "Is Trial",
          "type": "boolean"
        },
        "licenseEndDate": {
          "description": "License End Date",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "PagingOfMetadataSummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/MetadataSummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "MetadataSummaryModel": {
      "description": "Query results",
      "properties": {
        "createDateTime": {
          "description": "CreateDateTime",
          "type": "string",
          "format": "date-time"
        },
        "createUserId": {
          "description": "CreateUserId",
          "type": "integer",
          "format": "int32"
        },
        "createUserName": {
          "description": "CreateUserName",
          "type": "string"
        },
        "itemId": {
          "description": "ItemId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldDataType": {
          "$ref": "#/definitions/MetadataFieldDataType",
          "description": "MetadataFieldDataType"
        },
        "metadataFieldId": {
          "description": "MetadataFieldId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldName": {
          "description": "MetadataFieldName",
          "type": "string"
        },
        "metadataFieldSectionId": {
          "description": "MetadataFieldSectionId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldSectionName": {
          "description": "MetadataFieldSectionName",
          "type": "string"
        },
        "metadataFieldTypeName": {
          "description": "MetadataFieldTypeName",
          "type": "string"
        },
        "metadataItemDataId": {
          "description": "MetadataItemDataId",
          "type": "integer",
          "format": "int32"
        },
        "metadataType": {
          "$ref": "#/definitions/MetadataType",
          "description": "The type of object.  User, Secret, Folder, Group"
        },
        "metadataTypeName": {
          "description": "MetadataTypeName",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "valueBit": {
          "description": "ValueBit",
          "type": "boolean"
        },
        "valueDateTime": {
          "description": "ValueDateTime",
          "type": "string",
          "format": "date-time"
        },
        "valueInt": {
          "description": "ValueInt",
          "type": "integer",
          "format": "int32"
        },
        "valueNumber": {
          "description": "ValueNumber",
          "type": "number",
          "format": "double"
        },
        "valueString": {
          "description": "ValueString",
          "type": "string"
        },
        "valueUserDisplayName": {
          "description": "ValueUserDisplayName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MetadataFieldDataType": {
      "description": "MetadataFieldDataType",
      "properties": {},
      "type": "string",
      "enum": [
        "String",
        "Boolean",
        "Number",
        "DateTime",
        "User"
      ]
    },
    "MetadataType": {
      "description": "The type of object.  User, Secret, Folder, Group",
      "properties": {},
      "type": "string",
      "enum": [
        "User",
        "Secret",
        "Folder",
        "Group"
      ]
    },
    "MetadataCreateArgs": {
      "description": "MetadataCreateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/MetadataCreateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "MetadataCreateModel": {
      "description": "Data",
      "properties": {
        "fieldDataType": {
          "description": "Specify the specific data type desired.  Only required when also creating a new field.  If field MetadataFieldId is passed or a field already exists with the passed MetadataFieldName this is ignored.  Certain data types can also be inferred from which value field is set, but some require this to be explicitly set like User.",
          "type": "string"
        },
        "metadataFieldId": {
          "description": "The specific field ID can be passed and in this case MetadataFieldName and MetadataFieldTypeId are ignored",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldName": {
          "description": "When the field ID is not know this will create a field with this name.  If the field name does not already exist a new one will be created.",
          "type": "string"
        },
        "metadataFieldSectionDescription": {
          "description": "When the field section ID is not know this will create a field section with this description.  If MetadataFieldSectionId is passed or a section with the name MetadataFieldSectionName this field is ignored.",
          "type": "string"
        },
        "metadataFieldSectionId": {
          "description": "The specific field section ID can be passed and in this case MetadataFieldSectionName is ignored",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldSectionName": {
          "description": "When the field section ID is not know this will create a field section with this name.  If the field section name does not already exist a new one will be created.  If MetadataFieldSectionId is passed this field is ignored.",
          "type": "string"
        },
        "metadataFieldSectionRequiresAdministerMetadata": {
          "description": "When the field section ID is not know this will create a field section with this setting as to whether the Administer Metadata permission is required for edit.  If MetadataFieldSectionId is passed or a section with the name MetadataFieldSectionName, this field is ignored.",
          "type": "boolean"
        },
        "metadataFieldSectionRequiresEntityEdit": {
          "description": "When the field section ID is not know this will create a field section with this setting as to whether edit permission is required for edit. Otherwise view will be required.  If MetadataFieldSectionId is passed or a section with the name MetadataFieldSectionName, this field is ignored.",
          "type": "boolean"
        },
        "valueBit": {
          "description": "ValueBit",
          "type": "boolean"
        },
        "valueDateTime": {
          "description": "ValueDateTime",
          "type": "string",
          "format": "date-time"
        },
        "valueInt": {
          "description": "ValueInt",
          "type": "integer",
          "format": "int32"
        },
        "valueNumber": {
          "description": "ValueNumber",
          "type": "number",
          "format": "double"
        },
        "valueString": {
          "description": "ValueString",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MetadataModel": {
      "description": "MetadataModel",
      "properties": {
        "createDateTime": {
          "description": "CreateDateTime",
          "type": "string",
          "format": "date-time"
        },
        "createUserId": {
          "description": "CreateUserId",
          "type": "integer",
          "format": "int32"
        },
        "createUserName": {
          "description": "CreateUserName",
          "type": "string"
        },
        "itemId": {
          "description": "ItemId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldId": {
          "description": "MetadataFieldId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldName": {
          "description": "MetadataFieldName",
          "type": "string"
        },
        "metadataFieldSectionId": {
          "description": "MetadataFieldSectionId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldSectionName": {
          "description": "MetadataFieldSectionName",
          "type": "string"
        },
        "metadataFieldTypeId": {
          "description": "MetadataFieldTypeId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldTypeName": {
          "description": "MetadataFieldTypeName",
          "type": "string"
        },
        "metadataItemDataId": {
          "description": "MetadataItemDataId",
          "type": "integer",
          "format": "int32"
        },
        "metadataTypeName": {
          "description": "MetadataTypeName",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "valueBit": {
          "description": "ValueBit",
          "type": "boolean"
        },
        "valueDateTime": {
          "description": "ValueDateTime",
          "type": "string",
          "format": "date-time"
        },
        "valueInt": {
          "description": "ValueInt",
          "type": "integer",
          "format": "int32"
        },
        "valueNumber": {
          "description": "ValueNumber",
          "type": "number",
          "format": "double"
        },
        "valueString": {
          "description": "ValueString",
          "type": "string"
        },
        "valueUserDisplayName": {
          "description": "ValueUserDisplayName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MetadataUpdateArgs": {
      "description": "MetadataUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/MetadataUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "MetadataUpdateModel": {
      "description": "Data",
      "properties": {
        "metadataItemDataId": {
          "description": "MetadataItemDataId",
          "type": "integer",
          "format": "int32"
        },
        "valueBit": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "ValueBit"
        },
        "valueDateTime": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalDateTime",
          "description": "ValueDateTime"
        },
        "valueInt": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "ValueInt"
        },
        "valueNumber": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalDouble",
          "description": "ValueNumber"
        },
        "valueString": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "ValueString"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalDateTime": {
      "description": "ValueDateTime",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalDouble": {
      "description": "ValueNumber",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "number",
          "format": "double"
        }
      },
      "type": "object"
    },
    "PagingOfMetadataFieldSummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/MetadataFieldSummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "MetadataFieldSummaryModel": {
      "description": "Query results",
      "properties": {
        "defaultSortOrder": {
          "description": "DefaultSortOrder",
          "type": "integer",
          "format": "int32"
        },
        "fieldDataType": {
          "$ref": "#/definitions/EntityMetadataFieldDataType",
          "description": "FieldDataType"
        },
        "metadataFieldId": {
          "description": "MetadataFieldId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldName": {
          "description": "MetadataFieldName",
          "type": "string"
        },
        "metadataFieldSectionId": {
          "description": "MetadataFieldSectionId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldSectionName": {
          "description": "MetadataFieldSectionName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EntityMetadataFieldDataType": {
      "description": "FieldDataType",
      "properties": {},
      "type": "string",
      "enum": [
        "String",
        "Boolean",
        "Number",
        "DateTime",
        "User"
      ]
    },
    "PagingOfMetadataFieldSectionSummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/MetadataFieldSectionSummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "MetadataFieldSectionSummaryModel": {
      "description": "Query results",
      "properties": {
        "actions": {
          "description": "Actions",
          "items": {
            "$ref": "#/definitions/MetadataFieldSectionActionType"
          },
          "type": "array"
        },
        "metadataFieldSectionDescription": {
          "description": "MetadataFieldSectionDescription",
          "type": "string"
        },
        "metadataFieldSectionId": {
          "description": "MetadataFieldSectionId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldSectionName": {
          "description": "MetadataFieldSectionName",
          "type": "string"
        },
        "requiresAdministerMetadata": {
          "description": "RequiresAdministerMetadata",
          "type": "boolean"
        },
        "requiresEntityEdit": {
          "description": "RequiresEntityEdit",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MetadataFieldSectionActionType": {
      "description": "Actions",
      "properties": {},
      "type": "string",
      "enum": [
        "EditSection",
        "AddField",
        "EditItem"
      ]
    },
    "MetadataFieldSectionUpdateArgs": {
      "description": "MetadataFieldSectionUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/MetadataFieldSectionUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "MetadataFieldSectionUpdateModel": {
      "description": "Data",
      "properties": {
        "metadataFieldSectionDescription": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "MetadataFieldSectionDescription"
        },
        "metadataFieldSectionName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "MetadataFieldSectionName"
        },
        "metadataFieldSectionRequiresAdministerMetadata": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "MetadataFieldSectionRequiresAdministerMetadata"
        },
        "metadataFieldSectionRequiresEntityEdit": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "MetadataFieldSectionRequiresEntityEdit"
        }
      },
      "type": "object"
    },
    "PagingOfMetadataHistorySummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/MetadataHistorySummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "MetadataHistorySummaryModel": {
      "description": "Query results",
      "properties": {
        "createDateTime": {
          "description": "CreateDateTime",
          "type": "string",
          "format": "date-time"
        },
        "createUserId": {
          "description": "CreateUserId",
          "type": "integer",
          "format": "int32"
        },
        "createUserName": {
          "description": "CreateUserName",
          "type": "string"
        },
        "itemId": {
          "description": "ItemId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldDataType": {
          "$ref": "#/definitions/MetadataFieldDataType",
          "description": "MetadataFieldDataType"
        },
        "metadataFieldId": {
          "description": "MetadataFieldId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldName": {
          "description": "MetadataFieldName",
          "type": "string"
        },
        "metadataFieldSectionId": {
          "description": "MetadataFieldSectionId",
          "type": "integer",
          "format": "int32"
        },
        "metadataFieldSectionName": {
          "description": "MetadataFieldSectionName",
          "type": "string"
        },
        "metadataFieldTypeName": {
          "description": "MetadataFieldTypeName",
          "type": "string"
        },
        "metadataItemDataHistoryId": {
          "description": "MetadataItemDataHistoryId",
          "type": "integer",
          "format": "int32"
        },
        "metadataItemDataId": {
          "description": "MetadataItemDataId",
          "type": "integer",
          "format": "int32"
        },
        "metadataType": {
          "$ref": "#/definitions/MetadataType",
          "description": "The type of object.  User, Secret, Folder, Group"
        },
        "metadataTypeName": {
          "description": "MetadataTypeName",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "valueBit": {
          "description": "ValueBit",
          "type": "boolean"
        },
        "valueDateTime": {
          "description": "ValueDateTime",
          "type": "string",
          "format": "date-time"
        },
        "valueInt": {
          "description": "ValueInt",
          "type": "integer",
          "format": "int32"
        },
        "valueNumber": {
          "description": "ValueNumber",
          "type": "number",
          "format": "double"
        },
        "valueString": {
          "description": "ValueString",
          "type": "string"
        },
        "valueUserDisplayName": {
          "description": "ValueUserDisplayName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MobileConfigurationModel": {
      "description": "Mobile Configuration Model",
      "properties": {
        "maximumTimeOfflineMinutes": {
          "description": "Maximum Time for Offline Access on Mobile Devices",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ServerNodeModel": {
      "description": "ServerNodeModel[]",
      "properties": {
        "binaryVersion": {
          "description": "Binary Version",
          "type": "string"
        },
        "database": {
          "description": "Database",
          "type": "string"
        },
        "enableBackgroundWorker": {
          "description": "Session Recording Worker Role Enabled",
          "type": "boolean"
        },
        "enableEngineWorker": {
          "description": "Engine Worker Role Enabled",
          "type": "boolean"
        },
        "enableSessionRecordingWorker": {
          "description": "Session Recording Worker Role Enabled",
          "type": "boolean"
        },
        "errorMessage": {
          "description": "The node configuration error if one exists",
          "type": "string"
        },
        "inCluster": {
          "description": "In Cluster",
          "type": "boolean"
        },
        "isCurrentNode": {
          "description": "Whether or not this node is the one which handled the request",
          "type": "boolean"
        },
        "lastConnected": {
          "description": "The date of the last time the node connected",
          "type": "string"
        },
        "machineName": {
          "description": "Machine Name",
          "type": "string"
        },
        "nodeId": {
          "description": "Node Id",
          "type": "integer",
          "format": "int32"
        },
        "readonlyModeEnabled": {
          "description": "Readonly Mode Enabled",
          "type": "boolean"
        },
        "readonlyModeStatus": {
          "description": "The status of readonly mode if it is being disabled or enabled",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerNodeConfigurationModel": {
      "description": "Server Node Roles",
      "properties": {
        "enableBackgroundWorker": {
          "description": "Background Worker Role Enabled",
          "type": "boolean"
        },
        "enableEngineWorker": {
          "description": "Engine Worker Role Enabled",
          "type": "boolean"
        },
        "enableSessionRecordingWorker": {
          "description": "Session Recording Worker Role Enabled",
          "type": "boolean"
        },
        "inCluster": {
          "description": "Whether or not the node is in the cluster",
          "type": "boolean"
        },
        "readonlyModeEnabled": {
          "description": "Readonly Mode Enabled",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "OneTimePasswordCodeModel": {
      "description": "OneTimePasswordCodeModel[]",
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "durationSeconds": {
          "description": "DurationSeconds",
          "type": "integer",
          "format": "int32"
        },
        "remainingSeconds": {
          "description": "RemainingSeconds",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PbaConfigurationModel": {
      "description": "PBA Configuration",
      "properties": {
        "allowImportData": {
          "description": "Allow Import Data",
          "type": "boolean"
        },
        "challengeEnabled": {
          "description": "Challenge Enabled",
          "type": "boolean"
        },
        "challengeLockoutIntegratedEnabled": {
          "description": "Challenge Lockout Integrated Enabled",
          "type": "boolean"
        },
        "challengeLockoutSamlEnabled": {
          "description": "Challenge Lockout SAML Enabled",
          "type": "boolean"
        },
        "enabled": {
          "description": "Enabled",
          "type": "boolean"
        },
        "encryptionEnabled": {
          "description": "Encryption Enabled",
          "type": "boolean"
        },
        "eventDataUploadInterval": {
          "description": "Event Data Upload Interval",
          "type": "integer",
          "format": "int32"
        },
        "eventDataUploadSizeThreshold": {
          "description": "Event Data Upload Size Threshold",
          "type": "integer",
          "format": "int32"
        },
        "externalPbaUrl": {
          "description": "External PBA URL",
          "type": "string"
        },
        "fileUploadEnabled": {
          "description": "File Upload Enabled",
          "type": "boolean"
        },
        "firstEnabledDate": {
          "description": "First Enabled Date",
          "type": "string",
          "format": "date-time"
        },
        "metadataInterval": {
          "description": "Metadata Interval",
          "type": "integer",
          "format": "int32"
        },
        "metadataLastSynchronized": {
          "description": "Metadata Last Synchronized",
          "type": "string",
          "format": "date-time"
        },
        "pbaIntegrationKeySet": {
          "description": "PBA Integration Key Set",
          "type": "boolean"
        },
        "pbaKey": {
          "description": "PBA Key",
          "type": "string",
          "format": "uuid"
        },
        "pbaKeyCreatedDate": {
          "description": "PBA Key Created Date",
          "type": "string",
          "format": "date-time"
        },
        "pbaKeyStatus": {
          "$ref": "#/definitions/ApplicationKeyStatus",
          "description": "PBA Key Status"
        },
        "respectOwnerEditorRequireApprovalEnabled": {
          "description": "Respect Owner Editor Require Approval Enabled",
          "type": "boolean"
        },
        "retentionDays": {
          "description": "Retention Days",
          "type": "integer",
          "format": "int32"
        },
        "secretServerKey": {
          "description": "Secret Server Key",
          "type": "string",
          "format": "uuid"
        },
        "secretServerKeyCreatedDate": {
          "description": "Secret Server Key Created Date",
          "type": "string",
          "format": "date-time"
        },
        "secretServerKeyStatus": {
          "$ref": "#/definitions/ApplicationKeyStatus",
          "description": "Secret Server Key Status"
        },
        "siteId": {
          "description": "Id of Site",
          "type": "integer",
          "format": "int32"
        },
        "storageDirectoryPath": {
          "description": "Storage Directory Path",
          "type": "string"
        },
        "warningMessage": {
          "description": "Warning Message",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApplicationKeyStatus": {
      "description": "PBA Key Status",
      "properties": {},
      "type": "string",
      "enum": [
        "Unapproved",
        "Approved",
        "Disabled"
      ]
    },
    "PbaConfigurationUpdateArgs": {
      "description": "PbaConfigurationUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/PbaConfigurationUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "PbaConfigurationUpdateModel": {
      "description": "Update PBA Configuration",
      "properties": {
        "challengeEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Challenge Enabled"
        },
        "challengeLockoutIntegratedEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Challenge Lockout Integrated Enabled"
        },
        "challengeLockoutSamlEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Challenge Lockout SAML Enabled"
        },
        "enabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enabled"
        },
        "encryptionEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Encryption Enabled"
        },
        "eventDataUploadInterval": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Event Data Upload Interval"
        },
        "eventDataUploadSizeThreshold": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Event Data Upload Size Threshold"
        },
        "externalPbaUrl": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "External PBA URL"
        },
        "fileUploadEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "File Upload Enabled"
        },
        "metadataInterval": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Metadata Interval"
        },
        "pbaIntegrationKey": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "PBA Integration Key Set"
        },
        "respectOwnerEditorRequireApprovalEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Respect Owner Editor Require Approval Enabled"
        },
        "retentionDays": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Retention Days"
        },
        "siteId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Id of Site"
        },
        "storageDirectoryPath": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Storage Directory Path"
        }
      },
      "type": "object"
    },
    "PbaConfirmPairModel": {
      "description": "PBA Confirm Pair",
      "properties": {
        "alreadyApproved": {
          "description": "Already Approved",
          "type": "boolean"
        },
        "success": {
          "description": "Success",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PbaHistoricalImportArgs": {
      "description": "PbaHistoricalImportArgs",
      "properties": {
        "endDate": {
          "$ref": "#/definitions/OptionalDateTimeOffset",
          "description": "EndDate"
        },
        "processImport": {
          "description": "ProcessImport",
          "type": "boolean"
        },
        "startDate": {
          "$ref": "#/definitions/OptionalDateTimeOffset",
          "description": "StartDate"
        }
      },
      "type": "object"
    },
    "OptionalDateTimeOffset": {
      "description": "EndDate",
      "properties": {
        "date": {
          "description": "Date",
          "type": "string",
          "format": "date-time"
        },
        "dateTime": {
          "description": "DateTime",
          "type": "string",
          "format": "date-time"
        },
        "day": {
          "description": "Day",
          "type": "integer",
          "format": "int32"
        },
        "dayOfWeek": {
          "$ref": "#/definitions/DayOfWeek",
          "description": "DayOfWeek"
        },
        "dayOfYear": {
          "description": "DayOfYear",
          "type": "integer",
          "format": "int32"
        },
        "hour": {
          "description": "Hour",
          "type": "integer",
          "format": "int32"
        },
        "localDateTime": {
          "description": "LocalDateTime",
          "type": "string",
          "format": "date-time"
        },
        "millisecond": {
          "description": "Millisecond",
          "type": "integer",
          "format": "int32"
        },
        "minute": {
          "description": "Minute",
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "description": "Month",
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "description": "Offset",
          "type": "string",
          "format": "time-span"
        },
        "second": {
          "description": "Second",
          "type": "integer",
          "format": "int32"
        },
        "ticks": {
          "description": "Ticks",
          "type": "integer",
          "format": "int64"
        },
        "timeOfDay": {
          "description": "TimeOfDay",
          "type": "string",
          "format": "time-span"
        },
        "utcDateTime": {
          "description": "UtcDateTime",
          "type": "string",
          "format": "date-time"
        },
        "utcTicks": {
          "description": "UtcTicks",
          "type": "integer",
          "format": "int64"
        },
        "year": {
          "description": "Year",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "DayOfWeek": {
      "description": "DayOfWeek",
      "properties": {},
      "type": "string",
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ]
    },
    "PagingOfProxyAuditModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/ProxyAuditModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ProxyAuditModel": {
      "description": "Query results",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "dateRecorded": {
          "description": "DateRecorded",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "ipAddress": {
          "description": "IpAddress",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyEndpointsViewModel": {
      "description": "ProxyEndpointsViewModel",
      "properties": {
        "defaultRdpProxyPort": {
          "description": "DefaultRdpProxyPort",
          "type": "integer",
          "format": "int32"
        },
        "defaultSshProxyPort": {
          "description": "DefaultSshProxyPort",
          "type": "integer",
          "format": "int32"
        },
        "engines": {
          "description": "Engines",
          "items": {
            "$ref": "#/definitions/ProxyEngineViewModel"
          },
          "type": "array"
        },
        "nodes": {
          "description": "Nodes",
          "items": {
            "$ref": "#/definitions/ProxyNodeViewModel"
          },
          "type": "array"
        },
        "rdpProxyEnabled": {
          "description": "RdpProxyEnabled",
          "type": "boolean"
        },
        "sites": {
          "description": "Sites",
          "items": {
            "$ref": "#/definitions/ProxySiteViewModel"
          },
          "type": "array"
        },
        "sshProxyEnabled": {
          "description": "SshProxyEnabled",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProxyEngineViewModel": {
      "description": "Engines",
      "properties": {
        "bindIpAddress": {
          "description": "BindIpAddress",
          "type": "string"
        },
        "engineId": {
          "description": "EngineId",
          "type": "integer",
          "format": "int32"
        },
        "friendlyName": {
          "description": "FriendlyName",
          "type": "string"
        },
        "publicHost": {
          "description": "PublicHost",
          "type": "string"
        },
        "siteName": {
          "description": "SiteName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyNodeViewModel": {
      "description": "Nodes",
      "properties": {
        "bindIpAddress": {
          "description": "BindIpAddress",
          "type": "string"
        },
        "machineName": {
          "description": "MachineName",
          "type": "string"
        },
        "nodeId": {
          "description": "NodeId",
          "type": "integer",
          "format": "int32"
        },
        "publicHost": {
          "description": "PublicHost",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxySiteViewModel": {
      "description": "Sites",
      "properties": {
        "enableRdpProxy": {
          "description": "EnableRdpProxy",
          "type": "boolean"
        },
        "enableSshProxy": {
          "description": "EnableSshProxy",
          "type": "boolean"
        },
        "rdpProxyPort": {
          "description": "RdpProxyPort",
          "type": "integer",
          "format": "int32"
        },
        "rdpProxyPortInherited": {
          "description": "RdpProxyPortInherited",
          "type": "boolean"
        },
        "siteId": {
          "description": "SiteId",
          "type": "integer",
          "format": "int32"
        },
        "siteName": {
          "description": "SiteName",
          "type": "string"
        },
        "sshProxyPort": {
          "description": "SshProxyPort",
          "type": "integer",
          "format": "int32"
        },
        "sshProxyPortInherited": {
          "description": "SshProxyPortInherited",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProxyExplanationsViewModel": {
      "description": "ProxyExplanationsViewModel",
      "properties": {
        "rdpProxyExplanation": {
          "description": "RdpProxyExplanation",
          "type": "string"
        },
        "sshProxyExplanation": {
          "$ref": "#/definitions/DictionaryOfStringAndString",
          "description": "SshProxyExplanation"
        },
        "sshTerminalBlockListExplanation": {
          "description": "SshTerminalBlockListExplanation",
          "type": "string"
        },
        "sshTerminalBlockListOverrideExplanation": {
          "description": "SshTerminalBlockListOverrideExplanation",
          "type": "string"
        },
        "sshTerminalExplanation": {
          "description": "SshTerminalExplanation",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RdpProxyConfigurationViewModel": {
      "description": "RdpProxyConfigurationViewModel",
      "properties": {
        "allowSiteSelectionForActiveDirectoryAccounts": {
          "description": "Allows users to select a site when launching or generating proxy credentials for a RDP proxied secret",
          "type": "boolean"
        },
        "daysToKeepOperationalLogs": {
          "description": "The number of days to store RDP proxy logs before they are rolled over",
          "type": "integer",
          "format": "int32"
        },
        "enableRdpProxy": {
          "description": "Whether or not to enable the RDP proxy",
          "type": "boolean"
        },
        "enableRemoteHostValidation": {
          "description": "Whether or not to enforce certificate validation on remote hosts that the proxy connects to",
          "type": "boolean"
        },
        "isCloud": {
          "description": "IsCloud",
          "type": "boolean"
        },
        "proxyNewSecretsByDefault": {
          "description": "Whether or not new RDP-enabled secrets should be created with 'Proxy Enabled' set",
          "type": "boolean"
        },
        "rdpProxyPort": {
          "description": "The port that the RDP proxy will run on",
          "type": "integer",
          "format": "int32"
        },
        "rdpServerCertificate": {
          "$ref": "#/definitions/RdpProxyCertificateViewModel",
          "description": "The certificate that is server when connections begin to the RDP proxy (used \"Content-Type: application/json\" only)"
        },
        "rdpServerCertificateMultipart": {
          "$ref": "#/definitions/HttpFile",
          "description": "The certificate that is server when connections begin to the RDP proxy (used \"Content-Type: multipart/form-data\" only)"
        },
        "rdpServerCertificateMultipartPassword": {
          "description": "The password used to protect the certificate (only used for updating with \"Content-Type: multipart/form-data\" only)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RdpProxyCertificateViewModel": {
      "description": "The certificate that is server when connections begin to the RDP proxy (used \"Content-Type: application/json\" only)",
      "properties": {
        "rdpServerCertificate": {
          "description": "The certificate (x509/pfx) that is served to users connecting to the RDP proxy.",
          "type": "string",
          "format": "binary"
        },
        "rdpServerCertificateFileName": {
          "description": "The name of the RDP server certificate file",
          "type": "string"
        },
        "rdpServerCertificatePassword": {
          "description": "The password used to protect the certificate (only used for updating)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "HttpFile": {
      "description": "The certificate that is server when connections begin to the RDP proxy (used \"Content-Type: multipart/form-data\" only)",
      "properties": {
        "buffer": {
          "description": "Buffer",
          "type": "string",
          "format": "binary"
        },
        "fileName": {
          "description": "FileName",
          "type": "string"
        },
        "mediaType": {
          "description": "MediaType",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GenerateRdpCertificateArgs": {
      "description": "GenerateRdpCertificateArgs",
      "properties": {
        "dnsName": {
          "description": "The DNS name to use when generating the self-signed certificate",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfProxyClientHistorySummaryAndSshProxyClientHistoryFilterQuery": {
      "description": "Specify filtering, paging, sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "filter": {
          "$ref": "#/definitions/SshProxyClientHistoryFilterQuery",
          "description": "Additional query options"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/ProxyClientHistorySummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SshProxyClientHistoryFilterQuery": {
      "description": "Additional query options",
      "properties": {
        "authenticateResult": {
          "description": "AuthenticateResult",
          "type": "string"
        },
        "endDate": {
          "description": "EndDate",
          "type": "string"
        },
        "engineIdentityGuid": {
          "description": "EngineIdentityGuid",
          "type": "string"
        },
        "ipAddress": {
          "description": "IpAddress",
          "type": "string"
        },
        "startDate": {
          "description": "StartDate",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyClientHistorySummary": {
      "description": "Query results",
      "properties": {
        "authenticateResult": {
          "$ref": "#/definitions/TerminalAuthenticateResult",
          "description": "AuthenticateResult"
        },
        "createdDate": {
          "description": "CreatedDate",
          "type": "string",
          "format": "date-time"
        },
        "engineIdentityGuid": {
          "description": "EngineIdentityGuid",
          "type": "string"
        },
        "ipAddress": {
          "description": "IpAddress",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TerminalAuthenticateResult": {
      "description": "AuthenticateResult",
      "properties": {},
      "type": "string",
      "enum": [
        "Unknown",
        "Successful",
        "Failed",
        "Refused"
      ]
    },
    "ProxyClientOverrideSummary": {
      "description": "ProxyClientOverrideSummary[]",
      "properties": {
        "clientOverrideId": {
          "description": "ClientOverrideId",
          "type": "integer",
          "format": "int32"
        },
        "ipAddressRange": {
          "description": "IpAddressRange",
          "type": "string"
        },
        "terminalClientType": {
          "$ref": "#/definitions/ProxyClientType",
          "description": "TerminalClientType"
        }
      },
      "type": "object"
    },
    "ProxyClientType": {
      "description": "TerminalClientType",
      "properties": {},
      "type": "string",
      "enum": [
        "Unknown",
        "AllowList",
        "BlockList"
      ]
    },
    "PagingOfProxyClientSummaryAndSshProxyClientsFilterQuery": {
      "description": "Specify filtering, paging, sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "filter": {
          "$ref": "#/definitions/SshProxyClientsFilterQuery",
          "description": "Additional query options"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/ProxyClientSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SshProxyClientsFilterQuery": {
      "description": "Additional query options",
      "properties": {
        "ipAddress": {
          "description": "IpAddress",
          "type": "string"
        },
        "terminalClientType": {
          "description": "TerminalClientType",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProxyClientSummary": {
      "description": "Query results",
      "properties": {
        "clientId": {
          "description": "ClientId",
          "type": "integer",
          "format": "int32"
        },
        "ipAddress": {
          "description": "IpAddress",
          "type": "string"
        },
        "lastConnectionDate": {
          "description": "LastConnectionDate",
          "type": "string",
          "format": "date-time"
        },
        "terminalClientType": {
          "$ref": "#/definitions/ProxyClientType",
          "description": "TerminalClientType"
        }
      },
      "type": "object"
    },
    "SshProxyConfigurationViewModel": {
      "description": "SshProxyConfigurationViewModel",
      "properties": {
        "daysToKeepOperationalLogs": {
          "description": "The number of days to store SSH proxy logs before they are rolled over",
          "type": "integer",
          "format": "int32"
        },
        "enablePasswordHiding": {
          "description": "Enable to hide passwords from SSH keystroke capture. This prevents logging user input on lines that are determined to be a password prompt.",
          "type": "boolean"
        },
        "enableProxyBlockListing": {
          "description": "Enable block listing of IP Addresses that connect and fail to authenticate too many times",
          "type": "boolean"
        },
        "enableProxyInactivityTimeout": {
          "description": "Whether or not the proxy should disconnect inactive sessions",
          "type": "boolean"
        },
        "enableSshProxy": {
          "description": "Whether or not the SSH proxy is enabled",
          "type": "boolean"
        },
        "enableSshPublicKeyAuth": {
          "description": "Whether or not the SSH Terminal can allow key authentication",
          "type": "boolean"
        },
        "enableSshTerminal": {
          "description": "Whether or not the SSH terminal is enabled",
          "type": "boolean"
        },
        "enableSshTunneling": {
          "description": "Whether or not to allow SSH tunneling through the proxy for proxied RDP sessions",
          "type": "boolean"
        },
        "enableTerminalInactivityTimeout": {
          "description": "Whether or not the SSH terminal should disconnect inactive sessions",
          "type": "boolean"
        },
        "isCloud": {
          "description": "IsCloud",
          "type": "boolean"
        },
        "passwordRegexFilter": {
          "description": "Regular Expression used to identify password prompts. The default expression search for either prompts beginning with 'sudo password for' or prompts ending with 'password:'",
          "type": "string"
        },
        "proxyAutoBlockListingMaxNum": {
          "description": "The number of failed authentication attempts before being blocked",
          "type": "integer",
          "format": "int32"
        },
        "proxyAutoBlockListingTimeFrameMinutes": {
          "description": "The time frame in which all the failed attempts must happen before being blocked",
          "type": "integer",
          "format": "int32"
        },
        "proxyInactivityTimeoutSeconds": {
          "description": "The amount of time in seconds to wait before disconnecting inactive proxy sessions",
          "type": "integer",
          "format": "int32"
        },
        "proxyNewSecretsByDefault": {
          "description": "Whether or not new SSH-enabled secrets should be created with 'Proxy Enabled' set",
          "type": "boolean"
        },
        "sshHostKey": {
          "description": "The host key that will the proxy will serve",
          "type": "string"
        },
        "sshProxyBanner": {
          "description": "The banner that is display when someone opens an shell connection to the proxy",
          "type": "string"
        },
        "sshProxyHostFingerprint": {
          "description": "The fingerprint of the host key that the proxy will serve",
          "type": "string"
        },
        "sshProxyPort": {
          "description": "The port that that SSH proxy runs on",
          "type": "integer",
          "format": "int32"
        },
        "sshTerminalBanner": {
          "description": "The banner that is displayed when someone authenticates to the SSH terminal",
          "type": "string"
        },
        "terminalInactivityTimeoutSeconds": {
          "description": "The amount of time in seconds to wait before disconnecting inactive terminal sessions",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ProxyingStateModel": {
      "description": "ProxyingStateModel",
      "properties": {
        "showLogs": {
          "description": "If the logs should be shown",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfSecretSessionSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretSessionSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretSessionSummary": {
      "description": "Recorded session summary",
      "properties": {
        "accessedByName": {
          "description": "AccessedByName",
          "type": "string"
        },
        "active": {
          "description": "Whether the recorded session is active",
          "type": "boolean"
        },
        "auditSecretId": {
          "description": "Associated access audit record",
          "type": "integer",
          "format": "int32"
        },
        "duration": {
          "description": "Duration of recorded session, in seconds",
          "type": "integer",
          "format": "int32"
        },
        "endDate": {
          "description": "Recorded session end time",
          "type": "string",
          "format": "date-time"
        },
        "endDateDisplay": {
          "description": "Recorded session end time (display format)",
          "type": "string"
        },
        "errorMessage": {
          "description": "Processing error message",
          "type": "string"
        },
        "fileExtension": {
          "description": "FileExtension",
          "type": "string"
        },
        "hasKeyStrokes": {
          "description": "Whether the recorded session has logged keystrokes",
          "type": "boolean"
        },
        "hasProcesses": {
          "description": "Whether the recorded session has info about running processes",
          "type": "boolean"
        },
        "hasProcessingError": {
          "description": "Whether an error occurred during video processing",
          "type": "boolean"
        },
        "isDeleted": {
          "description": "Whether the recorded session has been deleted",
          "type": "boolean"
        },
        "isLauncher": {
          "description": "IsLauncher",
          "type": "boolean"
        },
        "launchedSuccessfully": {
          "description": "Whether the session reached a state where it was active and not expired and had no other errors",
          "type": "boolean"
        },
        "launcherName": {
          "description": "Launcher name",
          "type": "string"
        },
        "launcherSessionGuid": {
          "description": "Launcher session unique identifier",
          "type": "string",
          "format": "uuid"
        },
        "launcherSessionStatus": {
          "description": "LauncherSessionStatus",
          "type": "integer",
          "format": "int32"
        },
        "launcherTypeId": {
          "description": "Launcher type",
          "type": "integer",
          "format": "int32"
        },
        "machineName": {
          "description": "Machine name",
          "type": "string"
        },
        "matchingSearchTypes": {
          "description": "MatchingSearchTypes",
          "type": "string"
        },
        "pbaId": {
          "description": "PbaId",
          "type": "integer",
          "format": "int64"
        },
        "secretId": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "Secret name",
          "type": "string"
        },
        "secretSessionId": {
          "description": "Recorded session ID",
          "type": "integer",
          "format": "int32"
        },
        "secretSessionUserName": {
          "description": "Recorded session username",
          "type": "string"
        },
        "sessionMovieProcessComplete": {
          "description": "Whether video processing is complete",
          "type": "boolean"
        },
        "startDate": {
          "description": "Recorded session start time",
          "type": "string",
          "format": "date-time"
        },
        "startDateDisplay": {
          "description": "Recorded session start time (display format)",
          "type": "string"
        },
        "userDomainName": {
          "description": "Active Directory domain name",
          "type": "string"
        },
        "userId": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User name",
          "type": "string"
        },
        "userNameForDisplay": {
          "description": "Recorded session username (display format)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretSessionModel": {
      "description": "Recorded session",
      "properties": {
        "accessedByName": {
          "description": "AccessedByName",
          "type": "string"
        },
        "active": {
          "description": "Whether the recorded session is active",
          "type": "boolean"
        },
        "auditSecretId": {
          "description": "Associated access audit record",
          "type": "integer",
          "format": "int32"
        },
        "duration": {
          "description": "Duration of recorded session, in seconds",
          "type": "integer",
          "format": "int32"
        },
        "endDate": {
          "description": "Recorded session end time",
          "type": "string",
          "format": "date-time"
        },
        "endDateDisplay": {
          "description": "Recorded session end time (display format)",
          "type": "string"
        },
        "errorMessage": {
          "description": "Processing error message",
          "type": "string"
        },
        "fileExtension": {
          "description": "FileExtension",
          "type": "string"
        },
        "hasKeyStrokes": {
          "description": "Whether the recorded session has logged keystrokes",
          "type": "boolean"
        },
        "hasProcesses": {
          "description": "Whether the recorded session has info about running processes",
          "type": "boolean"
        },
        "hasProcessingError": {
          "description": "Whether an error occurred during video processing",
          "type": "boolean"
        },
        "isDeleted": {
          "description": "Whether the recorded session has been deleted",
          "type": "boolean"
        },
        "isLauncher": {
          "description": "IsLauncher",
          "type": "boolean"
        },
        "launchedSuccessfully": {
          "description": "Whether the session reached a state where it was active and not expired and had no other errors",
          "type": "boolean"
        },
        "launcherName": {
          "description": "LauncherName",
          "type": "string"
        },
        "launcherSessionGuid": {
          "description": "Launcher session unique identifier",
          "type": "string",
          "format": "uuid"
        },
        "launcherSessionStatus": {
          "description": "LauncherSessionStatus",
          "type": "integer",
          "format": "int32"
        },
        "launcherTypeId": {
          "description": "Launcher type",
          "type": "integer",
          "format": "int32"
        },
        "machineName": {
          "description": "Machine name",
          "type": "string"
        },
        "matchingSearchTypes": {
          "description": "MatchingSearchTypes",
          "type": "string"
        },
        "pbaId": {
          "description": "Pba Event Id if session was caused by an access challenge",
          "type": "integer",
          "format": "int64"
        },
        "secretId": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "Secret name",
          "type": "string"
        },
        "secretSessionId": {
          "description": "Recorded session ID",
          "type": "integer",
          "format": "int32"
        },
        "secretSessionUserName": {
          "description": "User name from the recorded session",
          "type": "string"
        },
        "sessionMovieProcessComplete": {
          "description": "Whether video processing is complete",
          "type": "boolean"
        },
        "startDate": {
          "description": "Recorded session start time",
          "type": "string",
          "format": "date-time"
        },
        "startDateDisplay": {
          "description": "Recorded session start time (display format)",
          "type": "string"
        },
        "userDomainName": {
          "description": "Active Directory domain name",
          "type": "string"
        },
        "userId": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User name",
          "type": "string"
        },
        "userNameForDisplay": {
          "description": "Display name for user",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfSecretSessionPointOfInterestModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretSessionPointOfInterestModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretSessionPointOfInterestModel": {
      "description": "Recorded session point of interest",
      "properties": {
        "activityDetails": {
          "description": "ActivityDetails",
          "type": "string"
        },
        "activityTitle": {
          "description": "ActivityTitle",
          "type": "string"
        },
        "activityType": {
          "$ref": "#/definitions/SecretSessionActivityType",
          "description": "Logged activity type"
        },
        "activityTypeDisplayName": {
          "description": "Logged activity type (display format)",
          "type": "string"
        },
        "icon": {
          "description": "Icon",
          "type": "string"
        },
        "launcherSessionGuid": {
          "description": "Launcher session unique identifier",
          "type": "string",
          "format": "uuid"
        },
        "secretId": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        },
        "secretSessionId": {
          "description": "Recorded session ID",
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "description": "Point of interest timestamp",
          "type": "string",
          "format": "date-time"
        },
        "timestampOffset": {
          "description": "Time since session start",
          "type": "string",
          "format": "time-span"
        },
        "timestampOffsetDisplay": {
          "description": "Time since session start (display format)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretSessionActivityType": {
      "description": "Logged activity type",
      "properties": {},
      "type": "string",
      "enum": [
        "SshKeyStroke",
        "ApplicationStartedOrExisting",
        "ApplicationEnd",
        "Keystroke",
        "Image",
        "ApplicationMadeActive"
      ]
    },
    "PagingOfISecretSessionPointOfInterestSummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/ISecretSessionPointOfInterestSummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ISecretSessionPointOfInterestSummaryModel": {
      "description": "Query results",
      "properties": {
        "activityTypeGroup": {
          "description": "ActivityTypeGroup",
          "type": "string"
        },
        "launcherSessionGuid": {
          "description": "LauncherSessionGuid",
          "type": "string",
          "format": "uuid"
        },
        "score": {
          "description": "Score",
          "type": "integer",
          "format": "int32"
        },
        "secondsFromStart": {
          "description": "SecondsFromStart",
          "type": "integer",
          "format": "int64"
        },
        "timestampOffset": {
          "description": "TimestampOffset",
          "type": "string",
          "format": "time-span"
        }
      },
      "type": "object"
    },
    "StreamContentResult": {
      "description": "StreamContentResult",
      "properties": {},
      "type": "object"
    },
    "CustomCommandCreateArgs": {
      "description": "CustomCommandCreateArgs",
      "properties": {
        "command": {
          "description": "Command",
          "type": "string"
        },
        "commandTypeCode": {
          "description": "CommandTypeCode",
          "type": "integer",
          "format": "int32"
        },
        "comment": {
          "description": "Comment",
          "type": "string"
        },
        "passwordTypeId": {
          "description": "PasswordTypeId",
          "type": "integer",
          "format": "int32"
        },
        "pause": {
          "description": "Pause",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "CustomCommandModel": {
      "description": "Displays the properties of a Custom Command",
      "properties": {
        "command": {
          "description": "Command Text",
          "type": "string"
        },
        "commandTypeCode": {
          "description": "Command Type Code",
          "type": "integer",
          "format": "int32"
        },
        "comment": {
          "description": "Comment",
          "type": "string"
        },
        "concurrencyId": {
          "description": "Concurrency Id",
          "type": "string"
        },
        "customCommandId": {
          "description": "Custom Command Id",
          "type": "integer",
          "format": "int32"
        },
        "order": {
          "description": "Order number",
          "type": "integer",
          "format": "int32"
        },
        "passwordTypeId": {
          "description": "Password Type Id",
          "type": "integer",
          "format": "int32"
        },
        "pause": {
          "description": "Pause Duration (milliseconds)",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfCustomCommandModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/CustomCommandModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "CustomCommandUpdateArgs": {
      "description": "CustomCommandUpdateArgs",
      "properties": {
        "command": {
          "description": "Command",
          "type": "string"
        },
        "commandTypeCode": {
          "description": "CommandTypeCode",
          "type": "integer",
          "format": "int32"
        },
        "comment": {
          "description": "Comment",
          "type": "string"
        },
        "concurrencyId": {
          "description": "ConcurrencyId",
          "type": "string"
        },
        "order": {
          "description": "Order",
          "type": "integer",
          "format": "int32"
        },
        "passwordTypeId": {
          "description": "PasswordTypeId",
          "type": "integer",
          "format": "int32"
        },
        "pause": {
          "description": "Pause",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfPasswordTypeSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/PasswordTypeSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PasswordTypeSummary": {
      "description": "Password Type summary",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "canEdit": {
          "description": "CanEdit",
          "type": "boolean"
        },
        "hasCommands": {
          "description": "HasCommands",
          "type": "boolean"
        },
        "heartbeatScriptId": {
          "description": "HeartbeatScriptId",
          "type": "integer",
          "format": "int32"
        },
        "ignoreSSL": {
          "description": "IgnoreSSL",
          "type": "boolean"
        },
        "isWeb": {
          "description": "IsWeb",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "passwordTypeId": {
          "description": "PasswordTypeId",
          "type": "integer",
          "format": "int32"
        },
        "requiredEdition": {
          "description": "RequiredEdition",
          "type": "string"
        },
        "rpcScriptId": {
          "description": "RPCScriptId",
          "type": "integer",
          "format": "int32"
        },
        "runnerType": {
          "$ref": "#/definitions/RunnerType",
          "description": "RunnerType"
        },
        "scanItemTemplateId": {
          "description": "ScanItemTemplateId",
          "type": "integer",
          "format": "int32"
        },
        "useSSL": {
          "description": "UseSSL",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RunnerType": {
      "description": "RunnerType",
      "properties": {},
      "type": "string",
      "enum": [
        "Standard",
        "Legacy"
      ]
    },
    "PasswordTypeCreateArgs": {
      "description": "PasswordTypeCreateArgs",
      "properties": {
        "basePasswordTypeId": {
          "description": "BasePasswordTypeId",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PasswordTypeModel": {
      "description": "Displays the properties of a Password Type",
      "properties": {
        "active": {
          "description": "Whether the Password Type is Active ",
          "type": "boolean"
        },
        "canEdit": {
          "description": "Whether the Password Type can be edited",
          "type": "boolean"
        },
        "customPort": {
          "description": "Custom Port",
          "type": "integer",
          "format": "int32"
        },
        "exitCommand": {
          "description": "Exit Command",
          "type": "string"
        },
        "fields": {
          "description": "Password Type Fields",
          "items": {
            "$ref": "#/definitions/IRestPasswordTypeField"
          },
          "type": "array"
        },
        "hasCommands": {
          "description": "Whether Commands Exist",
          "type": "boolean"
        },
        "hasLDAPSettings": {
          "description": "Whether LDAP Settings Exist",
          "type": "boolean"
        },
        "heartbeatScriptArgs": {
          "description": "Heartbeat Script Args",
          "type": "string"
        },
        "heartbeatScriptId": {
          "description": "Heartbeat Script Id",
          "type": "integer",
          "format": "int32"
        },
        "ignoreSSL": {
          "description": "Whether Password Type ignores SSL warnings",
          "type": "boolean"
        },
        "isWeb": {
          "description": "Whether Is Web",
          "type": "boolean"
        },
        "ldapConnectionSettingsId": {
          "description": "LDAP Connection Settings Id",
          "type": "integer",
          "format": "int32"
        },
        "lineEnding": {
          "$ref": "#/definitions/LineEnding",
          "description": "Line ending type"
        },
        "mainframeConnectionString": {
          "description": "Mainframe Connection String",
          "type": "string"
        },
        "name": {
          "description": "Password Type Name",
          "type": "string"
        },
        "odbcConnectionString": {
          "description": "ODBC Connection String",
          "type": "string"
        },
        "passwordTypeId": {
          "description": "Password Type Id",
          "type": "integer",
          "format": "int32"
        },
        "rpcScriptArgs": {
          "description": "RPC Script Args",
          "type": "string"
        },
        "rpcScriptId": {
          "description": "RPC Script Id",
          "type": "integer",
          "format": "int32"
        },
        "runnerType": {
          "$ref": "#/definitions/RunnerType",
          "description": "Runner Type"
        },
        "scanItemTemplateId": {
          "description": "Scan Template Id",
          "type": "integer",
          "format": "int32"
        },
        "typeName": {
          "description": "Federator Type",
          "type": "string"
        },
        "useSSL": {
          "description": "Whether Password Type uses SSL",
          "type": "boolean"
        },
        "useUsernameAndPassword": {
          "description": "Whether Password Type uses both Username and Password",
          "type": "boolean"
        },
        "validForTakeover": {
          "description": "Whether is Valid For Takeover",
          "type": "boolean"
        },
        "windowsCustomPorts": {
          "description": "Custom Ports for Windows",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IRestPasswordTypeField": {
      "description": "Password Type Fields",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "passwordTypeFieldId": {
          "description": "PasswordTypeFieldId",
          "type": "integer",
          "format": "int32"
        },
        "scanItemFieldId": {
          "description": "ScanItemFieldId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "LineEnding": {
      "description": "Line ending type",
      "properties": {},
      "type": "string",
      "enum": [
        "NewLine",
        "CarriageReturn",
        "CarriageReturnNewLine"
      ]
    },
    "PasswordTypeUpdateArgs": {
      "description": "PasswordTypeUpdateArgs",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "canEdit": {
          "description": "CanEdit",
          "type": "boolean"
        },
        "customPort": {
          "description": "CustomPort",
          "type": "integer",
          "format": "int32"
        },
        "exitCommand": {
          "description": "ExitCommand",
          "type": "string"
        },
        "hasCommands": {
          "description": "HasCommands",
          "type": "boolean"
        },
        "heartbeatScriptArgs": {
          "description": "HeartbeatScriptArgs",
          "type": "string"
        },
        "heartbeatScriptId": {
          "description": "HeartbeatScriptId",
          "type": "integer",
          "format": "int32"
        },
        "ignoreSSL": {
          "description": "IgnoreSSL",
          "type": "boolean"
        },
        "isWeb": {
          "description": "IsWeb",
          "type": "boolean"
        },
        "ldapConnectionSettingsId": {
          "description": "LdapConnectionSettingsId",
          "type": "integer",
          "format": "int32"
        },
        "lineEnding": {
          "$ref": "#/definitions/LineEnding",
          "description": "LineEnding"
        },
        "mainframeConnectionString": {
          "description": "MainframeConnectionString",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "odbcConnectionString": {
          "description": "ODBCConnectionString",
          "type": "string"
        },
        "rpcScriptArgs": {
          "description": "RPCScriptArgs",
          "type": "string"
        },
        "rpcScriptId": {
          "description": "RPCScriptId",
          "type": "integer",
          "format": "int32"
        },
        "runnerType": {
          "$ref": "#/definitions/RunnerType",
          "description": "RunnerType"
        },
        "scanItemTemplateId": {
          "description": "ScanItemTemplateId",
          "type": "integer",
          "format": "int32"
        },
        "useSSL": {
          "description": "UseSSL",
          "type": "boolean"
        },
        "useUsernameAndPassword": {
          "description": "UseUsernameAndPassword",
          "type": "boolean"
        },
        "validForTakeover": {
          "description": "ValidForTakeover",
          "type": "boolean"
        },
        "windowsCustomPorts": {
          "description": "WindowsCustomPorts",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfReportSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/ReportSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ReportSummary": {
      "description": "Report summary",
      "properties": {
        "categoryId": {
          "description": "Category ID",
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "description": "Whether the Report is active",
          "type": "boolean"
        },
        "id": {
          "description": "Report ID",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Report name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportCreateArgs": {
      "description": "Report create options",
      "required": [
        "name",
        "description",
        "categoryId",
        "reportSql"
      ],
      "properties": {
        "categoryId": {
          "description": "The Category that the report should be in",
          "type": "integer",
          "format": "int32"
        },
        "chartType": {
          "description": "The Chart type to use for the report",
          "type": "string"
        },
        "description": {
          "description": "The description of the new report",
          "type": "string"
        },
        "dualControlApproval": {
          "$ref": "#/definitions/DualControlApproval",
          "description": "The Dual control approval needed to create the report"
        },
        "is3DReport": {
          "description": "If the report chart should be 3D or not",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the new report",
          "type": "string"
        },
        "pageSize": {
          "description": "The number of records that the report should return per page",
          "type": "integer",
          "format": "int32"
        },
        "reportSql": {
          "description": "The SQL query that defines the report",
          "type": "string"
        },
        "useDatabasePaging": {
          "description": "If true the report will attempt to do paging in the database.  If false the paging will occur on the application server.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DualControlApproval": {
      "description": "The Dual control approval needed to create the report",
      "properties": {
        "domainId": {
          "description": "DomainId",
          "type": "integer",
          "format": "int32"
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "twoFactor": {
          "description": "TwoFactor",
          "type": "string"
        },
        "username": {
          "description": "Username",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportModel": {
      "description": "Report",
      "properties": {
        "categoryId": {
          "description": "The Report Category Id",
          "type": "integer",
          "format": "int32"
        },
        "chartType": {
          "description": "The report chart Type.  Null if no chart",
          "type": "string"
        },
        "description": {
          "description": "Report Description",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the Report is active",
          "type": "boolean"
        },
        "id": {
          "description": "Report ID",
          "type": "integer",
          "format": "int32"
        },
        "is3DReport": {
          "description": "Whether the Report chart is displayed in 3d",
          "type": "boolean"
        },
        "name": {
          "description": "Report name",
          "type": "string"
        },
        "pageSize": {
          "description": "The page size of the report",
          "type": "integer",
          "format": "int32"
        },
        "reportSql": {
          "description": "The SQL used to generate the report",
          "type": "string"
        },
        "systemReport": {
          "description": "Whether the Report is a system Report",
          "type": "boolean"
        },
        "useDatabasePaging": {
          "description": "When true paging of a report will be done in SQL server.  Not all SQL is compatible with this option.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ReportUpdateArgs": {
      "description": "Report update options",
      "required": [
        "id"
      ],
      "properties": {
        "categoryId": {
          "description": "The Category that the report should be in",
          "type": "integer",
          "format": "int32"
        },
        "chartType": {
          "description": "The Chart type to use for the report",
          "type": "string"
        },
        "description": {
          "description": "The description of the new report",
          "type": "string"
        },
        "dualControlApproval": {
          "$ref": "#/definitions/DualControlApproval",
          "description": "The Dual control approval needed to update the report"
        },
        "id": {
          "description": "The ID of the Report to update. Must match the value in the path",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "is3DReport": {
          "description": "If the report chart should be 3D or not",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the new report",
          "type": "string"
        },
        "pageSize": {
          "description": "The number of records that the report should return per page",
          "type": "integer",
          "format": "int32"
        },
        "reportSql": {
          "description": "The SQL query that defines the report",
          "type": "string"
        },
        "useDatabasePaging": {
          "description": "If true the report will attempt to do paging in the database.  If false the paging will occur on the application server.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfReportAuditSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/ReportAuditSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ReportAuditSummary": {
      "description": "Report Audit Summary",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "auditReportId": {
          "description": "Audit Report Id",
          "type": "integer",
          "format": "int32"
        },
        "database": {
          "description": "Database",
          "type": "string"
        },
        "dateRecorded": {
          "description": "Date Recorded",
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "description": "Display Name",
          "type": "string"
        },
        "ipAddress": {
          "description": "IP Address",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        },
        "reportName": {
          "description": "Report Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportDefaultParams": {
      "description": "ReportExecution",
      "properties": {
        "defaultParameterValues": {
          "description": "DefaultParameterValues",
          "items": {
            "$ref": "#/definitions/ICustomReportParameterValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ICustomReportParameterValue": {
      "description": "DefaultParameterValues",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Object",
          "description": "Value"
        },
        "valueDisplayName": {
          "description": "ValueDisplayName",
          "type": "string"
        },
        "variableName": {
          "description": "VariableName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Object": {
      "description": "Value",
      "properties": {},
      "type": "object"
    },
    "ReportEmailArgs": {
      "description": "Report Email Args",
      "properties": {
        "data": {
          "$ref": "#/definitions/ReportEmailModel",
          "description": "Report Email Data"
        }
      },
      "type": "object"
    },
    "ReportEmailModel": {
      "description": "Report Email Model",
      "properties": {
        "emailAddress": {
          "description": "Email Address to which the report will be sent",
          "type": "string"
        },
        "format": {
          "$ref": "#/definitions/ReportFormat",
          "description": "Format of the data of report"
        },
        "parameters": {
          "description": "Report Parameters to be used for the report execution",
          "items": {
            "$ref": "#/definitions/ReportParameterValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReportFormat": {
      "description": "Format of the data of report",
      "properties": {},
      "type": "string",
      "enum": [
        "Html",
        "Csv"
      ]
    },
    "ReportParameterValue": {
      "description": "Report Parameters to be used for the report execution",
      "properties": {
        "name": {
          "description": "Name of the Report Parameter",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Object",
          "description": "Value of the Report Parameter"
        },
        "valueDisplayName": {
          "description": "A display name representing the value.  For example, when a parameter is a user this will be the user display name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportEmailResponse": {
      "description": "Report Email Response",
      "properties": {
        "success": {
          "description": "Success",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UndeleteReportResponse": {
      "description": "UndeleteReportResponse",
      "properties": {
        "success": {
          "description": "Success",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ReportCategory": {
      "description": "ReportCategory[]",
      "properties": {
        "description": {
          "description": "The report category description",
          "type": "string"
        },
        "id": {
          "description": "The Id value of the report category",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The name of the report category",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportCategoryCreateArgs": {
      "description": "Report Category Create Args",
      "properties": {
        "data": {
          "$ref": "#/definitions/ReportCategoryCreateModel",
          "description": "Report Category Data"
        }
      },
      "type": "object"
    },
    "ReportCategoryCreateModel": {
      "description": "Report Category Create Model",
      "properties": {
        "reportCategoryDescription": {
          "description": "Report Category Description",
          "type": "string"
        },
        "reportCategoryName": {
          "description": "Report Category Name",
          "type": "string"
        },
        "sortOrder": {
          "description": "Report Category Sort Order, when null will be added at the end",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ReportCategoryDetailModel": {
      "description": "Report Category Detail",
      "properties": {
        "reportCategoryDescription": {
          "description": "Report Category Description",
          "type": "string"
        },
        "reportCategoryId": {
          "description": "Report Category Id",
          "type": "integer",
          "format": "int32"
        },
        "reportCategoryName": {
          "description": "Report Category Name",
          "type": "string"
        },
        "sortOrder": {
          "description": "Sort Order in which the category should appear",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ReportCategoryUpdateArgs": {
      "description": "Report Category Update Args",
      "properties": {
        "data": {
          "$ref": "#/definitions/ReportCategoryUpdateModel",
          "description": "Report Category Update Data"
        }
      },
      "type": "object"
    },
    "ReportCategoryUpdateModel": {
      "description": "Report Category Update Model",
      "properties": {
        "reportCategoryDescription": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Report Category Description"
        },
        "reportCategoryName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Report Category Name"
        }
      },
      "type": "object"
    },
    "ReportChartType": {
      "description": "ReportChartType[]",
      "properties": {
        "id": {
          "description": "The int value of the report chart type",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The name of the report chart type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportExecuteArgs": {
      "description": "Report query options",
      "properties": {
        "dualControlApproval": {
          "$ref": "#/definitions/DualControlApproval",
          "description": "The Dual Control approval value if the report is locked to Dual Control"
        },
        "encodeHtml": {
          "description": "True to encode data as HTML, defaults to true if not provided",
          "type": "boolean"
        },
        "endRecordNumber": {
          "description": "End Record Number when taking a specific set of records, passing this will override PageNumber and RecordsPerPage",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "The Id of the report to run. Optional: will use Name if provided",
          "type": "integer",
          "format": "int32"
        },
        "isAscending": {
          "description": "Flag determining sort direction of custom sort",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the report to run. Optional: will use Id if provided",
          "type": "string"
        },
        "orderByFieldOrdinal": {
          "description": "Ordinal of Field for custom OrderBy of results",
          "type": "integer",
          "format": "int32"
        },
        "pageNumber": {
          "description": "Page number for paging results. All records returned if null",
          "type": "integer",
          "format": "int32"
        },
        "parameters": {
          "description": "The parameters of the report",
          "items": {
            "$ref": "#/definitions/ReportParameter"
          },
          "type": "array"
        },
        "previewSql": {
          "description": "When passed the report will be previewed with this sql",
          "type": "string"
        },
        "recordsPerPage": {
          "description": "Number of records per page for paging results",
          "type": "integer",
          "format": "int32"
        },
        "startRecordNumber": {
          "description": "Start Record Number when taking a specific set of records, passing this will override PageNumber and RecordsPerPage",
          "type": "integer",
          "format": "int32"
        },
        "useDefaultParameters": {
          "description": "If a report contains a parameter but it is not passed the default value will be used on the server",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ReportParameter": {
      "description": "The parameters of the report",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportExecuteModel": {
      "description": "ReportExecution",
      "properties": {
        "columns": {
          "description": "Array of column names.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "columnTypes": {
          "description": "Array of column types",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "enabled": {
          "description": "Whether the Report is active",
          "type": "boolean"
        },
        "id": {
          "description": "Report ID",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Report name",
          "type": "string"
        },
        "reportPreviewSql": {
          "description": "When passed this SQL will be used to run the report in a preview mode.  Used for testing SQL but not updating the report.",
          "type": "string"
        },
        "rows": {
          "description": "Rows of report data.",
          "items": {
            "items": {
              "$ref": "#/definitions/Object"
            },
            "type": "array"
          },
          "type": "array"
        },
        "systemReport": {
          "description": "Whether the Report is a system Report",
          "type": "boolean"
        },
        "totalRowCount": {
          "description": "Total number of rows",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ReportExportArgs": {
      "description": "Report query options",
      "properties": {
        "delimiter": {
          "description": "Delimiter",
          "type": "string"
        },
        "dualControlApproval": {
          "$ref": "#/definitions/DualControlApproval",
          "description": "The Dual Control approval value if the report is locked to Dual Control"
        },
        "encodeHtml": {
          "description": "True to encode data as HTML, defaults to true if not provided",
          "type": "boolean"
        },
        "endRecordNumber": {
          "description": "End Record Number when taking a specific set of records, passing this will override PageNumber and RecordsPerPage",
          "type": "integer",
          "format": "int32"
        },
        "format": {
          "description": "Format",
          "type": "string"
        },
        "id": {
          "description": "The Id of the report to run. Optional: will use Name if provided",
          "type": "integer",
          "format": "int32"
        },
        "isAscending": {
          "description": "Flag determining sort direction of custom sort",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the report to run. Optional: will use Id if provided",
          "type": "string"
        },
        "orderByFieldOrdinal": {
          "description": "Ordinal of Field for custom OrderBy of results",
          "type": "integer",
          "format": "int32"
        },
        "pageNumber": {
          "description": "Page number for paging results. All records returned if null",
          "type": "integer",
          "format": "int32"
        },
        "parameters": {
          "description": "The parameters of the report",
          "items": {
            "$ref": "#/definitions/ReportParameter"
          },
          "type": "array"
        },
        "previewSql": {
          "description": "When passed the report will be previewed with this sql",
          "type": "string"
        },
        "recordsPerPage": {
          "description": "Number of records per page for paging results",
          "type": "integer",
          "format": "int32"
        },
        "startRecordNumber": {
          "description": "Start Record Number when taking a specific set of records, passing this will override PageNumber and RecordsPerPage",
          "type": "integer",
          "format": "int32"
        },
        "timeZone": {
          "description": "TimeZone",
          "type": "string"
        },
        "useDefaultParameters": {
          "description": "If a report contains a parameter but it is not passed the default value will be used on the server",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfReportLookup": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/ReportLookup"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ReportLookup": {
      "description": "Simple Report representation",
      "properties": {
        "id": {
          "description": "Report ID",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Report name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IPagingOfReportScheduleSummaryModel": {
      "description": "IPagingOfReportScheduleSummaryModel",
      "properties": {
        "records": {
          "description": "Records",
          "items": {
            "$ref": "#/definitions/ReportScheduleSummaryModel"
          },
          "type": "array"
        },
        "sortBy": {
          "description": "SortBy",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReportScheduleSummaryModel": {
      "description": "Report Schedule Summary",
      "properties": {
        "changeType": {
          "$ref": "#/definitions/ScheduleChangeType",
          "description": "Schedule Change Type"
        },
        "deleted": {
          "description": "Deleted",
          "type": "boolean"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "lastRun": {
          "description": "DateTime of Last Run",
          "type": "string",
          "format": "date-time"
        },
        "lastRunHistoryId": {
          "description": "HistoryId of Last Run",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "reportId": {
          "description": "Report Id",
          "type": "integer",
          "format": "int32"
        },
        "reportName": {
          "description": "Report Name",
          "type": "string"
        },
        "scheduleReportId": {
          "description": "Schedule Report Id",
          "type": "integer",
          "format": "int32"
        },
        "sendEmail": {
          "description": "Send Report via Email",
          "type": "boolean"
        },
        "storedReportCount": {
          "description": "Number of reports stored for this schedule",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ScheduleChangeType": {
      "description": "Schedule Change Type",
      "properties": {},
      "type": "string",
      "enum": [
        "Daily",
        "Weekly",
        "Monthly"
      ]
    },
    "ReportScheduleCreateArgs": {
      "description": "Report Schedule Create Args",
      "properties": {
        "data": {
          "$ref": "#/definitions/ReportScheduleCreateModel",
          "description": "Report Schedule Data"
        }
      },
      "type": "object"
    },
    "ReportScheduleCreateModel": {
      "description": "Report Schedule Create Model",
      "properties": {
        "customParameterValue": {
          "description": "Custom Parameter Value",
          "type": "string"
        },
        "endDateParameterSpecificDateValue": {
          "description": "Specific Date Value for when Specfic date is specified for EndDateParameterValue",
          "type": "string",
          "format": "date-time"
        },
        "endDateParameterValue": {
          "description": "End Date Parameter Value",
          "type": "string"
        },
        "folderParameterValue": {
          "description": "Folder Parameter Value",
          "type": "integer",
          "format": "int32"
        },
        "groupParameterValue": {
          "description": "Group Parameter Value",
          "type": "integer",
          "format": "int32"
        },
        "reportId": {
          "description": "Report Id",
          "type": "integer",
          "format": "int32"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleCreateModel",
          "description": "Schedule"
        },
        "startDateParameterSpecificDateValue": {
          "description": "Specific Date Value for when Specfic date is specified for StartDateParameterValue",
          "type": "string",
          "format": "date-time"
        },
        "startDateParameterValue": {
          "description": "Start Date Parameter Value",
          "type": "string"
        },
        "userParameterValue": {
          "description": "User Parameter Value",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ScheduleCreateModel": {
      "description": "Schedule Create Model",
      "properties": {
        "additionalEmailAddresses": {
          "description": "Additional email addresses to receive the email",
          "type": "string"
        },
        "changeType": {
          "$ref": "#/definitions/ScheduleChangeType",
          "description": "Schedule Change Type"
        },
        "days": {
          "description": "Days of Recurrence if Daily ScheduleType",
          "type": "integer",
          "format": "int32"
        },
        "emailGroups": {
          "description": "Groups to receive the email",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "friday": {
          "description": "Occurs on Fridays when set if Weekly ScheduleType",
          "type": "boolean"
        },
        "healthCheck": {
          "description": "Health Check",
          "type": "boolean"
        },
        "historySize": {
          "description": "The number of generated reports that will be saved. Null if All",
          "type": "integer",
          "format": "int32"
        },
        "monday": {
          "description": "Occurs on Mondays when set if Weekly ScheduleType",
          "type": "boolean"
        },
        "monthlyDay": {
          "description": "Day(s) used if DayOfWeekMonth and Monthly ScheduleType",
          "type": "string"
        },
        "monthlyDayOfMonth": {
          "description": "Day of Month if DayOfMonth and Monthly ScheduleType",
          "type": "integer",
          "format": "int32"
        },
        "monthlyDayOrder": {
          "description": "Day Order used if DayOfWeekMonth and Monthly ScheduleType",
          "type": "string"
        },
        "monthlyDayOrderRecurrence": {
          "description": "Months of Recurrence if DayOfWeekMonth and Monthly ScheduleType",
          "type": "integer",
          "format": "int32"
        },
        "monthlyDayRecurrence": {
          "description": "Months of Recurrence if DayOfMonth and Monthly ScheduleType",
          "type": "integer",
          "format": "int32"
        },
        "monthlyScheduleType": {
          "description": "Selection used if Monthly ScheduleType",
          "type": "string"
        },
        "saturday": {
          "description": "Occurs on Saturdays when set if Weekly ScheduleType",
          "type": "boolean"
        },
        "scheduleName": {
          "description": "Schedule Name",
          "type": "string"
        },
        "sendEmail": {
          "description": "Send Report via Email",
          "type": "boolean"
        },
        "sendEmailWithHighPriority": {
          "description": "Send Email With High Priority",
          "type": "boolean"
        },
        "startingOn": {
          "description": "Day for Report Schedule to start",
          "type": "string",
          "format": "date-time"
        },
        "sunday": {
          "description": "Occurs on Sundays when set if Weekly ScheduleType",
          "type": "boolean"
        },
        "thursday": {
          "description": "Occurs on Thursdays when set if Weekly ScheduleType",
          "type": "boolean"
        },
        "tuesday": {
          "description": "Occurs on Tuesdays when set if Weekly ScheduleType",
          "type": "boolean"
        },
        "wednesday": {
          "description": "Occurs on Wednesdays when set if Weekly ScheduleType",
          "type": "boolean"
        },
        "weeks": {
          "description": "Weeks of Recurrence if Weekly ScheduleType",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ReportScheduleModel": {
      "description": "Report Schedule Model",
      "properties": {
        "customParameterValue": {
          "description": "Custom Parameter Value",
          "type": "string"
        },
        "endDateParameterSpecificDateValue": {
          "description": "Specific Date Value for when Specfic date is specified for EndDateParameterValue",
          "type": "string",
          "format": "date-time"
        },
        "endDateParameterValue": {
          "description": "End Date Parameter Value",
          "type": "string"
        },
        "folderParameterValue": {
          "$ref": "#/definitions/ReportParameterValue",
          "description": "Folder Parameter Value"
        },
        "format": {
          "$ref": "#/definitions/ReportFormat",
          "description": "How to show the report when emailed. Default is Inline which shows the report within the email. Otherwise, it will be an attachment in the selected format."
        },
        "groupParameterValue": {
          "$ref": "#/definitions/ReportParameterValue",
          "description": "Group Parameter Value"
        },
        "reportId": {
          "description": "Report Id",
          "type": "integer",
          "format": "int32"
        },
        "reportName": {
          "description": "Report Name",
          "type": "string"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleViewModel",
          "description": "Schedule"
        },
        "scheduleReportId": {
          "description": "Schedule Report Id",
          "type": "integer",
          "format": "int32"
        },
        "startDateParameterSpecificDateValue": {
          "description": "Specific Date Value for when Specfic date is specified for StartDateParameterValue",
          "type": "string",
          "format": "date-time"
        },
        "startDateParameterValue": {
          "description": "Start Date Parameter Value",
          "type": "string"
        },
        "userParameterValue": {
          "$ref": "#/definitions/ReportParameterValue",
          "description": "User Parameter Value"
        }
      },
      "type": "object"
    },
    "ScheduleViewModel": {
      "description": "Schedule",
      "properties": {
        "additionalEmailAddresses": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "AdditionalEmailAddresses"
        },
        "changeType": {
          "$ref": "#/definitions/ViewFieldValueOfScheduleChangeType",
          "description": "ChangeType"
        },
        "days": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "Days"
        },
        "emailGroups": {
          "$ref": "#/definitions/ViewFieldValueOfReportSubscriber[]",
          "description": "EmailGroups"
        },
        "friday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Friday"
        },
        "healthCheck": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "HealthCheck"
        },
        "historySize": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "HistorySize"
        },
        "monday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Monday"
        },
        "monthlyDay": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalScheduleMonthlyDayType",
          "description": "MonthlyDay"
        },
        "monthlyDayOfMonth": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "MonthlyDayOfMonth"
        },
        "monthlyDayOrder": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalScheduleMonthlyDayOrderType",
          "description": "MonthlyDayOrder"
        },
        "monthlyDayOrderRecurrence": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "MonthlyDayOrderRecurrence"
        },
        "monthlyDayRecurrence": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "MonthlyDayRecurrence"
        },
        "monthlyScheduleType": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalScheduleMonthlyType",
          "description": "MonthlyScheduleType"
        },
        "saturday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Saturday"
        },
        "scheduleName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "ScheduleName"
        },
        "sendEmail": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "SendEmail"
        },
        "sendEmailWithHighPriority": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "SendEmailWithHighPriority"
        },
        "startingOn": {
          "$ref": "#/definitions/ViewFieldValueOfDateTime",
          "description": "StartingOn"
        },
        "sunday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Sunday"
        },
        "thursday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Thursday"
        },
        "tuesday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Tuesday"
        },
        "wednesday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Wednesday"
        },
        "weeks": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "Weeks"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfScheduleChangeType": {
      "description": "ChangeType",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ScheduleChangeType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfReportSubscriber[]": {
      "description": "EmailGroups",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/ReportSubscriber"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReportSubscriber": {
      "description": "Value",
      "properties": {
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfOptionalScheduleMonthlyDayType": {
      "description": "MonthlyDay",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfOptionalScheduleMonthlyDayOrderType": {
      "description": "MonthlyDayOrder",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfOptionalScheduleMonthlyType": {
      "description": "MonthlyScheduleType",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfDateTime": {
      "description": "StartingOn",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "IPagingOfReportScheduleHistorySummaryModel": {
      "description": "IPagingOfReportScheduleHistorySummaryModel",
      "properties": {
        "records": {
          "description": "Records",
          "items": {
            "$ref": "#/definitions/ReportScheduleHistorySummaryModel"
          },
          "type": "array"
        },
        "sortBy": {
          "description": "SortBy",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReportScheduleHistorySummaryModel": {
      "description": "Report Schedule History Summary",
      "properties": {
        "dateRun": {
          "description": "Date Schedule was Run",
          "type": "string",
          "format": "date-time"
        },
        "scheduleReportHistoryId": {
          "description": "Id of Schedule Report History",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "HttpResponseMessage": {
      "description": "HttpResponseMessage",
      "properties": {
        "content": {
          "$ref": "#/definitions/HttpContent",
          "description": "Content"
        },
        "headers": {
          "$ref": "#/definitions/HttpResponseHeaders",
          "description": "Headers"
        },
        "isSuccessStatusCode": {
          "description": "IsSuccessStatusCode",
          "type": "boolean"
        },
        "reasonPhrase": {
          "description": "ReasonPhrase",
          "type": "string"
        },
        "requestMessage": {
          "$ref": "#/definitions/HttpRequestMessage",
          "description": "RequestMessage"
        },
        "statusCode": {
          "$ref": "#/definitions/HttpStatusCode",
          "description": "StatusCode"
        },
        "version": {
          "$ref": "#/definitions/Version",
          "description": "Version"
        }
      },
      "type": "object"
    },
    "HttpContent": {
      "description": "Content",
      "properties": {
        "headers": {
          "$ref": "#/definitions/HttpContentHeaders",
          "description": "Headers"
        }
      },
      "type": "object"
    },
    "HttpContentHeaders": {
      "description": "Headers",
      "properties": {
        "allow": {
          "description": "Allow",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "contentDisposition": {
          "$ref": "#/definitions/ContentDispositionHeaderValue",
          "description": "ContentDisposition"
        },
        "contentEncoding": {
          "description": "ContentEncoding",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "contentLanguage": {
          "description": "ContentLanguage",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "contentLength": {
          "description": "ContentLength",
          "type": "integer",
          "format": "int64"
        },
        "contentLocation": {
          "$ref": "#/definitions/Uri",
          "description": "ContentLocation"
        },
        "contentMD5": {
          "description": "ContentMD5",
          "type": "string",
          "format": "binary"
        },
        "contentRange": {
          "$ref": "#/definitions/ContentRangeHeaderValue",
          "description": "ContentRange"
        },
        "contentType": {
          "$ref": "#/definitions/MediaTypeHeaderValue",
          "description": "ContentType"
        },
        "expires": {
          "$ref": "#/definitions/OptionalDateTimeOffset",
          "description": "Expires"
        },
        "lastModified": {
          "$ref": "#/definitions/OptionalDateTimeOffset",
          "description": "LastModified"
        }
      },
      "type": "object"
    },
    "ContentDispositionHeaderValue": {
      "description": "ContentDisposition",
      "properties": {
        "creationDate": {
          "$ref": "#/definitions/OptionalDateTimeOffset",
          "description": "CreationDate"
        },
        "dispositionType": {
          "description": "DispositionType",
          "type": "string"
        },
        "fileName": {
          "description": "FileName",
          "type": "string"
        },
        "fileNameStar": {
          "description": "FileNameStar",
          "type": "string"
        },
        "modificationDate": {
          "$ref": "#/definitions/OptionalDateTimeOffset",
          "description": "ModificationDate"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters",
          "items": {
            "$ref": "#/definitions/NameValueHeaderValue"
          },
          "type": "array"
        },
        "readDate": {
          "$ref": "#/definitions/OptionalDateTimeOffset",
          "description": "ReadDate"
        },
        "size": {
          "description": "Size",
          "type": "integer",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "NameValueHeaderValue": {
      "description": "Parameters",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Uri": {
      "description": "ContentLocation",
      "properties": {
        "absolutePath": {
          "description": "AbsolutePath",
          "type": "string"
        },
        "absoluteUri": {
          "description": "AbsoluteUri",
          "type": "string"
        },
        "authority": {
          "description": "Authority",
          "type": "string"
        },
        "dnsSafeHost": {
          "description": "DnsSafeHost",
          "type": "string"
        },
        "fragment": {
          "description": "Fragment",
          "type": "string"
        },
        "host": {
          "description": "Host",
          "type": "string"
        },
        "hostNameType": {
          "$ref": "#/definitions/UriHostNameType",
          "description": "HostNameType"
        },
        "idnHost": {
          "description": "IdnHost",
          "type": "string"
        },
        "isAbsoluteUri": {
          "description": "IsAbsoluteUri",
          "type": "boolean"
        },
        "isDefaultPort": {
          "description": "IsDefaultPort",
          "type": "boolean"
        },
        "isFile": {
          "description": "IsFile",
          "type": "boolean"
        },
        "isLoopback": {
          "description": "IsLoopback",
          "type": "boolean"
        },
        "isUnc": {
          "description": "IsUnc",
          "type": "boolean"
        },
        "localPath": {
          "description": "LocalPath",
          "type": "string"
        },
        "originalString": {
          "description": "OriginalString",
          "type": "string"
        },
        "pathAndQuery": {
          "description": "PathAndQuery",
          "type": "string"
        },
        "port": {
          "description": "Port",
          "type": "integer",
          "format": "int32"
        },
        "query": {
          "description": "Query",
          "type": "string"
        },
        "scheme": {
          "description": "Scheme",
          "type": "string"
        },
        "segments": {
          "description": "Segments",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userEscaped": {
          "description": "UserEscaped",
          "type": "boolean"
        },
        "userInfo": {
          "description": "UserInfo",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UriHostNameType": {
      "description": "HostNameType",
      "properties": {},
      "type": "string",
      "enum": [
        "Unknown",
        "Basic",
        "Dns",
        "IPv4",
        "IPv6"
      ]
    },
    "ContentRangeHeaderValue": {
      "description": "ContentRange",
      "properties": {
        "from": {
          "description": "From",
          "type": "integer",
          "format": "int64"
        },
        "hasLength": {
          "description": "HasLength",
          "type": "boolean"
        },
        "hasRange": {
          "description": "HasRange",
          "type": "boolean"
        },
        "length": {
          "description": "Length",
          "type": "integer",
          "format": "int64"
        },
        "to": {
          "description": "To",
          "type": "integer",
          "format": "int64"
        },
        "unit": {
          "description": "Unit",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MediaTypeHeaderValue": {
      "description": "ContentType",
      "properties": {
        "charSet": {
          "description": "CharSet",
          "type": "string"
        },
        "mediaType": {
          "description": "MediaType",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters",
          "items": {
            "$ref": "#/definitions/NameValueHeaderValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "HttpResponseHeaders": {
      "description": "Headers",
      "properties": {
        "acceptRanges": {
          "description": "AcceptRanges",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "age": {
          "description": "Age",
          "type": "string",
          "format": "time-span"
        },
        "cacheControl": {
          "$ref": "#/definitions/CacheControlHeaderValue",
          "description": "CacheControl"
        },
        "connection": {
          "description": "Connection",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "connectionClose": {
          "description": "ConnectionClose",
          "type": "boolean"
        },
        "date": {
          "$ref": "#/definitions/OptionalDateTimeOffset",
          "description": "Date"
        },
        "eTag": {
          "$ref": "#/definitions/EntityTagHeaderValue",
          "description": "ETag"
        },
        "location": {
          "$ref": "#/definitions/Uri",
          "description": "Location"
        },
        "pragma": {
          "description": "Pragma",
          "items": {
            "$ref": "#/definitions/NameValueHeaderValue"
          },
          "type": "array"
        },
        "proxyAuthenticate": {
          "description": "ProxyAuthenticate",
          "items": {
            "$ref": "#/definitions/AuthenticationHeaderValue"
          },
          "type": "array"
        },
        "retryAfter": {
          "$ref": "#/definitions/RetryConditionHeaderValue",
          "description": "RetryAfter"
        },
        "server": {
          "description": "Server",
          "items": {
            "$ref": "#/definitions/ProductInfoHeaderValue"
          },
          "type": "array"
        },
        "trailer": {
          "description": "Trailer",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "transferEncoding": {
          "description": "TransferEncoding",
          "items": {
            "$ref": "#/definitions/TransferCodingHeaderValue"
          },
          "type": "array"
        },
        "transferEncodingChunked": {
          "description": "TransferEncodingChunked",
          "type": "boolean"
        },
        "upgrade": {
          "description": "Upgrade",
          "items": {
            "$ref": "#/definitions/ProductHeaderValue"
          },
          "type": "array"
        },
        "vary": {
          "description": "Vary",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "via": {
          "description": "Via",
          "items": {
            "$ref": "#/definitions/ViaHeaderValue"
          },
          "type": "array"
        },
        "warning": {
          "description": "Warning",
          "items": {
            "$ref": "#/definitions/WarningHeaderValue"
          },
          "type": "array"
        },
        "wwwAuthenticate": {
          "description": "WwwAuthenticate",
          "items": {
            "$ref": "#/definitions/AuthenticationHeaderValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CacheControlHeaderValue": {
      "description": "CacheControl",
      "properties": {
        "extensions": {
          "description": "Extensions",
          "items": {
            "$ref": "#/definitions/NameValueHeaderValue"
          },
          "type": "array"
        },
        "maxAge": {
          "description": "MaxAge",
          "type": "string",
          "format": "time-span"
        },
        "maxStale": {
          "description": "MaxStale",
          "type": "boolean"
        },
        "maxStaleLimit": {
          "description": "MaxStaleLimit",
          "type": "string",
          "format": "time-span"
        },
        "minFresh": {
          "description": "MinFresh",
          "type": "string",
          "format": "time-span"
        },
        "mustRevalidate": {
          "description": "MustRevalidate",
          "type": "boolean"
        },
        "noCache": {
          "description": "NoCache",
          "type": "boolean"
        },
        "noCacheHeaders": {
          "description": "NoCacheHeaders",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "noStore": {
          "description": "NoStore",
          "type": "boolean"
        },
        "noTransform": {
          "description": "NoTransform",
          "type": "boolean"
        },
        "onlyIfCached": {
          "description": "OnlyIfCached",
          "type": "boolean"
        },
        "private": {
          "description": "Private",
          "type": "boolean"
        },
        "privateHeaders": {
          "description": "PrivateHeaders",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "proxyRevalidate": {
          "description": "ProxyRevalidate",
          "type": "boolean"
        },
        "public": {
          "description": "Public",
          "type": "boolean"
        },
        "sharedMaxAge": {
          "description": "SharedMaxAge",
          "type": "string",
          "format": "time-span"
        }
      },
      "type": "object"
    },
    "EntityTagHeaderValue": {
      "description": "ETag",
      "properties": {
        "isWeak": {
          "description": "IsWeak",
          "type": "boolean"
        },
        "tag": {
          "description": "Tag",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuthenticationHeaderValue": {
      "description": "ProxyAuthenticate",
      "properties": {
        "parameter": {
          "description": "Parameter",
          "type": "string"
        },
        "scheme": {
          "description": "Scheme",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RetryConditionHeaderValue": {
      "description": "RetryAfter",
      "properties": {
        "date": {
          "$ref": "#/definitions/OptionalDateTimeOffset",
          "description": "Date"
        },
        "delta": {
          "description": "Delta",
          "type": "string",
          "format": "time-span"
        }
      },
      "type": "object"
    },
    "ProductInfoHeaderValue": {
      "description": "Server",
      "properties": {
        "comment": {
          "description": "Comment",
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/ProductHeaderValue",
          "description": "Product"
        }
      },
      "type": "object"
    },
    "ProductHeaderValue": {
      "description": "Product",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "version": {
          "description": "Version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TransferCodingHeaderValue": {
      "description": "TransferEncoding",
      "properties": {
        "parameters": {
          "description": "Parameters",
          "items": {
            "$ref": "#/definitions/NameValueHeaderValue"
          },
          "type": "array"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViaHeaderValue": {
      "description": "Via",
      "properties": {
        "comment": {
          "description": "Comment",
          "type": "string"
        },
        "protocolName": {
          "description": "ProtocolName",
          "type": "string"
        },
        "protocolVersion": {
          "description": "ProtocolVersion",
          "type": "string"
        },
        "receivedBy": {
          "description": "ReceivedBy",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WarningHeaderValue": {
      "description": "Warning",
      "properties": {
        "agent": {
          "description": "Agent",
          "type": "string"
        },
        "code": {
          "description": "Code",
          "type": "integer",
          "format": "int32"
        },
        "date": {
          "$ref": "#/definitions/OptionalDateTimeOffset",
          "description": "Date"
        },
        "text": {
          "description": "Text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "HttpRequestMessage": {
      "description": "RequestMessage",
      "properties": {},
      "type": "object"
    },
    "HttpStatusCode": {
      "description": "StatusCode",
      "properties": {},
      "type": "string",
      "enum": [
        "Continue",
        "SwitchingProtocols",
        "OK",
        "Created",
        "Accepted",
        "NonAuthoritativeInformation",
        "NoContent",
        "ResetContent",
        "PartialContent",
        "MultipleChoices",
        "Ambiguous",
        "MovedPermanently",
        "Moved",
        "Found",
        "Redirect",
        "SeeOther",
        "RedirectMethod",
        "NotModified",
        "UseProxy",
        "Unused",
        "TemporaryRedirect",
        "RedirectKeepVerb",
        "BadRequest",
        "Unauthorized",
        "PaymentRequired",
        "Forbidden",
        "NotFound",
        "MethodNotAllowed",
        "NotAcceptable",
        "ProxyAuthenticationRequired",
        "RequestTimeout",
        "Conflict",
        "Gone",
        "LengthRequired",
        "PreconditionFailed",
        "RequestEntityTooLarge",
        "RequestUriTooLong",
        "UnsupportedMediaType",
        "RequestedRangeNotSatisfiable",
        "ExpectationFailed",
        "UpgradeRequired",
        "InternalServerError",
        "NotImplemented",
        "BadGateway",
        "ServiceUnavailable",
        "GatewayTimeout",
        "HttpVersionNotSupported"
      ]
    },
    "Version": {
      "description": "Version",
      "properties": {
        "build": {
          "description": "Build",
          "type": "integer",
          "format": "int32"
        },
        "major": {
          "description": "Major",
          "type": "integer",
          "format": "int32"
        },
        "majorRevision": {
          "description": "MajorRevision",
          "type": "integer"
        },
        "minor": {
          "description": "Minor",
          "type": "integer",
          "format": "int32"
        },
        "minorRevision": {
          "description": "MinorRevision",
          "type": "integer"
        },
        "revision": {
          "description": "Revision",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ReportScheduleViewModel": {
      "description": "Report Schedule View Model",
      "properties": {
        "actions": {
          "description": "Actions the current user can perform for Resport Scheduling",
          "items": {
            "$ref": "#/definitions/ReportScheduleActionType"
          },
          "type": "array"
        },
        "customParameterValue": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Custom Parameter Value"
        },
        "deleted": {
          "description": "Deleted",
          "type": "boolean"
        },
        "endDateParameterSpecificDateValue": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalDateTime",
          "description": "Specific Date Value for when Specfic date is specified for EndDateParameterValue"
        },
        "endDateParameterValue": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalReportScheduleDateParameterType",
          "description": "End Date Parameter Value"
        },
        "folderParameterValue": {
          "$ref": "#/definitions/ViewFieldValueOfReportParameterValue",
          "description": "Folder Parameter Value"
        },
        "format": {
          "$ref": "#/definitions/ViewFieldDropDownValueOfReportFormat",
          "description": "How to show the report when emailed. Default is Inline which shows the report within the email. Otherwise, it will be an attachment in the selected format."
        },
        "groupParameterValue": {
          "$ref": "#/definitions/ViewFieldValueOfReportParameterValue",
          "description": "Group Parameter Value"
        },
        "reportId": {
          "description": "Report Id",
          "type": "integer",
          "format": "int32"
        },
        "reportName": {
          "description": "Report Name",
          "type": "string"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleViewModel",
          "description": "Schedule"
        },
        "scheduleReportId": {
          "description": "Schedule Report Id",
          "type": "integer",
          "format": "int32"
        },
        "startDateParameterSpecificDateValue": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalDateTime",
          "description": "Specific Date Value for when Specfic date is specified for StartDateParameterValue"
        },
        "startDateParameterValue": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalReportScheduleDateParameterType",
          "description": "Start Date Parameter Value"
        },
        "userParameterValue": {
          "$ref": "#/definitions/ViewFieldValueOfReportParameterValue",
          "description": "User Parameter Value"
        }
      },
      "type": "object"
    },
    "ReportScheduleActionType": {
      "description": "Actions the current user can perform for Resport Scheduling",
      "properties": {},
      "type": "string",
      "enum": [
        "EditSchedule",
        "DeleteSchedule"
      ]
    },
    "ViewFieldValueOfOptionalDateTime": {
      "description": "Specific Date Value for when Specfic date is specified for EndDateParameterValue",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfOptionalReportScheduleDateParameterType": {
      "description": "End Date Parameter Value",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfReportParameterValue": {
      "description": "Folder Parameter Value",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ReportParameterValue",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldDropDownValueOfReportFormat": {
      "description": "How to show the report when emailed. Default is Inline which shows the report within the email. Otherwise, it will be an attachment in the selected format.",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "dropDownOptions": {
          "description": "DropDownOptions",
          "items": {
            "$ref": "#/definitions/ViewFieldDropDownOption"
          },
          "type": "array"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ReportFormat",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ReportScheduleUpdateArgs": {
      "description": "Report Schedule Update Args",
      "properties": {
        "data": {
          "$ref": "#/definitions/ReportScheduleUpdateModel",
          "description": "Report Schedule Update Data"
        }
      },
      "type": "object"
    },
    "ReportScheduleUpdateModel": {
      "description": "Report Schedule Update Model",
      "properties": {
        "customParameterValue": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Custom Parameter Value"
        },
        "endDateParameterSpecificDateValue": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalDateTime",
          "description": "Specific Date Value for when Specfic date is specified for EndDateParameterValue"
        },
        "endDateParameterValue": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalReportScheduleDateParameterType",
          "description": "End Date Parameter Value"
        },
        "folderParameterValue": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Folder Parameter Value"
        },
        "format": {
          "$ref": "#/definitions/UpdateFieldValueOfReportFormat",
          "description": "How to show the report when emailed. Inline will show the report within the email. Otherwise, it will be an attachment."
        },
        "groupParameterValue": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Group Parameter Value"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleUpdateModel",
          "description": "Schedule"
        },
        "startDateParameterSpecificDateValue": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalDateTime",
          "description": "Specific Date Value for when Specfic date is specified for StartDateParameterValue"
        },
        "startDateParameterValue": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalReportScheduleDateParameterType",
          "description": "Start Date Parameter Value"
        },
        "userParameterValue": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "User Parameter Value"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalReportScheduleDateParameterType": {
      "description": "End Date Parameter Value",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfReportFormat": {
      "description": "How to show the report when emailed. Inline will show the report within the email. Otherwise, it will be an attachment.",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/ReportFormat",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ScheduleUpdateModel": {
      "description": "Schedule",
      "properties": {
        "additionalEmailAddresses": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "AdditionalEmailAddresses"
        },
        "changeType": {
          "$ref": "#/definitions/UpdateFieldValueOfScheduleChangeType",
          "description": "ChangeType"
        },
        "days": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Days"
        },
        "emailGroups": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32[]",
          "description": "EmailGroups"
        },
        "friday": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Friday"
        },
        "healthCheck": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "HealthCheck"
        },
        "historySize": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "HistorySize"
        },
        "monday": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Monday"
        },
        "monthlyDay": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalScheduleMonthlyDayType",
          "description": "MonthlyDay"
        },
        "monthlyDayOfMonth": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "MonthlyDayOfMonth"
        },
        "monthlyDayOrder": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalScheduleMonthlyDayOrderType",
          "description": "MonthlyDayOrder"
        },
        "monthlyDayOrderRecurrence": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "MonthlyDayOrderRecurrence"
        },
        "monthlyDayRecurrence": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "MonthlyDayRecurrence"
        },
        "monthlyScheduleType": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalScheduleMonthlyType",
          "description": "MonthlyScheduleType"
        },
        "saturday": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Saturday"
        },
        "scheduleName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "ScheduleName"
        },
        "sendEmail": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "SendEmail"
        },
        "sendEmailWithHighPriority": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "SendEmailWithHighPriority"
        },
        "startingOn": {
          "$ref": "#/definitions/UpdateFieldValueOfDateTime",
          "description": "StartingOn"
        },
        "sunday": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Sunday"
        },
        "thursday": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Thursday"
        },
        "tuesday": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Tuesday"
        },
        "wednesday": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Wednesday"
        },
        "weeks": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Weeks"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfScheduleChangeType": {
      "description": "ChangeType",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/ScheduleChangeType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalScheduleMonthlyDayType": {
      "description": "MonthlyDay",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalScheduleMonthlyDayOrderType": {
      "description": "MonthlyDayOrder",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalScheduleMonthlyType": {
      "description": "MonthlyScheduleType",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LogicResultOfString[]": {
      "description": "LogicResultOfString[]",
      "properties": {
        "errors": {
          "description": "Errors",
          "items": {
            "$ref": "#/definitions/LogicError"
          },
          "type": "array"
        },
        "exceptions": {
          "description": "Exceptions",
          "items": {
            "$ref": "#/definitions/Exception"
          },
          "type": "array"
        },
        "friendlyMessageText": {
          "description": "FriendlyMessageText",
          "type": "string"
        },
        "messageText": {
          "description": "MessageText",
          "type": "string"
        },
        "model": {
          "description": "Model",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity"
        },
        "success": {
          "description": "Success",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LogicError": {
      "description": "Errors",
      "properties": {
        "code": {
          "description": "Code",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity"
        }
      },
      "type": "object"
    },
    "Exception": {
      "description": "Exceptions",
      "properties": {},
      "type": "object"
    },
    "PagingOfRoleModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/RoleModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "RoleModel": {
      "description": "Role",
      "properties": {
        "created": {
          "description": "Created",
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "description": "Enabled",
          "type": "boolean"
        },
        "id": {
          "description": "Role Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfSdkClientAccountSummaryAndSdkClientAccountFilter": {
      "description": "Specify filtering, paging, sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "filter": {
          "$ref": "#/definitions/SdkClientAccountFilter",
          "description": "Additional query options"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SdkClientAccountSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SdkClientAccountFilter": {
      "description": "Additional query options",
      "properties": {
        "operator": {
          "$ref": "#/definitions/FilterOperator",
          "description": "Operator"
        },
        "searchText": {
          "description": "SearchText",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "FilterOperator": {
      "description": "Operator",
      "properties": {},
      "type": "string",
      "enum": [
        "All",
        "Include",
        "Exclude"
      ]
    },
    "SdkClientAccountSummary": {
      "description": "Query results",
      "properties": {
        "clientId": {
          "description": "ClientId",
          "type": "string",
          "format": "uuid"
        },
        "details": {
          "description": "Details",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "ipAddress": {
          "description": "IpAddress",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "userDisplayName": {
          "description": "UserDisplayName",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SdkClientAccountCreateArgs": {
      "description": "SdkClientAccountCreateArgs",
      "required": [
        "name",
        "description",
        "ruleName"
      ],
      "properties": {
        "clientId": {
          "description": "ClientId",
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "onboardingKey": {
          "description": "OnboardingKey",
          "type": "string"
        },
        "ruleName": {
          "description": "RuleName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SdkClientAccountModel": {
      "description": "SdkClientAccountModel",
      "properties": {
        "clientId": {
          "description": "ClientId",
          "type": "string",
          "format": "uuid"
        },
        "clientSecret": {
          "description": "ClientSecret",
          "type": "string"
        },
        "details": {
          "description": "Details",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "ipAddress": {
          "description": "IpAddress",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "userDisplayName": {
          "description": "UserDisplayName",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SdkClientAccountUpdateArgs": {
      "description": "SdkClientAccountUpdateArgs",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfSdkClientAuditSummaryAndSdkClientAuditFilter": {
      "description": "Specify filtering, paging, sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "filter": {
          "$ref": "#/definitions/SdkClientAuditFilter",
          "description": "Additional query options"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SdkClientAuditSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SdkClientAuditFilter": {
      "description": "Additional query options",
      "properties": {
        "operator": {
          "$ref": "#/definitions/FilterOperator",
          "description": "Operator"
        },
        "searchText": {
          "description": "SearchText",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SdkClientAuditSummary": {
      "description": "Query results",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "correlationId": {
          "description": "CorrelationId",
          "type": "string",
          "format": "uuid"
        },
        "createdOn": {
          "description": "CreatedOn",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "ipAddress": {
          "description": "IpAddress",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        },
        "sdkClientAccountId": {
          "description": "SdkClientAccountId",
          "type": "integer",
          "format": "int32"
        },
        "sdkClientAccountName": {
          "description": "SdkClientAccountName",
          "type": "string"
        },
        "userDisplayName": {
          "description": "UserDisplayName",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfSdkClientRuleSummaryAndSdkClientRuleFilter": {
      "description": "Specify filtering, paging, sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "filter": {
          "$ref": "#/definitions/SdkClientRuleFilter",
          "description": "Additional query options"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SdkClientRuleSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SdkClientRuleFilter": {
      "description": "Additional query options",
      "properties": {
        "operator": {
          "$ref": "#/definitions/FilterOperator",
          "description": "Operator"
        },
        "searchText": {
          "description": "SearchText",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SdkClientRuleSummary": {
      "description": "Query results",
      "properties": {
        "details": {
          "description": "Details",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "requireOnboardingKey": {
          "description": "RequireOnboardingKey",
          "type": "boolean"
        },
        "userDisplayName": {
          "description": "UserDisplayName",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SdkClientRuleCreateArgs": {
      "description": "SdkClientRuleCreateArgs",
      "required": [
        "name"
      ],
      "properties": {
        "details": {
          "description": "Details",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "requireOnboardingKey": {
          "description": "RequireOnboardingKey",
          "type": "boolean"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SdkClientRuleModel": {
      "description": "SdkClientRuleModel",
      "properties": {
        "details": {
          "description": "Details",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "requireOnboardingKey": {
          "description": "RequireOnboardingKey",
          "type": "boolean"
        },
        "userDisplayName": {
          "description": "UserDisplayName",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SdkClientRuleUpdateArgs": {
      "description": "SdkClientRuleUpdateArgs",
      "required": [
        "name"
      ],
      "properties": {
        "details": {
          "description": "Details",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "requireOnboardingKey": {
          "description": "RequireOnboardingKey",
          "type": "boolean"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfSecretAccessModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretAccessModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretAccessModel": {
      "description": "The Secret Access model object",
      "properties": {
        "accessRequestWorkflowMapId": {
          "description": "The Id of the Access Request Workflow Map.",
          "type": "integer",
          "format": "int32"
        },
        "approverDisplayName": {
          "description": "The Display Name of the Approver of the request",
          "type": "string"
        },
        "completed": {
          "description": "Indicating if request has been completed",
          "type": "boolean"
        },
        "currentUserRestrictedFromReviewing": {
          "description": "Indicating if current user is restricted from viewing the request",
          "type": "boolean"
        },
        "expirationDate": {
          "description": "The Expriation Date of the request",
          "type": "string",
          "format": "date-time"
        },
        "folderId": {
          "description": "The Folder Id of the Secret associated to the access request.",
          "type": "integer",
          "format": "int32"
        },
        "hasWorkflow": {
          "description": "Indicating if request is associated to a Work Flow",
          "type": "boolean"
        },
        "requestComment": {
          "description": "The Comment of the request.",
          "type": "string"
        },
        "requestDate": {
          "description": "The Date of the request.",
          "type": "string",
          "format": "date-time"
        },
        "requestingUserId": {
          "description": "The Id of the User requesting access.",
          "type": "integer",
          "format": "int32"
        },
        "requestUsername": {
          "description": "The Username of the User requesting access.",
          "type": "string"
        },
        "responseComment": {
          "description": "The Comment of the response to the request",
          "type": "string"
        },
        "responseDate": {
          "description": "The Date of the response to the request",
          "type": "string",
          "format": "date-time"
        },
        "reviewStatusMessage": {
          "description": "The Review Status Message of the request",
          "type": "string"
        },
        "secretAccessRequestId": {
          "description": "The Id of the Secret Access Request.",
          "type": "integer",
          "format": "int32"
        },
        "secretId": {
          "description": "The Id of the Secret associated to the access request.",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "The Name of the Secret associated to the access request.",
          "type": "string"
        },
        "startDate": {
          "description": "The Start Date of the request.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/AccessRequestState",
          "description": "The Status of the request"
        },
        "statusDescription": {
          "description": "The Status Description of the request",
          "type": "string"
        },
        "ticketNumber": {
          "description": "The Ticket Number of the request",
          "type": "string"
        },
        "ticketSystemId": {
          "description": "The Ticket System Id of the request",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "AccessRequestState": {
      "description": "The Status of the request",
      "properties": {},
      "type": "string",
      "enum": [
        "WaitingForRequest",
        "Pending",
        "Approved",
        "Denied",
        "Canceled",
        "Expired"
      ]
    },
    "SecretAccessCreateArgs": {
      "description": "Secret Access Create paramaters",
      "required": [
        "secretId"
      ],
      "properties": {
        "expirationDate": {
          "description": "Expiration Date",
          "type": "string",
          "format": "date-time"
        },
        "requestComment": {
          "description": "Request Comment",
          "type": "string"
        },
        "secretId": {
          "description": "Secret Id",
          "type": "integer",
          "format": "int32"
        },
        "startDate": {
          "description": "Start Date",
          "type": "string",
          "format": "date-time"
        },
        "ticketNumber": {
          "description": "Ticket Number",
          "type": "string"
        },
        "ticketSystemId": {
          "description": "Ticket System ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretAccessUpdateArgs": {
      "description": "Secret Access Update paramaters",
      "properties": {
        "expirationDate": {
          "$ref": "#/definitions/DateTimeOffset",
          "description": "Expiration Date"
        },
        "responseComment": {
          "description": "Response Comment",
          "type": "string"
        },
        "secretAccessRequestId": {
          "description": "Secret Access Request Id",
          "type": "integer",
          "format": "int32"
        },
        "startDate": {
          "$ref": "#/definitions/DateTimeOffset",
          "description": "Start Date"
        },
        "status": {
          "$ref": "#/definitions/SecretAccessModelStatus",
          "description": "New status for the request: Pending, Approved, Denied, Canceled"
        }
      },
      "type": "object"
    },
    "DateTimeOffset": {
      "description": "Expiration Date",
      "properties": {
        "date": {
          "description": "Date",
          "type": "string",
          "format": "date-time"
        },
        "dateTime": {
          "description": "DateTime",
          "type": "string",
          "format": "date-time"
        },
        "day": {
          "description": "Day",
          "type": "integer",
          "format": "int32"
        },
        "dayOfWeek": {
          "$ref": "#/definitions/DayOfWeek",
          "description": "DayOfWeek"
        },
        "dayOfYear": {
          "description": "DayOfYear",
          "type": "integer",
          "format": "int32"
        },
        "hour": {
          "description": "Hour",
          "type": "integer",
          "format": "int32"
        },
        "localDateTime": {
          "description": "LocalDateTime",
          "type": "string",
          "format": "date-time"
        },
        "millisecond": {
          "description": "Millisecond",
          "type": "integer",
          "format": "int32"
        },
        "minute": {
          "description": "Minute",
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "description": "Month",
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "description": "Offset",
          "type": "string",
          "format": "time-span"
        },
        "second": {
          "description": "Second",
          "type": "integer",
          "format": "int32"
        },
        "ticks": {
          "description": "Ticks",
          "type": "integer",
          "format": "int64"
        },
        "timeOfDay": {
          "description": "TimeOfDay",
          "type": "string",
          "format": "time-span"
        },
        "utcDateTime": {
          "description": "UtcDateTime",
          "type": "string",
          "format": "date-time"
        },
        "utcTicks": {
          "description": "UtcTicks",
          "type": "integer",
          "format": "int64"
        },
        "year": {
          "description": "Year",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretAccessModelStatus": {
      "description": "New status for the request: Pending, Approved, Denied, Canceled",
      "properties": {},
      "type": "string",
      "enum": [
        "Pending",
        "Approved",
        "Denied",
        "Canceled"
      ]
    },
    "SecretAccessActionResultModel": {
      "description": "The Secret Access model object",
      "properties": {
        "accessRequestWorkflowMapId": {
          "description": "The Id of the Access Request Workflow Map.",
          "type": "integer",
          "format": "int32"
        },
        "actionResultMessage": {
          "description": "ActionResultMessage",
          "type": "string"
        },
        "approverDisplayName": {
          "description": "The Display Name of the Approver of the request",
          "type": "string"
        },
        "completed": {
          "description": "Indicating if request has been completed",
          "type": "boolean"
        },
        "currentUserRestrictedFromReviewing": {
          "description": "Indicating if current user is restricted from viewing the request",
          "type": "boolean"
        },
        "expirationDate": {
          "description": "The Expriation Date of the request",
          "type": "string",
          "format": "date-time"
        },
        "folderId": {
          "description": "The Folder Id of the Secret associated to the access request.",
          "type": "integer",
          "format": "int32"
        },
        "hasWorkflow": {
          "description": "Indicating if request is associated to a Work Flow",
          "type": "boolean"
        },
        "requestComment": {
          "description": "The Comment of the request.",
          "type": "string"
        },
        "requestDate": {
          "description": "The Date of the request.",
          "type": "string",
          "format": "date-time"
        },
        "requestingUserId": {
          "description": "The Id of the User requesting access.",
          "type": "integer",
          "format": "int32"
        },
        "requestUsername": {
          "description": "The Username of the User requesting access.",
          "type": "string"
        },
        "responseComment": {
          "description": "The Comment of the response to the request",
          "type": "string"
        },
        "responseDate": {
          "description": "The Date of the response to the request",
          "type": "string",
          "format": "date-time"
        },
        "reviewStatusMessage": {
          "description": "The Review Status Message of the request",
          "type": "string"
        },
        "secretAccessRequestId": {
          "description": "The Id of the Secret Access Request.",
          "type": "integer",
          "format": "int32"
        },
        "secretId": {
          "description": "The Id of the Secret associated to the access request.",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "The Name of the Secret associated to the access request.",
          "type": "string"
        },
        "startDate": {
          "description": "The Start Date of the request.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/AccessRequestState",
          "description": "The Status of the request"
        },
        "statusDescription": {
          "description": "The Status Description of the request",
          "type": "string"
        },
        "ticketNumber": {
          "description": "The Ticket Number of the request",
          "type": "string"
        },
        "ticketSystemId": {
          "description": "The Ticket System Id of the request",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfSecretAccessRequestHistoryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretAccessRequestHistoryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretAccessRequestHistoryModel": {
      "description": "Query results",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "dateRecorded": {
          "description": "DateRecorded",
          "type": "string",
          "format": "date-time"
        },
        "details": {
          "description": "Details",
          "type": "string"
        },
        "fullName": {
          "description": "FullName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretAccessOptionsModel": {
      "description": "SecretAccessOptionsModel",
      "properties": {
        "customCheckoutIntervalDays": {
          "description": "CustomCheckoutIntervalDays",
          "type": "integer",
          "format": "int32"
        },
        "customCheckoutIntervalHours": {
          "description": "CustomCheckoutIntervalHours",
          "type": "integer",
          "format": "int32"
        },
        "customCheckoutIntervalMinutes": {
          "description": "CustomCheckoutIntervalMinutes",
          "type": "integer",
          "format": "int32"
        },
        "editorsAlsoRequireApproval": {
          "description": "EditorsAlsoRequireApproval",
          "type": "boolean"
        },
        "enableDoubleLock": {
          "description": "EnableDoubleLock",
          "type": "boolean"
        },
        "enableRequiresApprovalForAccess": {
          "description": "EnableRequiresApprovalForAccess",
          "type": "boolean"
        },
        "isDefaultCheckoutInterval": {
          "description": "IsDefaultCheckoutInterval",
          "type": "boolean"
        },
        "ownersAndApproversAlsoRequireApproval": {
          "description": "OwnersAndApproversAlsoRequireApproval",
          "type": "boolean"
        },
        "requireCheckout": {
          "description": "RequireCheckout",
          "type": "boolean"
        },
        "requireCommentTicketNumber": {
          "description": "RequireCommentTicketNumber",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SecretAccessViewCommentArgs": {
      "description": "SecretAccessViewCommentArgs",
      "properties": {
        "comment": {
          "description": "Comment",
          "type": "string"
        },
        "ticketNumber": {
          "description": "Ticket Number",
          "type": "string"
        },
        "ticketSystemId": {
          "description": "Ticket System Id",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfSecretDependencySummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretDependencySummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretDependencySummary": {
      "description": "The Summary object for a Secret Dependency",
      "properties": {
        "enabled": {
          "description": "Whether or not this dependency is enabled",
          "type": "boolean"
        },
        "groupId": {
          "description": "The Id if the Dependency Groupd that containes the Secret Dependency",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "The Id of the Secret Dependency",
          "type": "integer",
          "format": "int32"
        },
        "machineName": {
          "description": "The machine name that the Secret Dependency runs on",
          "type": "string"
        },
        "order": {
          "description": "The order for this dependency within its group",
          "type": "integer",
          "format": "int32"
        },
        "runResult": {
          "$ref": "#/definitions/DependencyRunResultStatus",
          "description": "The last run result for this dependency"
        },
        "secretId": {
          "description": "The Id of the Secret that the Secret Dependency is assigned to",
          "type": "integer",
          "format": "int32"
        },
        "serviceName": {
          "description": "The service name of the Secret Dependency",
          "type": "string"
        },
        "typeId": {
          "description": "The Id of the type of Secret Dependency",
          "type": "integer",
          "format": "int32"
        },
        "typeName": {
          "description": "The name of the type of Secret Dependency",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DependencyRunResultStatus": {
      "description": "The last run result for this dependency",
      "properties": {},
      "type": "string",
      "enum": [
        "Success",
        "Failed",
        "NotRun"
      ]
    },
    "SecretDependencyCreateArgs": {
      "description": "The Secret Dependency Create Arguments object",
      "properties": {
        "active": {
          "description": "Whether or not the Secret Dependency is active.",
          "type": "boolean"
        },
        "conditionDependencyId": {
          "description": "The Id of the dependency that will be looked at when  Condition Mode is set to 'DEPENDENCYPASS', 'DEPENDENCYFAIL'. The Dependency must have a SortOrder lower than the current one.",
          "type": "integer",
          "format": "int32"
        },
        "conditionMode": {
          "description": "Condition Mode governs if this dependency's run relies on the result of other dependencies above it. The Default is ALWAYSRUN. Other values maybe 'All Pass', 'Any Fail', 'DEPENDENCYPASS', 'DEPENDENCYFAIL'.",
          "type": "string"
        },
        "dependencyTemplate": {
          "$ref": "#/definitions/SecretDependencyTemplate",
          "description": "The DependencyTemplate properties that are populated if the Dependency is based on a Dependency template."
        },
        "description": {
          "description": "A description for the Secret Dependency.",
          "type": "string"
        },
        "groupId": {
          "description": "The Id of the Dependency Group that contains the Secret Dependency. If set to default value of 0, it will be added to the first group on the secret.",
          "type": "integer",
          "format": "int32"
        },
        "machineName": {
          "description": "The machine name that the Secret Dependency runs on.",
          "type": "string"
        },
        "privilegedAccountSecretId": {
          "description": "The Id of the Privileged Secret that the Secret Dependency will use to run.",
          "type": "integer",
          "format": "int32"
        },
        "runScript": {
          "$ref": "#/definitions/SecretDependencyRunScript",
          "description": "The RunScript properties that are populated if the Dependency is directly running a script."
        },
        "secretId": {
          "description": "The Id of the Secret that the Secret Dependency is assigned to.",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "Read Only. The Name of the Secret that the Secret Dependency is assigned to.",
          "type": "string"
        },
        "serviceName": {
          "description": "The service name of the Secret Dependency.",
          "type": "string"
        },
        "settings": {
          "description": "The Settings used by the Secret Dependency. (Ex: WaitBeforeSeconds, Database, Port, SSHKeyDigest)",
          "items": {
            "$ref": "#/definitions/SecretDependencySettingMapForDisplay"
          },
          "type": "array"
        },
        "sortOrder": {
          "description": "The sort order of the Secret Dependency in the group.  Determines the order of execution of the dependencies within a group. If set to the default value of 0, the dependency will be added at the end of the group. If less than zero the dependency will be added as the first dependency in the group and all other dependencies in the group will be adjusted.",
          "type": "integer",
          "format": "int32"
        },
        "sshKeySecretId": {
          "description": "The Id of the Secret containing the SSH key. (If dependency is tied to SSH key Secret)",
          "type": "integer",
          "format": "int32"
        },
        "typeId": {
          "description": "The Id of the type of Secret Dependency.",
          "type": "integer",
          "format": "int32"
        },
        "typeName": {
          "description": "Read Only. The name of the type of Secret Dependency.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDependencyTemplate": {
      "description": "Object filled and used for Secret Dependencies that refer to a Dependency Template",
      "properties": {
        "changerScriptId": {
          "description": "The id of the script (if any) used by the Dependency Template",
          "type": "integer",
          "format": "int32"
        },
        "dependencyScanItemFields": {
          "description": "The Scan Item Fields used by the Dependency Template",
          "items": {
            "$ref": "#/definitions/SecretDependencyScanItemField"
          },
          "type": "array"
        },
        "scriptName": {
          "description": "The name of the script (if any) used by the Dependency Template",
          "type": "string"
        },
        "secretDependencyChangerId": {
          "description": "The id of the Dependency Changer used by the Dependency Template",
          "type": "integer",
          "format": "int32"
        },
        "secretDependencyTemplateId": {
          "description": "The id of the Dependency Template",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretDependencyScanItemField": {
      "description": "Represents the ScanItemField used for Discovery dependency matching",
      "properties": {
        "id": {
          "description": "Id of the ScanItemField",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the ScanItemField",
          "type": "string"
        },
        "parentName": {
          "description": "ScanItemField Parent name.  Will Match Name if no parent is inherited.",
          "type": "string"
        },
        "value": {
          "description": "Value of the ScanItemField",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDependencyRunScript": {
      "description": "The RunScript details of a Dependency that directly runs a Script",
      "properties": {
        "machineName": {
          "description": "The machine name that the Secret Dependency runs on",
          "type": "string"
        },
        "odbcConnectionArguments": {
          "description": "Connection arguments used for ODBC connections",
          "items": {
            "$ref": "#/definitions/SecretDependencyOdbcConnectionArg"
          },
          "type": "array"
        },
        "scriptArguments": {
          "description": "Parameter script arguments used by the script",
          "items": {
            "$ref": "#/definitions/SecretDependencyUniversalScriptArgument"
          },
          "type": "array"
        },
        "scriptId": {
          "description": "The Id of the script that the Secret Dependency runs. (If directly running a script)",
          "type": "integer",
          "format": "int32"
        },
        "scriptName": {
          "description": "The Name of the script that the Secret Dependency runs.",
          "type": "string"
        },
        "serviceName": {
          "description": "The service name of the Secret Dependency",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDependencyOdbcConnectionArg": {
      "description": "Connection arguments used for ODBC connections",
      "properties": {
        "name": {
          "description": "Name of the argument",
          "type": "string"
        },
        "value": {
          "description": "Value for the argument",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDependencyUniversalScriptArgument": {
      "description": "Arguments used for Run Script Dependencies",
      "properties": {
        "name": {
          "description": "Name of the argument",
          "type": "string"
        },
        "type": {
          "description": "Argument type",
          "type": "string"
        },
        "value": {
          "description": "Argument value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDependencySettingMapForDisplay": {
      "description": "Settings used by Secret Dependency Templates",
      "properties": {
        "changerSettingValue": {
          "description": "The default read-only setting value on the changer that will be used if no setting value has been given.",
          "type": "string"
        },
        "setting": {
          "$ref": "#/definitions/SecretDependencySetting",
          "description": "The read-only Setting details."
        },
        "settingId": {
          "description": "The Setting Id",
          "type": "integer",
          "format": "int32"
        },
        "settingName": {
          "description": "The Setting Name",
          "type": "string"
        },
        "settingValue": {
          "description": "The value for the setting that will be stored in the database.  This value should be set when editing or creating a Dependency. If not set the default value will be calculated by looking at the Changer or Script.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDependencySetting": {
      "description": "Secret Dependency Settings - Mostly used internally",
      "properties": {
        "active": {
          "description": "Indicates the setting is active.",
          "type": "boolean"
        },
        "canEdit": {
          "description": "Indicates the setting details may be editted.",
          "type": "boolean"
        },
        "canEditValue": {
          "description": "Indicates the setting value may be editted.",
          "type": "boolean"
        },
        "childSettings": {
          "description": "The Child Settings that would be used  for list of options.",
          "items": {
            "$ref": "#/definitions/SecretDependencySetting"
          },
          "type": "array"
        },
        "defaultValue": {
          "description": "Default value if the setting is not given a value",
          "type": "string"
        },
        "displayName": {
          "description": "Setting Display Name",
          "type": "string"
        },
        "id": {
          "description": "Id of the setting",
          "type": "integer",
          "format": "int32"
        },
        "isVisibile": {
          "description": "Indicates the setting is visible on the UI.",
          "type": "boolean"
        },
        "parentSettingId": {
          "description": "Parent Setting Id used when a setting has child options.",
          "type": "integer",
          "format": "int32"
        },
        "regexValidation": {
          "description": "Regex used to validate the input",
          "type": "string"
        },
        "settingName": {
          "description": "Name of the setting",
          "type": "string"
        },
        "settingSectionId": {
          "description": "Section Id of the setting",
          "type": "integer",
          "format": "int32"
        },
        "settingType": {
          "description": "Type of Setting (Default (string) = 0, Integer = 1, String = 2, Boolean = 3, StringArray = 4, DropDown = 5,DropDownItem = 6",
          "type": "integer",
          "format": "int32"
        },
        "subSettingSectionId": {
          "description": "Subsetting Section Id",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretDependencyModel": {
      "description": "The Secret Dependency model object",
      "properties": {
        "active": {
          "description": "Whether or not the Secret Dependency is active.",
          "type": "boolean"
        },
        "childDependencyStatus": {
          "description": "The last run status of the child Secret Dependency.",
          "type": "boolean"
        },
        "conditionDependencyId": {
          "description": "The Id of the dependency that will be looked at when  Condition Mode is set to 'DEPENDENCYPASS', 'DEPENDENCYFAIL'. The Dependency must have a SortOrder lower than the current one.",
          "type": "integer",
          "format": "int32"
        },
        "conditionMode": {
          "description": "Condition Mode governs if this dependency's run relies on the result of other dependencies above it. The Default is ALWAYSRUN. Other values maybe 'All Pass', 'Any Fail', 'DEPENDENCYPASS', 'DEPENDENCYFAIL'.",
          "type": "string"
        },
        "dependencyTemplate": {
          "$ref": "#/definitions/SecretDependencyTemplate",
          "description": "The DependencyTemplate properties that are populated if the Dependency is based on a Dependency template."
        },
        "description": {
          "description": "A description for the Secret Dependency.",
          "type": "string"
        },
        "groupId": {
          "description": "The Id of the Dependency Group that contains the Secret Dependency.",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "The Id of the Secret Dependency.",
          "type": "integer",
          "format": "int32"
        },
        "logMessage": {
          "description": "The last Log message for the Secret Dependency.",
          "type": "string"
        },
        "privilegedAccountSecretId": {
          "description": "The Id of the Privileged Secret that the Secret Dependency will use to run.",
          "type": "integer",
          "format": "int32"
        },
        "runScript": {
          "$ref": "#/definitions/SecretDependencyRunScript",
          "description": "The RunScript properties that are populated if the Dependency is directly running a script."
        },
        "secretDependencyStatus": {
          "description": "The last run status of the Secret Dependency.",
          "type": "boolean"
        },
        "secretId": {
          "description": "The Id of the Secret that the Secret Dependency is assigned to.",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "The Name of the Secret that the Secret Dependency is assigned to.",
          "type": "string"
        },
        "settings": {
          "description": "The Settings used by the Secret Dependency. (Ex: WaitBeforeSeconds, Database, Port, SSHKeyDigest). If a setting exists with the same name (or intent in the case of Port and SqlPort) as a field on the Dependency template's DependencyScanItemFields collection, the value assigned to the setting takes precidence and will overwrite the corresponding DependencyScanItemField.",
          "items": {
            "$ref": "#/definitions/SecretDependencySettingMapForDisplay"
          },
          "type": "array"
        },
        "sortOrder": {
          "description": "The sort order of the Secret Dependency in the group.  Determines the order of execution of the dependencies within a group.",
          "type": "integer",
          "format": "int32"
        },
        "sshKeySecretId": {
          "description": "The Id of the Secret containing the SSH key. (If dependency is tied to SSH key Secret",
          "type": "integer",
          "format": "int32"
        },
        "sshKeySecretName": {
          "description": "The Name of the Secret containing the SSH key. (If dependency is tied to SSH key Secret",
          "type": "string"
        },
        "typeId": {
          "description": "The Id of the type of Secret Dependency.",
          "type": "integer",
          "format": "int32"
        },
        "typeName": {
          "description": "The name of the type of Secret Dependency.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDependencyUpdateArgs": {
      "description": "SecretDependencyUpdateArgs",
      "properties": {
        "active": {
          "description": "Whether or not the Secret Dependency is active",
          "type": "boolean"
        },
        "conditionDependencyId": {
          "description": "The Id of the dependency that will be looked at when  Condition Mode is set to 'DEPENDENCYPASS', 'DEPENDENCYFAIL'. The Dependency must have a SortOrder lower than the current one.",
          "type": "integer",
          "format": "int32"
        },
        "conditionMode": {
          "description": "Condition Mode governs if this dependency's run relies on the result of other dependencies above it. The Default is ALWAYSRUN. Other values maybe 'All Pass', 'Any Fail', 'DEPENDENCYPASS', 'DEPENDENCYFAIL'.",
          "type": "string"
        },
        "dependencyTemplate": {
          "$ref": "#/definitions/SecretDependencyTemplate",
          "description": "The DependencyTemplate properties that are populated if the Dependency is based on a Dependency template"
        },
        "description": {
          "description": "A description for the Secret Dependency",
          "type": "string"
        },
        "groupId": {
          "description": "The Id of the Dependency Group that contains the Secret Dependency. If set to 0 or a group id that does not exist on the secret, an error will be thrown.",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "The Id of the Secret Dependency",
          "type": "integer",
          "format": "int32"
        },
        "machineName": {
          "description": "The machine name that the Secret Dependency runs on",
          "type": "string"
        },
        "privilegedAccountSecretId": {
          "description": "The Id of the Privileged Secret that the Secret Dependency will use to run",
          "type": "integer",
          "format": "int32"
        },
        "runScript": {
          "$ref": "#/definitions/SecretDependencyRunScript",
          "description": "The RunScript properties that are populated if the Dependency is directly running a script"
        },
        "secretId": {
          "description": "Read Only. The Id of the Secret that the Secret Dependency is assigned to. Cannot move a dependency to another secret by changing its SecretId.",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "Read Only. The Name of the Secret that the Secret Dependency is assigned to",
          "type": "string"
        },
        "serviceName": {
          "description": "The service name of the Secret Dependency",
          "type": "string"
        },
        "settings": {
          "description": "The Settings used by the Secret Dependency. (Ex: WaitBeforeSeconds, Database, Port, SSHKeyDigest)",
          "items": {
            "$ref": "#/definitions/SecretDependencySettingMapForDisplay"
          },
          "type": "array"
        },
        "sortOrder": {
          "description": "The sort order of the Secret Dependency in the group.  Determines the order of execution of the dependencies within a group. If not set (default value 0), the dependency will be added at the end of the group. If less than zero the dependency will be added as the first dependency in the group and all other dependencies in the group will be adjusted.",
          "type": "integer",
          "format": "int32"
        },
        "sshKeySecretId": {
          "description": "The Id of the Secret containing the SSH key. (If dependency is tied to SSH key Secret",
          "type": "integer",
          "format": "int32"
        },
        "typeId": {
          "description": "The Id of the type of Secret Dependency",
          "type": "integer",
          "format": "int32"
        },
        "typeName": {
          "description": "Read Only. The name of the type of Secret Dependency",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ILogicResultOfSecretDependencyGroup[]": {
      "description": "ILogicResultOfSecretDependencyGroup[]",
      "properties": {
        "model": {
          "description": "Model",
          "items": {
            "$ref": "#/definitions/SecretDependencyGroup"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SecretDependencyGroup": {
      "description": "A Secret Dependency Group Object. A container for a logical collection of Secret Dependencies that use the same site.",
      "properties": {
        "id": {
          "description": "The Id of the Secret Dependency Group",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The name of the Secret Dependency Group",
          "type": "string"
        },
        "siteId": {
          "description": "The Id of the Site that all dependencies in this group use",
          "type": "integer",
          "format": "int32"
        },
        "siteName": {
          "description": "The Name of the Site that all dependencies in this group use",
          "type": "string"
        },
        "statusFailedCount": {
          "description": "Total Enabled Secret dependencies in this group with a Failed status",
          "type": "integer",
          "format": "int32"
        },
        "statusNotRunCount": {
          "description": "Total Enabled Secret dependencies in this group that have not yet run",
          "type": "integer",
          "format": "int32"
        },
        "statusSuccessCount": {
          "description": "Total Enabled Secret dependencies in this group with a Success status",
          "type": "integer",
          "format": "int32"
        },
        "totalDependencies": {
          "description": "Total Enabled Secret dependencies in this group",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretDependencyGroupCreateArgs": {
      "description": "A Secret Dependency Group Object. A container for a logical collection of Secret Dependencies that use the same site.",
      "properties": {
        "secretDependencyGroupName": {
          "description": "The name of the Secret Dependency Group",
          "type": "string"
        },
        "siteId": {
          "description": "The Id of the Site that all dependencies in this group use",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "TaskProgress": {
      "description": "Information about the current status of a running task",
      "properties": {
        "errors": {
          "description": "A list of errors for the task",
          "items": {
            "$ref": "#/definitions/TaskError"
          },
          "type": "array"
        },
        "isComplete": {
          "description": "True if the task is complete",
          "type": "boolean"
        },
        "percentageComplete": {
          "description": "The estimated percentage complete of the task",
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "description": "The current status of the task",
          "type": "string"
        },
        "taskIdentifier": {
          "description": "The task identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskError": {
      "description": "A description of an error for a task",
      "properties": {
        "errorMessage": {
          "description": "The error message",
          "type": "string"
        },
        "itemName": {
          "description": "The name of the item that had the error",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DependencyScript": {
      "description": "DependencyScript[]",
      "properties": {
        "arguments": {
          "description": "The Settings of the script used for arguments",
          "items": {
            "$ref": "#/definitions/SecretDependencyUniversalScriptArgument"
          },
          "type": "array"
        },
        "id": {
          "description": "The Script Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The name of the script",
          "type": "string"
        },
        "odbcConnectionArguments": {
          "description": "The connection arguments of the script if it is a SQL based script",
          "items": {
            "$ref": "#/definitions/SecretDependencyOdbcConnectionArg"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DependencyTemplate": {
      "description": "DependencyTemplate[]",
      "properties": {
        "active": {
          "description": "Whether or not the Depenency Template is Active",
          "type": "boolean"
        },
        "dependencyChangerId": {
          "description": "The Depenency Template Changer Id",
          "type": "integer",
          "format": "int32"
        },
        "dependencyTypeId": {
          "description": "The Dependency Template Type Id",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "The Dependency Template Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The Dependency Template Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDetailHookCreateArgs": {
      "description": "Create Secret Hook Arguments",
      "properties": {
        "data": {
          "$ref": "#/definitions/SecretDetailHooksCreateModel",
          "description": "Secret Hook Data"
        }
      },
      "type": "object"
    },
    "SecretDetailHooksCreateModel": {
      "description": "Secret Detail Hook Create Model",
      "properties": {
        "arguments": {
          "description": "Arguments",
          "type": "string"
        },
        "database": {
          "description": "Database",
          "type": "string"
        },
        "description": {
          "description": "Hook Description",
          "type": "string"
        },
        "eventActionId": {
          "description": "Event Action Id",
          "type": "integer",
          "format": "int32"
        },
        "failureMessage": {
          "description": "Failure MEssage",
          "type": "string"
        },
        "name": {
          "description": "Hook Name",
          "type": "string"
        },
        "parameters": {
          "description": "Hook Parameters",
          "items": {
            "$ref": "#/definitions/SecretDetailHookParameterViewModel"
          },
          "type": "array"
        },
        "port": {
          "description": "Port",
          "type": "string"
        },
        "prePostOption": {
          "description": "Hook Pre or Post Option",
          "type": "string"
        },
        "privilegedSecretId": {
          "description": "Privilige Secret Id",
          "type": "integer",
          "format": "int32"
        },
        "scriptId": {
          "description": "Script Id",
          "type": "integer",
          "format": "int32"
        },
        "secretId": {
          "description": "Secret Id",
          "type": "integer",
          "format": "int32"
        },
        "serverKeyDigest": {
          "description": "Server Key Digest",
          "type": "string"
        },
        "serverName": {
          "description": "Server Name",
          "type": "string"
        },
        "sshKeySecretId": {
          "description": "SSH Key Secret Id",
          "type": "integer",
          "format": "int32"
        },
        "stopOnFailure": {
          "description": "Stop On Failure",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SecretDetailHookParameterViewModel": {
      "description": "Hook Parameter",
      "properties": {
        "parameterName": {
          "description": "Parameter Name",
          "type": "string"
        },
        "parameterType": {
          "description": "Parameter Type",
          "type": "string"
        },
        "parameterValue": {
          "description": "Parameter Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDetailHookViewModel": {
      "description": "Secret Detail Hook View Model",
      "properties": {
        "arguments": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Arguments"
        },
        "database": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Database"
        },
        "description": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Hook Description"
        },
        "eventActionId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "Event Action Id"
        },
        "failureMessage": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Failure Message"
        },
        "hookId": {
          "description": "Hook Id",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Hook Name"
        },
        "parameters": {
          "description": "Parameters",
          "items": {
            "$ref": "#/definitions/SecretDetailHookParameterViewModel"
          },
          "type": "array"
        },
        "port": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Port"
        },
        "prePostOption": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Hook PRE or POST Option"
        },
        "privilegedSecretId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "Privilige Secret Id"
        },
        "scriptId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "Script Id"
        },
        "scriptTypeId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "Script Type Id"
        },
        "secretHookId": {
          "description": "Secret Hook Id",
          "type": "integer",
          "format": "int32"
        },
        "serverKeyDigest": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Server Key Digest"
        },
        "serverName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Server Name"
        },
        "sortOrder": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "Hook Sort Order"
        },
        "sshKeySecretId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "SSH Key Secret Id"
        },
        "status": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Hook Status"
        },
        "stopOnFailure": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Stop on Failure"
        }
      },
      "type": "object"
    },
    "SecretDetailHookUpdateArgs": {
      "description": "SecretDetailHookUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SecretDetailHookUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SecretDetailHookUpdateModel": {
      "description": "Secret Detail Hook Update Model",
      "properties": {
        "arguments": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Arguments"
        },
        "database": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Database"
        },
        "description": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Hook Description"
        },
        "eventActionId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Hook Event Id"
        },
        "failureMessage": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Failure Message"
        },
        "name": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Hook Name"
        },
        "parameters": {
          "description": "Parameters",
          "items": {
            "$ref": "#/definitions/SecretDetailHookParameterViewModel"
          },
          "type": "array"
        },
        "port": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Port"
        },
        "prePostOption": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Hook PRE or POST Option"
        },
        "privilegedSecretId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Privilige Secret Id"
        },
        "scriptId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Hook Script Id"
        },
        "scriptTypeId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Hook Script Type Id"
        },
        "serverKeyDigest": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Server Key Digest"
        },
        "serverName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Server Name"
        },
        "sortOrder": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Hook Sort Order"
        },
        "sshKeySecretId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "SSH Key Secret Id"
        },
        "status": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Hook Status"
        },
        "stopOnFailure": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Stop On Failure"
        }
      },
      "type": "object"
    },
    "ExtensionAutoFillValueArgs": {
      "description": "ExtensionAutoFillValueArgs",
      "properties": {
        "secretId": {
          "description": "The SecretId for the Secret to retrieve the auto-fill values from.",
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "description": "The URL for which the auto-fill values are being retrieved.  Must be the same origin as the URL on the Secret.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretExtensionAutoFillResult": {
      "description": "SecretExtensionAutoFillResult",
      "properties": {
        "password": {
          "description": "Password",
          "type": "string"
        },
        "username": {
          "description": "Username",
          "type": "string"
        },
        "useSessionRecording": {
          "description": "UseSessionRecording",
          "type": "boolean"
        },
        "webLauncherRequiresIncognitoMode": {
          "description": "WebLauncherRequiresIncognitoMode",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SecretExtensionSearchSummary": {
      "description": "SecretExtensionSearchSummary[]",
      "properties": {
        "hasOwnerOrEditAccess": {
          "description": "HasOwnerOrEditAccess",
          "type": "boolean"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "isButtonBound": {
          "description": "IsButtonBound",
          "type": "boolean"
        },
        "isFavoriteSecret": {
          "description": "IsFavoriteSecret",
          "type": "boolean"
        },
        "isSystemFolder": {
          "description": "IsSystemFolder",
          "type": "boolean"
        },
        "matchOrderType": {
          "$ref": "#/definitions/MatchType",
          "description": "MatchOrderType"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "redirectUrl": {
          "description": "RedirectUrl",
          "type": "string"
        },
        "requireComment": {
          "description": "RequireComment",
          "type": "boolean"
        },
        "resultPriority": {
          "description": "ResultPriority",
          "type": "integer",
          "format": "int32"
        },
        "secretTypeId": {
          "description": "SecretTypeId",
          "type": "integer",
          "format": "int32"
        },
        "shouldRedirect": {
          "description": "ShouldRedirect",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MatchType": {
      "description": "MatchOrderType",
      "properties": {},
      "type": "string",
      "enum": [
        "Loose",
        "Partial",
        "Exact"
      ]
    },
    "SecretSearchByUrlSummary": {
      "description": "SecretSearchByUrlSummary[]",
      "properties": {
        "hasOwnerOrEditAccess": {
          "description": "HasOwnerOrEditAccess",
          "type": "boolean"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "isButtonBound": {
          "description": "IsButtonBound",
          "type": "boolean"
        },
        "isFavoriteSecret": {
          "description": "IsFavoriteSecret",
          "type": "boolean"
        },
        "isSystemFolder": {
          "description": "IsSystemFolder",
          "type": "boolean"
        },
        "matchOrderType": {
          "$ref": "#/definitions/MatchType",
          "description": "MatchOrderType"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "redirectUrl": {
          "description": "RedirectUrl",
          "type": "string"
        },
        "requireComment": {
          "description": "RequireComment",
          "type": "boolean"
        },
        "resultPriority": {
          "description": "ResultPriority",
          "type": "integer",
          "format": "int32"
        },
        "secretTypeId": {
          "description": "SecretTypeId",
          "type": "integer",
          "format": "int32"
        },
        "secretUrl": {
          "description": "SecretUrl",
          "type": "string"
        },
        "shouldRedirect": {
          "description": "ShouldRedirect",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SecretTemplateModel": {
      "description": "SecretTemplateModel[]",
      "properties": {
        "fields": {
          "description": "Secret template fields",
          "items": {
            "$ref": "#/definitions/ISecretTemplateField"
          },
          "type": "array"
        },
        "id": {
          "description": "Secret template ID",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Secret template name",
          "type": "string"
        },
        "passwordTypeId": {
          "description": "PasswordTypeId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ISecretTemplateField": {
      "description": "Secret template fields",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "editablePermission": {
          "description": "EditablePermission",
          "type": "integer",
          "format": "int32"
        },
        "editRequires": {
          "$ref": "#/definitions/EditRequiresOptions",
          "description": "EditRequires"
        },
        "fieldSlugName": {
          "description": "FieldSlugName",
          "type": "string"
        },
        "generatePasswordCharacterSet": {
          "description": "GeneratePasswordCharacterSet",
          "type": "string"
        },
        "generatePasswordLength": {
          "description": "GeneratePasswordLength",
          "type": "integer",
          "format": "int32"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "historyLength": {
          "description": "HistoryLength",
          "type": "integer",
          "format": "int32"
        },
        "isExpirationField": {
          "description": "IsExpirationField",
          "type": "boolean"
        },
        "isFile": {
          "description": "IsFile",
          "type": "boolean"
        },
        "isIndexable": {
          "description": "IsIndexable",
          "type": "boolean"
        },
        "isNotes": {
          "description": "IsNotes",
          "type": "boolean"
        },
        "isPassword": {
          "description": "IsPassword",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "isUrl": {
          "description": "IsUrl",
          "type": "boolean"
        },
        "mustEncrypt": {
          "description": "MustEncrypt",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "passwordRequirementId": {
          "description": "PasswordRequirementId",
          "type": "integer",
          "format": "int32"
        },
        "passwordTypeFieldId": {
          "description": "PasswordTypeFieldId",
          "type": "integer",
          "format": "int32"
        },
        "secretTemplateFieldId": {
          "description": "SecretTemplateFieldId",
          "type": "integer",
          "format": "int32"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "EditRequiresOptions": {
      "description": "EditRequires",
      "properties": {},
      "type": "string",
      "enum": [
        "Edit",
        "Owner",
        "NotEditable"
      ]
    },
    "PagingOfSecretPermissionSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretPermissionSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretPermissionSummary": {
      "description": "Secret permission summary",
      "properties": {
        "groupId": {
          "description": "Group ID",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "Group name",
          "type": "string"
        },
        "id": {
          "description": "Secret permission ID",
          "type": "integer",
          "format": "int32"
        },
        "knownAs": {
          "description": "KnownAs",
          "type": "string"
        },
        "secretAccessRoleId": {
          "description": "Granted role ID",
          "type": "integer",
          "format": "int32"
        },
        "secretAccessRoleName": {
          "description": "Granted role name",
          "type": "string"
        },
        "secretId": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretPermissionCreateArgs": {
      "description": "Secret permission create options",
      "properties": {
        "domainName": {
          "description": "Domain Name",
          "type": "string"
        },
        "groupId": {
          "description": "Group ID being granted permission. Leave empty if granting to a user",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "Group Name",
          "type": "string"
        },
        "secretAccessRoleName": {
          "description": "Role name being granted",
          "type": "string"
        },
        "secretId": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "description": "User ID being granted permission. Leave empty if granting to a group",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretPermissionModel": {
      "description": "Secret permission",
      "properties": {
        "groupId": {
          "description": "Group ID",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "Group name",
          "type": "string"
        },
        "id": {
          "description": "Secret permission ID",
          "type": "integer",
          "format": "int32"
        },
        "knownAs": {
          "description": "KnownAs",
          "type": "string"
        },
        "secretAccessRoleId": {
          "description": "Granted role ID",
          "type": "integer",
          "format": "int32"
        },
        "secretAccessRoleName": {
          "description": "Granted role name",
          "type": "string"
        },
        "secretId": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretPermissionUpdateArgs": {
      "description": "Secret permission update options",
      "required": [
        "id",
        "secretId",
        "secretAccessRoleName"
      ],
      "properties": {
        "id": {
          "description": "Secret permission ID. Must match ID in path",
          "type": "integer",
          "format": "int32"
        },
        "secretAccessRoleName": {
          "description": "Granted role name",
          "type": "string"
        },
        "secretId": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "IPagingOfSecretPolicyModel": {
      "description": "IPagingOfSecretPolicyModel",
      "properties": {
        "records": {
          "description": "Records",
          "items": {
            "$ref": "#/definitions/SecretPolicyModel"
          },
          "type": "array"
        },
        "sortBy": {
          "description": "SortBy",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PagingOfSecretSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretSummary": {
      "description": "Secret summary",
      "properties": {
        "active": {
          "description": "Whether the secret is active",
          "type": "boolean"
        },
        "autoChangeEnabled": {
          "description": "Indicates whether or not this Secret an auto changing password",
          "type": "boolean"
        },
        "checkedOut": {
          "description": "Whether the secret is currently checked out",
          "type": "boolean"
        },
        "checkOutEnabled": {
          "description": "Indicates whether or not checkout is enabled for the Secret",
          "type": "boolean"
        },
        "createDate": {
          "description": "When the Secret was created",
          "type": "string",
          "format": "date-time"
        },
        "daysUntilExpiration": {
          "description": "How many days until this Secret expires",
          "type": "integer",
          "format": "int32"
        },
        "doubleLockEnabled": {
          "description": "Indicates whether or not DoubleLock is enabled for this password",
          "type": "boolean"
        },
        "extendedFields": {
          "description": "Any requested extended fields from a lookup request",
          "items": {
            "$ref": "#/definitions/ISecretSummaryExtendedField"
          },
          "type": "array"
        },
        "folderId": {
          "description": "Containing folder ID",
          "type": "integer",
          "format": "int32"
        },
        "hidePassword": {
          "description": "Indicates if the launcher password is set to be hidden",
          "type": "boolean"
        },
        "id": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        },
        "inheritsPermissions": {
          "description": "Indicates if this Secret inherits permissions from its folder",
          "type": "boolean"
        },
        "isOutOfSync": {
          "description": "Out of sync indicates that a Password is setup for autochange and has failed its last password change attempt or has exceeded the maximum RPC attempts",
          "type": "boolean"
        },
        "isRestricted": {
          "description": "Whether the secret is restricted",
          "type": "boolean"
        },
        "lastAccessed": {
          "description": "When the Secret was last viewed, only populated when scope is Recent",
          "type": "string",
          "format": "date-time"
        },
        "lastHeartBeatStatus": {
          "$ref": "#/definitions/HeartbeatStatus",
          "description": "Current status of heartbeat"
        },
        "lastPasswordChangeAttempt": {
          "description": "Time of most recent password change attempt",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Secret name",
          "type": "string"
        },
        "outOfSyncReason": {
          "description": "Reason message if the secret is out of sync",
          "type": "string"
        },
        "requiresApproval": {
          "description": "Indicates if this Secret requires approval",
          "type": "boolean"
        },
        "requiresComment": {
          "description": "Indicates if this Secret requires comment",
          "type": "boolean"
        },
        "responseCodes": {
          "description": "ResponseCodes",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "secretTemplateId": {
          "description": "Secret template ID",
          "type": "integer",
          "format": "int32"
        },
        "secretTemplateName": {
          "description": "Name of secret template",
          "type": "string"
        },
        "siteId": {
          "description": "SiteId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ISecretSummaryExtendedField": {
      "description": "Any requested extended fields from a lookup request",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "HeartbeatStatus": {
      "description": "Current status of heartbeat",
      "properties": {},
      "type": "string",
      "enum": [
        "Failed",
        "Success",
        "Pending",
        "Disabled",
        "UnableToConnect",
        "UnknownError",
        "IncompatibleHost",
        "AccountLockedOut",
        "DnsMismatch",
        "UnableToValidateServerPublicKey",
        "Processing",
        "ArgumentError",
        "AccessDenied"
      ]
    },
    "SecretCreateArgs": {
      "description": "Secret create options",
      "required": [
        "name",
        "secretTemplateId",
        "items"
      ],
      "properties": {
        "autoChangeEnabled": {
          "description": "AutoChangeEnabled",
          "type": "boolean"
        },
        "checkOutChangePasswordEnabled": {
          "description": "CheckOutChangePasswordEnabled",
          "type": "boolean"
        },
        "checkOutEnabled": {
          "description": "Whether secret checkout is enabled",
          "type": "boolean"
        },
        "checkOutIntervalMinutes": {
          "description": "Checkout interval, in minutes",
          "type": "integer",
          "format": "int32"
        },
        "delayIndexing": {
          "description": "Whether the search indexing should be delayed to the background process",
          "type": "boolean"
        },
        "enableInheritPermissions": {
          "description": "Whether the secret inherits permissions from the containing folder",
          "type": "boolean"
        },
        "enableInheritSecretPolicy": {
          "description": "Whether the secret policy is inherited from the containing folder",
          "type": "boolean"
        },
        "folderId": {
          "description": "Secret folder ID. May be null unless secrets are required to be in folders.",
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "description": "Secret fields",
          "items": {
            "$ref": "#/definitions/RestSecretItem"
          },
          "type": "array"
        },
        "launcherConnectAsSecretId": {
          "description": "LauncherConnectAsSecretId",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Secret name",
          "type": "string"
        },
        "passwordTypeWebScriptId": {
          "description": "PasswordTypeWebScriptId",
          "type": "integer",
          "format": "int32"
        },
        "proxyEnabled": {
          "description": "ProxyEnabled",
          "type": "boolean"
        },
        "requiresComment": {
          "description": "RequiresComment",
          "type": "boolean"
        },
        "secretPolicyId": {
          "description": "Secret policy ID",
          "type": "integer",
          "format": "int32"
        },
        "secretTemplateId": {
          "description": "Secret template ID",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "sessionRecordingEnabled": {
          "description": "Whether session recording is enabled",
          "type": "boolean"
        },
        "siteId": {
          "description": "SiteId",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "sshKeyArgs": {
          "$ref": "#/definitions/SshKeyArgs",
          "description": "SSH key options"
        },
        "webLauncherRequiresIncognitoMode": {
          "description": "Whether the web launcher will require incognito mode",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RestSecretItem": {
      "description": "Secret data field item",
      "properties": {
        "fieldDescription": {
          "description": "Field description",
          "type": "string"
        },
        "fieldId": {
          "description": "Field ID",
          "type": "integer",
          "format": "int32"
        },
        "fieldName": {
          "description": "Field name",
          "type": "string"
        },
        "fileAttachmentId": {
          "description": "File attachment ID (used for file attachments)",
          "type": "integer",
          "format": "int32"
        },
        "filename": {
          "description": "File name (used for file attachments)",
          "type": "string"
        },
        "isFile": {
          "description": "Whether the field is a file attachment",
          "type": "boolean"
        },
        "isNotes": {
          "description": "Whether the field is notes",
          "type": "boolean"
        },
        "isPassword": {
          "description": "Whether the field is a password",
          "type": "boolean"
        },
        "itemId": {
          "description": "Item ID",
          "type": "integer",
          "format": "int32"
        },
        "itemValue": {
          "description": "Item value",
          "type": "string"
        },
        "slug": {
          "description": "Field Name Slug",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SshKeyArgs": {
      "description": "SSH key options",
      "properties": {
        "generatePassphrase": {
          "description": "Whether to generate an SSH private key passphrase.  Only applicable when the Secret template has a password changer with the Private Key Passphrase field mapped.  If it is not mapped, this setting is ignored.",
          "type": "boolean"
        },
        "generateSshKeys": {
          "description": "Whether to generate an SSH private key",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SecretModel": {
      "description": "Secret",
      "properties": {
        "accessRequestWorkflowMapId": {
          "description": "AccessRequestWorkflowMapId",
          "type": "integer",
          "format": "int32"
        },
        "active": {
          "description": "Whether the secret is active",
          "type": "boolean"
        },
        "allowOwnersUnrestrictedSshCommands": {
          "description": "AllowOwnersUnrestrictedSshCommands",
          "type": "boolean"
        },
        "autoChangeEnabled": {
          "description": "AutoChangeEnabled",
          "type": "boolean"
        },
        "autoChangeNextPassword": {
          "description": "AutoChangeNextPassword",
          "type": "string"
        },
        "checkedOut": {
          "description": "Whether the secret is currently checked out",
          "type": "boolean"
        },
        "checkOutChangePasswordEnabled": {
          "description": "CheckOutChangePasswordEnabled",
          "type": "boolean"
        },
        "checkOutEnabled": {
          "description": "Whether secret checkout is enabled",
          "type": "boolean"
        },
        "checkOutIntervalMinutes": {
          "description": "Checkout interval, in minutes",
          "type": "integer",
          "format": "int32"
        },
        "checkOutMinutesRemaining": {
          "description": "Minutes remaining in current checkout interval",
          "type": "integer",
          "format": "int32"
        },
        "checkOutUserDisplayName": {
          "description": "Name of user who has checked out the secret",
          "type": "string"
        },
        "checkOutUserId": {
          "description": "ID of user who has checked out the secret",
          "type": "integer",
          "format": "int32"
        },
        "doubleLockId": {
          "description": "DoubleLockId",
          "type": "integer",
          "format": "int32"
        },
        "enableInheritPermissions": {
          "description": "EnableInheritPermissions",
          "type": "boolean"
        },
        "enableInheritSecretPolicy": {
          "description": "Whether the secret policy is inherited from the containing folder",
          "type": "boolean"
        },
        "failedPasswordChangeAttempts": {
          "description": "Number of failed password change attempts",
          "type": "integer",
          "format": "int32"
        },
        "folderId": {
          "description": "Containing folder ID",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        },
        "isDoubleLock": {
          "description": "Whether double lock is enabled",
          "type": "boolean"
        },
        "isOutOfSync": {
          "description": "Out of sync indicates that a Password is setup for autochange and has failed its last password change attempt or has exceeded the maximum RPC attempts",
          "type": "boolean"
        },
        "isRestricted": {
          "description": "Whether the secret is restricted",
          "type": "boolean"
        },
        "items": {
          "description": "Secret data fields",
          "items": {
            "$ref": "#/definitions/RestSecretItem"
          },
          "type": "array"
        },
        "lastHeartBeatCheck": {
          "description": "Time of last heartbeat check",
          "type": "string",
          "format": "date-time"
        },
        "lastHeartBeatStatus": {
          "$ref": "#/definitions/HeartbeatStatus",
          "description": "Current status of heartbeat"
        },
        "lastPasswordChangeAttempt": {
          "description": "Time of most recent password change attempt",
          "type": "string",
          "format": "date-time"
        },
        "launcherConnectAsSecretId": {
          "description": "LauncherConnectAsSecretId",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Secret name",
          "type": "string"
        },
        "outOfSyncReason": {
          "description": "Reason message if the secret is out of sync",
          "type": "string"
        },
        "passwordTypeWebScriptId": {
          "description": "PasswordTypeWebScriptId",
          "type": "integer",
          "format": "int32"
        },
        "proxyEnabled": {
          "description": "ProxyEnabled",
          "type": "boolean"
        },
        "requiresApprovalForAccess": {
          "description": "RequiresApprovalForAccess",
          "type": "boolean"
        },
        "requiresComment": {
          "description": "RequiresComment",
          "type": "boolean"
        },
        "responseCodes": {
          "description": "ResponseCodes",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "restrictSshCommands": {
          "description": "RestrictSshCommands",
          "type": "boolean"
        },
        "secretPolicyId": {
          "description": "SecretPolicyId",
          "type": "integer",
          "format": "int32"
        },
        "secretTemplateId": {
          "description": "Secret template ID",
          "type": "integer",
          "format": "int32"
        },
        "secretTemplateName": {
          "description": "Name of secret template",
          "type": "string"
        },
        "sessionRecordingEnabled": {
          "description": "Whether session recording is enabled",
          "type": "boolean"
        },
        "siteId": {
          "description": "SiteId",
          "type": "integer",
          "format": "int32"
        },
        "webLauncherRequiresIncognitoMode": {
          "description": "WebLauncherRequiresIncognitoMode",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SecretUpdateArgs": {
      "description": "Secret update options",
      "required": [
        "id",
        "name",
        "items"
      ],
      "properties": {
        "accessRequestWorkflowMapId": {
          "description": "AccessRequestWorkflowMapId",
          "type": "integer",
          "format": "int32"
        },
        "active": {
          "description": "Whether the secret is active",
          "type": "boolean"
        },
        "autoChangeEnabled": {
          "description": "AutoChangeEnabled",
          "type": "boolean"
        },
        "autoChangeNextPassword": {
          "description": "AutoChangeNextPassword",
          "type": "string"
        },
        "checkOutChangePasswordEnabled": {
          "description": "CheckOutChangePasswordEnabled",
          "type": "boolean"
        },
        "checkOutEnabled": {
          "description": "Whether secret checkout is enabled",
          "type": "boolean"
        },
        "checkOutIntervalMinutes": {
          "description": "Checkout interval, in minutes",
          "type": "integer",
          "format": "int32"
        },
        "comment": {
          "description": "Comment for this operation",
          "type": "string"
        },
        "doubleLockPassword": {
          "description": "Double Lock password",
          "type": "string"
        },
        "enableInheritPermissions": {
          "description": "Whether the secret inherits permissions from the containing folder",
          "type": "boolean"
        },
        "enableInheritSecretPolicy": {
          "description": "Whether the secret policy is inherited from the containing folder",
          "type": "boolean"
        },
        "folderId": {
          "description": "Containing folder ID",
          "type": "integer",
          "format": "int32"
        },
        "forceCheckIn": {
          "description": "Check in the secret if it is checked out",
          "type": "boolean"
        },
        "id": {
          "description": "Secret ID. Must match ID in path",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "includeInactive": {
          "description": "Whether to include inactive secrets",
          "type": "boolean"
        },
        "items": {
          "description": "Secret data fields",
          "items": {
            "$ref": "#/definitions/RestSecretItem"
          },
          "type": "array"
        },
        "launcherConnectAsSecretId": {
          "description": "LauncherConnectAsSecretId",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Secret name",
          "type": "string"
        },
        "newPassword": {
          "description": "New secret password",
          "type": "string"
        },
        "passwordTypeWebScriptId": {
          "description": "PasswordTypeWebScriptId",
          "type": "integer",
          "format": "int32"
        },
        "proxyEnabled": {
          "description": "ProxyEnabled",
          "type": "boolean"
        },
        "requiresComment": {
          "description": "RequiresComment",
          "type": "boolean"
        },
        "secretPolicyId": {
          "description": "SecretPolicyId",
          "type": "integer",
          "format": "int32"
        },
        "sessionRecordingEnabled": {
          "description": "Whether session recording is enabled",
          "type": "boolean"
        },
        "siteId": {
          "description": "SiteId",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "sshKeyArgs": {
          "$ref": "#/definitions/SshKeyArgs",
          "description": "SSH key options"
        },
        "ticketNumber": {
          "description": "Associated ticket number",
          "type": "string"
        },
        "ticketSystemId": {
          "description": "Associated ticket system ID",
          "type": "integer",
          "format": "int32"
        },
        "webLauncherRequiresIncognitoMode": {
          "description": "Whether the web launcher will require incognito mode",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfSecretAuditModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretAuditModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretAuditModel": {
      "description": "Secret Audit Model",
      "properties": {
        "action": {
          "description": "Action of Audit",
          "type": "string"
        },
        "actionForDisplay": {
          "description": "Action For Display",
          "type": "string"
        },
        "byUserDisplayName": {
          "description": "User that performed action",
          "type": "string"
        },
        "databaseName": {
          "description": "Database Name",
          "type": "string"
        },
        "dateRecorded": {
          "description": "Date Audit was Recorded",
          "type": "string",
          "format": "date-time"
        },
        "hasProxySessionData": {
          "description": "Has Proxy Session Data",
          "type": "boolean"
        },
        "id": {
          "description": "Id of Audit",
          "type": "integer",
          "format": "int32"
        },
        "notes": {
          "description": "Notes of Audit",
          "type": "string"
        },
        "recordingMessage": {
          "description": "Recording Message",
          "type": "string"
        },
        "recordingSessionId": {
          "description": "Recording Session Id",
          "type": "string"
        },
        "recordingStatus": {
          "description": "Status of Recording",
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "description": "Status",
          "type": "string"
        },
        "ticketNumber": {
          "description": "Ticket Number of Audit",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretChangePasswordArgs": {
      "description": "Secret password change options",
      "properties": {
        "comment": {
          "description": "Comment for this operation",
          "type": "string"
        },
        "doubleLockPassword": {
          "description": "Double Lock password",
          "type": "string"
        },
        "forceCheckIn": {
          "description": "Check in the secret if it is checked out",
          "type": "boolean"
        },
        "includeInactive": {
          "description": "Whether to include inactive secrets",
          "type": "boolean"
        },
        "newPassword": {
          "description": "New secret password",
          "type": "string"
        },
        "sshKeyArgs": {
          "$ref": "#/definitions/RotateSshKeyArgs",
          "description": "Options for rotating SSH keys"
        },
        "ticketNumber": {
          "description": "Associated ticket number",
          "type": "string"
        },
        "ticketSystemId": {
          "description": "Associated ticket system ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "RotateSshKeyArgs": {
      "description": "SSH key rotation options",
      "properties": {
        "generatePassphrase": {
          "description": "Whether to generate the next SSH private key passphrase. Must be true if the passphrase is empty.",
          "type": "boolean"
        },
        "generateSshKeys": {
          "description": "Whether to generate the next SSH private key. Must be true if the private key is empty.",
          "type": "boolean"
        },
        "passphrase": {
          "description": "Private key passphrase",
          "type": "string"
        },
        "privateKey": {
          "description": "Private key",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretRestrictedArgs": {
      "description": "Restricted secret update options",
      "properties": {
        "comment": {
          "description": "Comment for this operation",
          "type": "string"
        },
        "doubleLockPassword": {
          "description": "Double Lock password",
          "type": "string"
        },
        "forceCheckIn": {
          "description": "Check in the secret if it is checked out",
          "type": "boolean"
        },
        "includeInactive": {
          "description": "Whether to include inactive secrets",
          "type": "boolean"
        },
        "newPassword": {
          "description": "New secret password",
          "type": "string"
        },
        "ticketNumber": {
          "description": "Associated ticket number",
          "type": "string"
        },
        "ticketSystemId": {
          "description": "Associated ticket system ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretResponseCodeModel": {
      "description": "SecretResponseCodeModel",
      "properties": {
        "responseCodes": {
          "description": "ResponseCodes",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SecretDetailUpdateEmailArgs": {
      "description": "Secret User Email Update Message",
      "properties": {
        "data": {
          "$ref": "#/definitions/SecretDetailEmailUpdateModel",
          "description": "Secret User Email Update Data"
        }
      },
      "type": "object"
    },
    "SecretDetailEmailUpdateModel": {
      "description": "Secret Email User Settings",
      "properties": {
        "sendEmailWhenChanged": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Send email when Secret is Changed"
        },
        "sendEmailWhenHeartbeatFails": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Send email when Secret heartbeat fails"
        },
        "sendEmailWhenViewed": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Send email when Secret is viewed"
        }
      },
      "type": "object"
    },
    "SecretDetailSettingsViewModel": {
      "description": "SecretDetailSettingsViewModel",
      "properties": {
        "expirationDate": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalDateTime",
          "description": "ExpirationDate"
        },
        "expirationDayInterval": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "ExpirationDayInterval"
        },
        "expirationTemplateText": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "ExpirationTemplateText"
        },
        "expirationType": {
          "$ref": "#/definitions/ViewFieldValueOfSecretDetailExpirationType",
          "description": "ExpirationType"
        },
        "oneTimePasswordSettings": {
          "$ref": "#/definitions/ViewFieldValueOfOneTimePasswordSettingsViewModel",
          "description": "OneTimePasswordSettings"
        },
        "rdpLauncherSettings": {
          "$ref": "#/definitions/ViewFieldValueOfRdpLauncherSettingsViewModel",
          "description": "RdpLauncherSettings"
        },
        "sendEmailWhenChanged": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "SendEmailWhenChanged"
        },
        "sendEmailWhenHeartbeatFails": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "SendEmailWhenHeartbeatFails"
        },
        "sendEmailWhenViewed": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "SendEmailWhenViewed"
        },
        "sshLauncherSettings": {
          "$ref": "#/definitions/ViewFieldValueOfSshLauncherSettingsViewModel",
          "description": "SshLauncherSettings"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfSecretDetailExpirationType": {
      "description": "ExpirationType",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/SecretDetailExpirationType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "SecretDetailExpirationType": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "Template",
        "DayInterval",
        "SpecificDate",
        "Disabled"
      ]
    },
    "ViewFieldValueOfOneTimePasswordSettingsViewModel": {
      "description": "OneTimePasswordSettings",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/OneTimePasswordSettingsViewModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "OneTimePasswordSettingsViewModel": {
      "description": "Value",
      "properties": {
        "backupCodes": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "BackupCodes"
        },
        "dateChanged": {
          "$ref": "#/definitions/ViewFieldValueOfDateTime",
          "description": "DateChanged"
        },
        "enabled": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Enabled"
        },
        "enabledOnTemplate": {
          "description": "EnabledOnTemplate",
          "type": "boolean"
        },
        "key": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Key"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfRdpLauncherSettingsViewModel": {
      "description": "RdpLauncherSettings",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/RdpLauncherSettingsViewModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "RdpLauncherSettingsViewModel": {
      "description": "Value",
      "properties": {
        "allowClipboard": {
          "$ref": "#/definitions/ViewFieldValueOfYesNoPreferenceOption",
          "description": "AllowClipboard"
        },
        "allowDrives": {
          "$ref": "#/definitions/ViewFieldValueOfYesNoPreferenceOption",
          "description": "AllowDrives"
        },
        "allowPrinters": {
          "$ref": "#/definitions/ViewFieldValueOfYesNoPreferenceOption",
          "description": "AllowPrinters"
        },
        "allowSmartCards": {
          "$ref": "#/definitions/ViewFieldValueOfYesNoPreferenceOption",
          "description": "AllowSmartCards"
        },
        "connectToConsole": {
          "$ref": "#/definitions/ViewFieldValueOfYesNoPreferenceOption",
          "description": "ConnectToConsole"
        },
        "launcherHeight": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "LauncherHeight"
        },
        "launcherWidth": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "LauncherWidth"
        },
        "useCustomLauncherResolution": {
          "$ref": "#/definitions/ViewFieldValueOfYesNoPreferenceOption",
          "description": "UseCustomLauncherResolution"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfYesNoPreferenceOption": {
      "description": "AllowClipboard",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/YesNoPreferenceOption",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "YesNoPreferenceOption": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "No",
        "Yes",
        "UsePreferenceNo",
        "UsePreferenceYes"
      ]
    },
    "ViewFieldValueOfSshLauncherSettingsViewModel": {
      "description": "SshLauncherSettings",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/SshLauncherSettingsViewModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "SshLauncherSettingsViewModel": {
      "description": "Value",
      "properties": {
        "canConnectAsCredentials": {
          "description": "CanConnectAsCredentials",
          "type": "boolean"
        },
        "launcherType": {
          "$ref": "#/definitions/SshRunLauncherType",
          "description": "LauncherType"
        },
        "secretId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "SecretId"
        },
        "secretName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SecretName"
        },
        "sshKeyExtendedTypeId": {
          "description": "SSHKeyExtendedTypeId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SshRunLauncherType": {
      "description": "LauncherType",
      "properties": {},
      "type": "string",
      "enum": [
        "ConnectAsSecret",
        "ConnectAsDifferentSecret",
        "UseSshKeyOnSecret"
      ]
    },
    "SecretDetailUpdateExpirationArgs": {
      "description": "SecretDetailUpdateExpirationArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SecretDetailExpirationUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SecretDetailExpirationUpdateModel": {
      "description": "Data",
      "properties": {
        "expirationDate": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalDateTime",
          "description": "ExpirationDate"
        },
        "expirationDayInterval": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "ExpirationDayInterval"
        },
        "expirationType": {
          "$ref": "#/definitions/UpdateFieldValueOfSecretDetailExpirationType",
          "description": "ExpirationType"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfSecretDetailExpirationType": {
      "description": "ExpirationType",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/SecretDetailExpirationType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "SecretDetailSettingsModel": {
      "description": "Secret Detail Settings",
      "properties": {
        "expirationDate": {
          "description": "Expiration Date",
          "type": "string",
          "format": "date-time"
        },
        "expirationDayInterval": {
          "description": "Expiration Day Interval",
          "type": "integer",
          "format": "int32"
        },
        "expirationTemplateText": {
          "description": "Expiration Template Text",
          "type": "string"
        },
        "expirationType": {
          "$ref": "#/definitions/SecretDetailExpirationType",
          "description": "Expiration Type"
        },
        "oneTimePasswordSettings": {
          "$ref": "#/definitions/OneTimePasswordSettingsModel",
          "description": "One Time Password Settings"
        },
        "rdpLauncherSettings": {
          "$ref": "#/definitions/RdpLauncherSettingsModel",
          "description": "RDP Launcher Settings"
        },
        "sendEmailWhenChanged": {
          "description": "Send Email When Changed",
          "type": "boolean"
        },
        "sendEmailWhenHeartbeatFails": {
          "description": "Send Email When Heartbeat Fails",
          "type": "boolean"
        },
        "sendEmailWhenViewed": {
          "description": "Send Email When Viewed",
          "type": "boolean"
        },
        "sshLauncherSettings": {
          "$ref": "#/definitions/SshLauncherSettingsModel",
          "description": "SSH Launcher Settings"
        }
      },
      "type": "object"
    },
    "OneTimePasswordSettingsModel": {
      "description": "One Time Password Settings",
      "properties": {
        "backupCodes": {
          "description": "Backup Codes",
          "type": "string"
        },
        "dateChanged": {
          "description": "Date Changed",
          "type": "string",
          "format": "date-time"
        },
        "enabled": {
          "description": "Enabled",
          "type": "boolean"
        },
        "enabledOnTemplate": {
          "description": "Enabled On Template",
          "type": "boolean"
        },
        "key": {
          "description": "Key",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RdpLauncherSettingsModel": {
      "description": "RDP Launcher Settings",
      "properties": {
        "allowClipboard": {
          "$ref": "#/definitions/YesNoPreferenceOption",
          "description": "Allow Clipboard"
        },
        "allowDrives": {
          "$ref": "#/definitions/YesNoPreferenceOption",
          "description": "Allow Drives"
        },
        "allowPrinters": {
          "$ref": "#/definitions/YesNoPreferenceOption",
          "description": "Allow Printers"
        },
        "allowSmartCards": {
          "$ref": "#/definitions/YesNoPreferenceOption",
          "description": "Allow SmartCards"
        },
        "connectToConsole": {
          "$ref": "#/definitions/YesNoPreferenceOption",
          "description": "Connect To Console"
        },
        "launcherHeight": {
          "description": "Launcher Height",
          "type": "integer",
          "format": "int32"
        },
        "launcherWidth": {
          "description": "Launcher Height",
          "type": "integer",
          "format": "int32"
        },
        "useCustomLauncherResolution": {
          "$ref": "#/definitions/YesNoPreferenceOption",
          "description": "Use Custom Launcher Resolution"
        }
      },
      "type": "object"
    },
    "SshLauncherSettingsModel": {
      "description": "SSH Launcher Settings",
      "properties": {
        "canConnectAsCredentials": {
          "description": "Can Connect As Credentials",
          "type": "boolean"
        },
        "launcherType": {
          "$ref": "#/definitions/SshRunLauncherType",
          "description": "Launcher Type"
        },
        "secretId": {
          "description": "Secret Id",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "Secret Name",
          "type": "string"
        },
        "sshKeyExtendedTypeId": {
          "description": "SSH Key Extended Type Id",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretItemUpdateArgs": {
      "description": "Secret field update options",
      "properties": {
        "comment": {
          "description": "Comment for this operation",
          "type": "string"
        },
        "doubleLockPassword": {
          "description": "Double Lock password",
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/HttpFile",
          "description": "Uploaded file (used for file attachment fields with \"Content-Type: multipart/form-data\")"
        },
        "fileAttachment": {
          "description": "Binary file data (used for file attachment fields with \"Content-Type: application/json\")",
          "type": "string",
          "format": "binary"
        },
        "fileName": {
          "description": "File name (used for file attachment fields with \"Content-Type: application/json\"))",
          "type": "string"
        },
        "forceCheckIn": {
          "description": "Check in the secret if it is checked out",
          "type": "boolean"
        },
        "includeInactive": {
          "description": "Whether to include inactive secrets",
          "type": "boolean"
        },
        "newPassword": {
          "description": "New secret password",
          "type": "string"
        },
        "ticketNumber": {
          "description": "Associated ticket number",
          "type": "string"
        },
        "ticketSystemId": {
          "description": "Associated ticket system ID",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value of the secret field",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDetailUpdateGeneralArgs": {
      "description": "Secret General Settings Update Message",
      "properties": {
        "data": {
          "$ref": "#/definitions/SecretDetailGeneralUpdateModel",
          "description": "Secret General Settings Update Data"
        }
      },
      "type": "object"
    },
    "SecretDetailGeneralUpdateModel": {
      "description": "Secret General Settings Update",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether the secret is active"
        },
        "enableInheritSecretPolicy": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether the secret policy is inherited from the containing folder"
        },
        "folder": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Containing folder ID"
        },
        "generateSshKeys": {
          "description": "When true autogenerate new SSH keys",
          "type": "boolean"
        },
        "heartbeatEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Heartbeat Enabled"
        },
        "isOutOfSync": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Whether the secret is out of sync"
        },
        "name": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Secret Name"
        },
        "secretFields": {
          "description": "Secret Fields",
          "items": {
            "$ref": "#/definitions/UpdateTemplateFieldOfString"
          },
          "type": "array"
        },
        "secretPolicy": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Secret Policy ID"
        },
        "site": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Secret Site"
        },
        "template": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Secret Template"
        }
      },
      "type": "object"
    },
    "UpdateTemplateFieldOfString": {
      "description": "Update Secret Template Field",
      "properties": {
        "dirty": {
          "description": "Whether or not the field is dirty.  If false, the field value will not be updated.  If true, the field value will be updated.",
          "type": "boolean"
        },
        "slug": {
          "description": "Secret template slug name",
          "type": "string"
        },
        "value": {
          "description": "Secret field vlaue",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDetailGeneralViewModel": {
      "description": "Secret Detail General View Model",
      "properties": {
        "active": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Whether the secret is active"
        },
        "autoChangePassword": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Whether the password should automatically change upon expiration."
        },
        "canGenerateSshKey": {
          "description": "CanGenerateSshKey",
          "type": "boolean"
        },
        "enableInheritSecretPolicy": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Whether the secret policy is inherited from the containing folder"
        },
        "expiration": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Expiration"
        },
        "fields": {
          "description": "Fields",
          "items": {
            "$ref": "#/definitions/ViewTemplateFieldOfString"
          },
          "type": "array"
        },
        "folder": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "Containing folder ID"
        },
        "heartbeatEnabled": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "HeartbeatEnabled"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "isFavorite": {
          "description": "IsFavorite",
          "type": "boolean"
        },
        "isOutOfSync": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Whether the secret is out of sync"
        },
        "isTotpEnabled": {
          "description": "IsTotpEnabled",
          "type": "boolean"
        },
        "lastHeartBeatCheck": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalDateTime",
          "description": "Time of last heartbeat check"
        },
        "lastHeartBeatStatus": {
          "$ref": "#/definitions/ViewFieldValueOfSecretDetailHeartbeatStatus",
          "description": "Current status of heartbeat"
        },
        "launchers": {
          "description": "Launchers",
          "items": {
            "$ref": "#/definitions/SecretDetailLauncher"
          },
          "type": "array"
        },
        "name": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Name"
        },
        "outOfSyncReason": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "Reason message if the secret is out of sync"
        },
        "secretPolicy": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "SecretPolicy"
        },
        "site": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "Site"
        },
        "slugPrivateKey": {
          "description": "SlugPrivateKey",
          "type": "string"
        },
        "slugPublicKey": {
          "description": "SlugPublicKey",
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "Secret template"
        },
        "totpPasswordSlug": {
          "description": "TotpPasswordSlug",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewTemplateFieldOfString": {
      "description": "Fields",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "dropDownOptions": {
          "description": "DropDownOptions",
          "items": {
            "$ref": "#/definitions/ViewTemplateFieldDropDownOption"
          },
          "type": "array"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "passwordRequirementId": {
          "description": "PasswordRequirementId",
          "type": "integer",
          "format": "int32"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "slug": {
          "description": "Slug",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "$ref": "#/definitions/SecretFieldType",
          "description": "Type"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewTemplateFieldDropDownOption": {
      "description": "DropDownOptions",
      "properties": {
        "fieldValue": {
          "description": "FieldValue",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretFieldType": {
      "description": "Type",
      "properties": {},
      "type": "string",
      "enum": [
        "Text",
        "Notes",
        "Url",
        "Password",
        "File",
        "DropDown"
      ]
    },
    "ViewFieldValueOfSecretDetailHeartbeatStatus": {
      "description": "Current status of heartbeat",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/SecretDetailHeartbeatStatus",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "SecretDetailHeartbeatStatus": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "Failed",
        "Success",
        "Pending",
        "Disabled",
        "UnableToConnect",
        "UnknownError",
        "IncompatibleHost",
        "AccountLockedOut",
        "DnsMismatch",
        "UnableToValidateServerPublicKey",
        "Processing"
      ]
    },
    "SecretDetailLauncher": {
      "description": "Launchers",
      "properties": {
        "imagePath": {
          "description": "ImagePath",
          "type": "string"
        },
        "isRecorded": {
          "description": "IsRecorded",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "typeId": {
          "description": "TypeId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretDetailUpdateRpcScriptSecretsArgs": {
      "description": "RPC Script Update Message",
      "properties": {
        "data": {
          "$ref": "#/definitions/SecretDetailRpcScriptSecretsUpdateModel",
          "description": "RPC Script Update Data"
        }
      },
      "type": "object"
    },
    "SecretDetailRpcScriptSecretsUpdateModel": {
      "description": "Secrets available for RPC Scripts",
      "properties": {
        "resetSecretIds": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32[]",
          "description": "Secret IDs - this is a replace"
        }
      },
      "type": "object"
    },
    "SecretDetailRpcViewModel": {
      "description": "SecretDetailRpcViewModel",
      "properties": {
        "autoChangeEnabled": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "AutoChangeEnabled"
        },
        "autoChangeSchedule": {
          "$ref": "#/definitions/ViewFieldValueOfSecretDetailScheduleViewModel",
          "description": "AutoChangeSchedule"
        },
        "canEnterNextPassword": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "CanEnterNextPassword"
        },
        "expireText": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "ExpireText"
        },
        "hasNextPassphrase": {
          "description": "HasNextPassphrase",
          "type": "boolean"
        },
        "hasNextPassword": {
          "description": "HasNextPassword",
          "type": "boolean"
        },
        "hasNextPrivateKey": {
          "description": "HasNextPrivateKey",
          "type": "boolean"
        },
        "isValidForSshKeyRpc": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "IsValidForSshKeyRpc"
        },
        "passwordStatus": {
          "$ref": "#/definitions/SecretDetailPasswordStatus",
          "description": "PasswordStatus"
        },
        "passwordTypeId": {
          "description": "PasswordTypeId",
          "type": "integer",
          "format": "int32"
        },
        "passwordTypeName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "PasswordTypeName"
        },
        "passwordTypeWebScriptId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "PasswordTypeWebScriptId"
        },
        "privilegedAccountSecretId": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "PrivilegedAccountSecretId"
        },
        "privilegedAccountSecretName": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "PrivilegedAccountSecretName"
        },
        "resetSecrets": {
          "$ref": "#/definitions/ViewFieldValueOfSecretDetailRpcSecrets[]",
          "description": "ResetSecrets"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfSecretDetailScheduleViewModel": {
      "description": "AutoChangeSchedule",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/SecretDetailScheduleViewModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "SecretDetailScheduleViewModel": {
      "description": "Value",
      "properties": {
        "changeEveryMonths": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "ChangeEveryMonths"
        },
        "changeEveryMonthsDayNumber": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "ChangeEveryMonthsDayNumber"
        },
        "changeEveryMonthsInstance": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "ChangeEveryMonthsInstance"
        },
        "changeEveryMonthsInstanceTarget": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "ChangeEveryMonthsInstanceTarget"
        },
        "days": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "Days"
        },
        "friday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Friday"
        },
        "monday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Monday"
        },
        "monthScheduleType": {
          "$ref": "#/definitions/ViewFieldValueOfAutoChangeMonthType",
          "description": "MonthScheduleType"
        },
        "numberMonthlyDay": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "NumberMonthlyDay"
        },
        "onlyChangeIfExpired": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "OnlyChangeIfExpired"
        },
        "saturday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Saturday"
        },
        "scheduleType": {
          "$ref": "#/definitions/ViewFieldValueOfAutoChangeScheduleType",
          "description": "ScheduleType"
        },
        "startingOn": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalDateTime",
          "description": "StartingOn"
        },
        "sunday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Sunday"
        },
        "thursday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Thursday"
        },
        "tuesday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Tuesday"
        },
        "wednesday": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalBoolean",
          "description": "Wednesday"
        },
        "weeks": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "Weeks"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfAutoChangeMonthType": {
      "description": "MonthScheduleType",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/AutoChangeMonthType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "AutoChangeMonthType": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "Date",
        "Day"
      ]
    },
    "ViewFieldValueOfAutoChangeScheduleType": {
      "description": "ScheduleType",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/AutoChangeScheduleType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "AutoChangeScheduleType": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "Expires",
        "Daily",
        "Weekly",
        "Monthly"
      ]
    },
    "SecretDetailPasswordStatus": {
      "description": "PasswordStatus",
      "properties": {
        "failedAttempts": {
          "description": "FailedAttempts",
          "type": "integer",
          "format": "int32"
        },
        "lastRpcDate": {
          "description": "LastRpcDate",
          "type": "string",
          "format": "date-time"
        },
        "nextRpcDate": {
          "description": "NextRpcDate",
          "type": "string",
          "format": "date-time"
        },
        "rpcMessage": {
          "description": "RpcMessage",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/PasswordChangeResult",
          "description": "Status"
        }
      },
      "type": "object"
    },
    "PasswordChangeResult": {
      "description": "Status",
      "properties": {},
      "type": "string",
      "enum": [
        "None",
        "Pending",
        "Success",
        "Fail"
      ]
    },
    "ViewFieldValueOfSecretDetailRpcSecrets[]": {
      "description": "ResetSecrets",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/SecretDetailRpcSecrets"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SecretDetailRpcSecrets": {
      "description": "Value",
      "properties": {
        "folderName": {
          "description": "FolderName",
          "type": "string"
        },
        "order": {
          "description": "Order",
          "type": "integer",
          "format": "int32"
        },
        "secretId": {
          "description": "SecretId",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "SecretName",
          "type": "string"
        },
        "secretTemplateName": {
          "description": "SecretTemplateName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDetailUpdateSecurityApprovalArgs": {
      "description": "Secret Update Security Approval Message",
      "properties": {
        "data": {
          "$ref": "#/definitions/SecretDetailSecurityApprovalUpdateModel",
          "description": "Secret Update Security Approval Data"
        }
      },
      "type": "object"
    },
    "SecretDetailSecurityApprovalUpdateModel": {
      "description": "Secret Security Approval Update",
      "properties": {
        "approvers": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32[]",
          "description": "Approvers - replaces all with this list"
        },
        "requireApprovalType": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalSecretDetailApprovalType",
          "description": "Approval Type"
        },
        "workflowTemplateId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Workflow Template ID"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfOptionalSecretDetailApprovalType": {
      "description": "Approval Type",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretDetailSecurityViewModel": {
      "description": "SecretDetailSecurityViewModel",
      "properties": {
        "allowOwnersUnrestrictedSshCommands": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "AllowOwnersUnrestrictedSshCommands"
        },
        "approvalWorkflow": {
          "$ref": "#/definitions/ViewFieldValueOfWorkflowTemplate",
          "description": "ApprovalWorkflow"
        },
        "approvalWorkflowOptions": {
          "$ref": "#/definitions/ViewFieldValueOfWorkflowTemplate[]",
          "description": "ApprovalWorkflowOptions"
        },
        "approvers": {
          "$ref": "#/definitions/ViewFieldValueOfSecretDetailUserViewModel[]",
          "description": "Approvers"
        },
        "availableDoubleLocks": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfViewTemplateFieldDropDownOption[]",
          "description": "AvailableDoubleLocks"
        },
        "availableRequireApprovalTypes": {
          "$ref": "#/definitions/ViewFieldValueOfSecretDetailApprovalType[]",
          "description": "AvailableRequireApprovalTypes"
        },
        "checkOutChangePasswordEnabled": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "CheckOutChangePasswordEnabled"
        },
        "checkOutDefaultIntervalDisplay": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "CheckOutDefaultIntervalDisplay"
        },
        "checkOutEnabled": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Whether secret checkout is enabled"
        },
        "checkOutIntervalDisplay": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "CheckOutIntervalDisplay"
        },
        "checkOutIntervalMinutes": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "Checkout interval, in minutes"
        },
        "commandRestrictionType": {
          "$ref": "#/definitions/ViewFieldValueOfCommandRestrictionType",
          "description": "CommandRestrictionType"
        },
        "doubleLockId": {
          "$ref": "#/definitions/ViewFieldValueOfInt32",
          "description": "DoubleLockId"
        },
        "doubleLockName": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfString",
          "description": "DoubleLockName"
        },
        "hideLauncherPassword": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "HideLauncherPassword"
        },
        "isDoubleLock": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Whether double lock is enabled"
        },
        "passwordRequirements": {
          "$ref": "#/definitions/SecretDetailSecurityPasswordRequirements",
          "description": "PasswordRequirements"
        },
        "proxyEnabled": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "ProxyEnabled"
        },
        "requireApprovalType": {
          "$ref": "#/definitions/ViewFieldValueOfSecretDetailApprovalType",
          "description": "RequireApprovalType"
        },
        "requiresComment": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "RequiresComment"
        },
        "restrictedSshCommandCount": {
          "description": "RestrictedSshCommandCount",
          "type": "integer",
          "format": "int32"
        },
        "restrictSshCommands": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "RestrictSshCommands"
        },
        "sessionRecordingEnabled": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "Whether session recording is enabled"
        },
        "webLauncherRequiresIncognitoMode": {
          "$ref": "#/definitions/ViewFieldValueOfBoolean",
          "description": "WebLauncherRequiresIncognitoMode"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfWorkflowTemplate": {
      "description": "ApprovalWorkflow",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/WorkflowTemplate",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "WorkflowTemplate": {
      "description": "Value",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "configurationJson": {
          "description": "ConfigurationJson",
          "type": "string"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "expirationMinutes": {
          "description": "ExpirationMinutes",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "reusable": {
          "description": "Reusable",
          "type": "boolean"
        },
        "typeName": {
          "description": "TypeName",
          "type": "string"
        },
        "workflowTemplateId": {
          "description": "WorkflowTemplateId",
          "type": "integer",
          "format": "int32"
        },
        "workflowType": {
          "$ref": "#/definitions/WorkflowType",
          "description": "WorkflowType"
        }
      },
      "type": "object"
    },
    "WorkflowType": {
      "description": "WorkflowType",
      "properties": {},
      "type": "string",
      "enum": [
        "AccessRequest"
      ]
    },
    "ViewFieldValueOfWorkflowTemplate[]": {
      "description": "ApprovalWorkflowOptions",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/WorkflowTemplate"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfSecretDetailUserViewModel[]": {
      "description": "Approvers",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/SecretDetailUserViewModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SecretDetailUserViewModel": {
      "description": "Value",
      "properties": {
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        },
        "isGroup": {
          "description": "IsGroup",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ViewFieldValueReadOnlyOfViewTemplateFieldDropDownOption[]": {
      "description": "AvailableDoubleLocks",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/ViewTemplateFieldDropDownOption"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfSecretDetailApprovalType[]": {
      "description": "AvailableRequireApprovalTypes",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/SecretDetailApprovalType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SecretDetailApprovalType": {
      "description": "Secret Security Approval Type",
      "properties": {},
      "type": "string",
      "enum": [
        "None",
        "RequireApproval",
        "RequireEditorsApproval",
        "RequireEveryoneApproval"
      ]
    },
    "ViewFieldValueOfCommandRestrictionType": {
      "description": "CommandRestrictionType",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/CommandRestrictionType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "CommandRestrictionType": {
      "description": "Value",
      "properties": {},
      "type": "string",
      "enum": [
        "AllowedMenu",
        "BlockedList"
      ]
    },
    "SecretDetailSecurityPasswordRequirements": {
      "description": "PasswordRequirements",
      "properties": {
        "requirements": {
          "description": "Requirements",
          "items": {
            "$ref": "#/definitions/SecretDetailSecurityPasswordRequirement"
          },
          "type": "array"
        },
        "validateOnCreate": {
          "description": "ValidateOnCreate",
          "type": "boolean"
        },
        "validateOnEdit": {
          "description": "ValidateOnEdit",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SecretDetailSecurityPasswordRequirement": {
      "description": "Requirements",
      "properties": {
        "fieldDisplayName": {
          "description": "FieldDisplayName",
          "type": "string"
        },
        "fieldName": {
          "description": "FieldName",
          "type": "string"
        },
        "isCustom": {
          "description": "IsCustom",
          "type": "boolean"
        },
        "passwordRequirementId": {
          "description": "PasswordRequirementId",
          "type": "integer",
          "format": "int32"
        },
        "passwordRequirementName": {
          "description": "PasswordRequirementName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfSecretDetailApprovalType": {
      "description": "RequireApprovalType",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/SecretDetailApprovalType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "SecretDetailUpdateSecurityCheckoutArgs": {
      "description": "Secret Security Checkout Message",
      "properties": {
        "data": {
          "$ref": "#/definitions/SecretDetailSecurityCheckoutUpdateModel",
          "description": "Secret Security Checkout Data"
        }
      },
      "type": "object"
    },
    "SecretDetailSecurityCheckoutUpdateModel": {
      "description": "Secret Security Checkout Update",
      "properties": {
        "checkOutChangePasswordEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Change password on Check In"
        },
        "checkOutEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Is CheckOut enabled for this Secret"
        },
        "checkOutIntervalMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "CheckOut interval minutes"
        }
      },
      "type": "object"
    },
    "SecretDetailUpdateSecurityGeneralArgs": {
      "description": "Secret General Information Update Message",
      "properties": {
        "data": {
          "$ref": "#/definitions/SecretDetailSecurityGeneralUpdateModel",
          "description": "Secret General Information Update Data"
        }
      },
      "type": "object"
    },
    "SecretDetailSecurityGeneralUpdateModel": {
      "description": "Secret General Information Update",
      "properties": {
        "doubleLockId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Which DoubleLock to associate, must also pass EnableDoubleLock true"
        },
        "enableDoubleLock": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Enable DoubleLock, must also pass the DoubleLockId to use"
        },
        "hideLauncherPassword": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Hide the launcher password for non-owners"
        },
        "proxyEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Proxy Enabled"
        },
        "requiresComment": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Require a comment to view this Secret"
        },
        "sessionRecordingEnabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Session Recording Enabled"
        },
        "webLauncherRequiresIncognitoMode": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Require Web lancher to be in incognito mode"
        }
      },
      "type": "object"
    },
    "PagingOfSecretDetailStateViewModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretDetailStateViewModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretDetailStateViewModel": {
      "description": "Secret Detail State View Model",
      "properties": {
        "actions": {
          "description": "Allowed action for current user",
          "items": {
            "$ref": "#/definitions/SecretDetailActionType"
          },
          "type": "array"
        },
        "checkedOutUserDisplayName": {
          "description": "Display Name of User that has the secret checked out",
          "type": "string"
        },
        "checkedOutUserId": {
          "description": "User Secret is checked out to",
          "type": "integer",
          "format": "int32"
        },
        "checkOutIntervalMinutes": {
          "description": "Number of minutes before checkout ",
          "type": "integer",
          "format": "int32"
        },
        "checkOutMinutesRemaining": {
          "description": "Minutes remaining in check out",
          "type": "integer",
          "format": "int32"
        },
        "folderId": {
          "description": "Folder Id",
          "type": "integer",
          "format": "int32"
        },
        "folderName": {
          "description": "Folder Name",
          "type": "string"
        },
        "id": {
          "description": "Secret Id",
          "type": "integer",
          "format": "int32"
        },
        "isActive": {
          "description": "Active indicator",
          "type": "boolean"
        },
        "isCheckedOut": {
          "description": "Is the Secret checked out",
          "type": "boolean"
        },
        "isCheckedOutByCurrentUser": {
          "description": "Indicates whether the Secret is checked out by the current user",
          "type": "boolean"
        },
        "passwordChangePending": {
          "description": "Pending Password change on secret indicator",
          "type": "boolean"
        },
        "role": {
          "description": "Role that current user has on Secret",
          "type": "string"
        },
        "secretName": {
          "description": "Secret Name",
          "type": "string"
        },
        "secretState": {
          "$ref": "#/definitions/SecretAccessRequired",
          "description": "Current State of the Secret"
        }
      },
      "type": "object"
    },
    "SecretDetailActionType": {
      "description": "Secret Detail Action Type",
      "properties": {},
      "type": "string",
      "enum": [
        "ChangePasswordNow",
        "ConvertTemplate",
        "Copy",
        "Delete",
        "Edit",
        "EditExpiration",
        "EditRpc",
        "EditSecurity",
        "Expire",
        "Heartbeat",
        "EditShare",
        "ShowSshProxyCredentials",
        "StopChangePasswordNow",
        "ViewAudit",
        "ViewDependencies",
        "ViewLaunchers",
        "ViewExpiration",
        "ViewHooks",
        "ViewRpc",
        "ViewSecurity",
        "ViewSettings",
        "Undelete",
        "ForceCheckin",
        "ViewShare",
        "EditHooks",
        "EditDependencies",
        "ViewGeneralDetails",
        "ViewHeartbeatStatus",
        "Checkin",
        "Checkout",
        "GenerateOneTimePassword",
        "ShowSshTerminalDetails",
        "ShowRdpProxyCredentials",
        "ViewMetadata"
      ]
    },
    "SecretAccessRequired": {
      "description": "Secret Access Required",
      "properties": {},
      "type": "string",
      "enum": [
        "None",
        "RequiresApproval",
        "RequiresCheckout",
        "RequiresComment",
        "RequiresDoubleLockPassword",
        "CreateDoubleLockPassword",
        "DoubleLockNoAccess",
        "CannotView",
        "RequiresUndelete",
        "RequiresCheckoutPendingRPC",
        "RequiresCheckoutAndComment"
      ]
    },
    "SecretDetailStopPasswordResultModel": {
      "description": "SecretDetailStopPasswordResultModel",
      "properties": {
        "success": {
          "description": "Success",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "FavoriteSecretArgs": {
      "description": "Arguments to favorite a secret.",
      "properties": {
        "isFavorite": {
          "description": "Whether or not the secret is a favorite. This is an optional argument.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "WidgetSecretModel": {
      "description": "WidgetSecretModel[]",
      "properties": {
        "folderId": {
          "description": "FolderId",
          "type": "integer",
          "format": "int32"
        },
        "folderPath": {
          "description": "FolderPath",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "SecretName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfSecretLookup": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretLookup"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretLookup": {
      "description": "Simple secret representation",
      "properties": {
        "id": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Secret name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretProxyArgs": {
      "description": "Arguments to load the proxy credentials",
      "properties": {
        "launcherType": {
          "description": "The type of the launcher to proxy",
          "type": "integer",
          "format": "int32"
        },
        "machine": {
          "description": "The machine name",
          "type": "string"
        },
        "secretId": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        },
        "siteId": {
          "description": "The site ID to use (RDP proxy only)",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretSshTerminalArgs": {
      "description": "Arguments to load the SSH proxy credentials",
      "properties": {
        "secretId": {
          "description": "Secret ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretServerSettingsImportCapabilitiesArgs": {
      "description": "SecretServerSettingsImportCapabilitiesArgs",
      "properties": {
        "file": {
          "description": "File",
          "type": "string"
        },
        "isImport": {
          "description": "IsImport",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SecretServerSettingsImportCapabilityModel": {
      "description": "SecretServerSettingsImportCapabilityModel",
      "properties": {
        "advancedSettings": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationAdvancedModel[]",
          "description": "Advanced Settings configuration"
        },
        "applicationSettings": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationApplicationSettingsModel",
          "description": "Application Settings configuration"
        },
        "configurationVersion": {
          "description": "Export Configuration Version",
          "type": "string"
        },
        "email": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationEmailModel",
          "description": "Email configuration"
        },
        "externalInstanceId": {
          "description": "ID for specific instance",
          "type": "string",
          "format": "uuid"
        },
        "folderSettings": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationFoldersModel",
          "description": "Folder configuration"
        },
        "launcherSettings": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationLauncherSettingsModel",
          "description": "Launcher Settings configuration"
        },
        "licenses": {
          "$ref": "#/definitions/ViewFieldValueOfLicenseModel[]",
          "description": "Licenses (on-perm only)"
        },
        "localUserPasswords": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationLocalUserPasswordsModel",
          "description": "Local User Password configuration"
        },
        "login": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationLoginModel",
          "description": "Login configuration"
        },
        "permissionOptions": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationPermissionOptionsModel",
          "description": "Permission Options configuration"
        },
        "protocolHandlerSettings": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationProtocolHandlerSettingsModel",
          "description": "Protocol Handler Settings configuration"
        },
        "saml": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationSamlModel",
          "description": "SAML configuration"
        },
        "security": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationSecurityModel",
          "description": "Security configuration"
        },
        "sessionRecording": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationSessionRecordingModel",
          "description": "Session Recording configuration"
        },
        "sshCommands": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationSshCommandExportModel",
          "description": "SSH Command configuration"
        },
        "ticketSystem": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationTicketSystemModel",
          "description": "Ticket System configuration"
        },
        "userExperience": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationUserExperienceModel",
          "description": "User Experience configuration"
        },
        "userInterface": {
          "$ref": "#/definitions/ViewFieldValueOfConfigurationUserInterfaceModel",
          "description": "User Interface configuration"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationAdvancedModel[]": {
      "description": "Advanced Settings configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/ConfigurationAdvancedModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ConfigurationAdvancedModel": {
      "description": "Value",
      "properties": {
        "advancedSettingId": {
          "description": "AdvancedSettingId",
          "type": "integer",
          "format": "int32"
        },
        "settingName": {
          "description": "SettingName",
          "type": "string"
        },
        "value": {
          "description": "Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationApplicationSettingsModel": {
      "description": "Application Settings configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationApplicationSettingsModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationEmailModel": {
      "description": "Email configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationEmailModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationFoldersModel": {
      "description": "Folder configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationFoldersModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationLauncherSettingsModel": {
      "description": "Launcher Settings configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationLauncherSettingsModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfLicenseModel[]": {
      "description": "Licenses (on-perm only)",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "items": {
            "$ref": "#/definitions/LicenseModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LicenseModel": {
      "description": "Value",
      "properties": {
        "description": {
          "description": "License Description (read-only)",
          "type": "string"
        },
        "licenseKey": {
          "description": "License Key",
          "type": "string"
        },
        "licenseName": {
          "description": "License Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationLocalUserPasswordsModel": {
      "description": "Local User Password configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationLocalUserPasswordsModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationLoginModel": {
      "description": "Login configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationLoginModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationPermissionOptionsModel": {
      "description": "Permission Options configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationPermissionOptionsModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationProtocolHandlerSettingsModel": {
      "description": "Protocol Handler Settings configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationProtocolHandlerSettingsModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationSamlModel": {
      "description": "SAML configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationSamlModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationSecurityModel": {
      "description": "Security configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationSecurityModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationSessionRecordingModel": {
      "description": "Session Recording configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationSessionRecordingModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationSshCommandExportModel": {
      "description": "SSH Command configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationSshCommandExportModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ConfigurationSshCommandExportModel": {
      "description": "Value",
      "properties": {
        "sshCommandBlocklists": {
          "description": "SshCommandBlocklists",
          "items": {
            "$ref": "#/definitions/SshCommandBlocklistModel"
          },
          "type": "array"
        },
        "sshCommandMenuMaps": {
          "description": "SshCommandMenuMaps",
          "items": {
            "$ref": "#/definitions/ConfigurationSshCommandMenuMapModel"
          },
          "type": "array"
        },
        "sshCommandMenus": {
          "description": "SshCommandMenus",
          "items": {
            "$ref": "#/definitions/ConfigurationSshCommandMenuModel"
          },
          "type": "array"
        },
        "sshCommands": {
          "description": "SshCommands",
          "items": {
            "$ref": "#/definitions/SshCommandModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SshCommandBlocklistModel": {
      "description": "SSH command Blocklist",
      "properties": {
        "active": {
          "description": "Active / inactive",
          "type": "boolean"
        },
        "description": {
          "description": "SSH command Blocklist description",
          "type": "string"
        },
        "name": {
          "description": "SSH command Blocklist name",
          "type": "string"
        },
        "sshCommandBlocklistId": {
          "description": "SSH command Blocklist ID",
          "type": "string",
          "format": "uuid"
        },
        "sshCommands": {
          "description": "SSH commands in Blocklist",
          "items": {
            "$ref": "#/definitions/SshCommandModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SshCommandModel": {
      "description": "SSH Command",
      "properties": {
        "command": {
          "description": "SSH command",
          "type": "string"
        },
        "commandPermissionType": {
          "$ref": "#/definitions/CommandPermissionType",
          "description": "Allowed or Blocked"
        },
        "name": {
          "description": "SSH command name",
          "type": "string"
        },
        "sortOrder": {
          "description": "Sort order",
          "type": "integer",
          "format": "int32"
        },
        "sshCommandGuid": {
          "description": "SSH command Guid",
          "type": "string",
          "format": "uuid"
        },
        "sshCommandId": {
          "description": "SSH command ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "CommandPermissionType": {
      "description": "Allowed or Blocked",
      "properties": {},
      "type": "string",
      "enum": [
        "Allowed",
        "Blocked"
      ]
    },
    "ConfigurationSshCommandMenuMapModel": {
      "description": "SshCommandMenuMaps",
      "properties": {
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "sshCommandGuid": {
          "description": "SshCommandGuid",
          "type": "string",
          "format": "uuid"
        },
        "sshCommandMenuGuid": {
          "description": "SshCommandMenuGuid",
          "type": "string",
          "format": "uuid"
        }
      },
      "type": "object"
    },
    "ConfigurationSshCommandMenuModel": {
      "description": "SshCommandMenus",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "sshCommandMenuGuid": {
          "description": "SshCommandMenuGuid",
          "type": "string",
          "format": "uuid"
        },
        "sshCommandMenuId": {
          "description": "SshCommandMenuId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationTicketSystemModel": {
      "description": "Ticket System configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationTicketSystemModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ConfigurationTicketSystemModel": {
      "description": "List of Ticket Systems",
      "properties": {
        "ticketSystemList": {
          "description": "List of Ticket Systems",
          "items": {
            "$ref": "#/definitions/TicketSystemModelV2"
          },
          "type": "array"
        },
        "warnings": {
          "$ref": "#/definitions/DictionaryOfStringAndString",
          "description": "Warnings"
        }
      },
      "type": "object"
    },
    "TicketSystemModelV2": {
      "description": "List of Ticket Systems",
      "properties": {
        "active": {
          "description": "Ticket System Active status",
          "type": "boolean"
        },
        "addCommentsToTicket": {
          "description": "Send comment to your integrated Ticket System and add it to the incident or change request.",
          "type": "boolean"
        },
        "bmcChangeManagementCommentWorkType": {
          "description": "BMC Remedy Incident Management integration only.  Select work type for comments added.",
          "type": "string"
        },
        "bmcIncidentManagementCommentWorkType": {
          "description": "BMC Remedy Incident Management integration only.  Select work type for comments added.",
          "type": "string"
        },
        "bmcRemedyAuthentication": {
          "description": "BMC Remedy integration only. Authentication value that usually represents a login server.",
          "type": "string"
        },
        "bmcRemedyUrlEndpoint": {
          "description": "BMC Remedy integration only.  The SOAP URL endpoint for the BMC Remedy Incident or Change Management.  Should be the CHG_ChangeInterface_WS or HPD_IncidentInterface_WS endpoint.",
          "type": "string"
        },
        "description": {
          "description": "Ticket System Description",
          "type": "string"
        },
        "displayMessage": {
          "description": "Ticket System Ticket Title",
          "type": "string"
        },
        "forceRequireTicketNumber": {
          "$ref": "#/definitions/ForceRequireTicketSystemOptions",
          "description": "Ticket System Comment and/or Number Requirement"
        },
        "isDefault": {
          "description": "Indicates the Ticket System is the default choice.",
          "type": "boolean"
        },
        "name": {
          "description": "Ticket System Name",
          "type": "string"
        },
        "organizationId": {
          "description": "Ticket System Organization Id",
          "type": "integer",
          "format": "int32"
        },
        "powerShellAddCommentScriptArguments": {
          "description": "PowerShell integration only.  Optional arguments for the comment script.  Arguemnts are separated by a space.",
          "type": "string"
        },
        "powerShellAddCommentScriptId": {
          "description": "PowerShell integration only.  Custom PowerSHell script to add a comment to a ticket system.",
          "type": "integer",
          "format": "int32"
        },
        "powerShellAddTicketCommentScriptArguments": {
          "description": "PowerShell integration only.  Optional arguments for the ticket comment script.  Arguemnts are separated by a space.",
          "type": "string"
        },
        "powerShellAddTicketCommentScriptId": {
          "description": "PowerShell integration only.  Custom PowerSHell script to add a comment to a ticket in a ticket system.",
          "type": "integer",
          "format": "int32"
        },
        "powerShellRunAsAccountSecretId": {
          "description": "PowerShell integration only.  Secret Id for credentials to use to run the Powershell.",
          "type": "integer",
          "format": "int32"
        },
        "powerShellTicketStatusScriptArguments": {
          "description": "PowerShell integration only.  Optional arguments for the ticket status script.  Arguemnts are separated by a space.",
          "type": "string"
        },
        "powerShellTicketStatusScriptId": {
          "description": "Powreshell Integration only.  Custom PowerShell script to get the ticket status.",
          "type": "integer",
          "format": "int32"
        },
        "serviceNowAllowedStatuses": {
          "description": "ServiceNow integration only.  Statuses to accept from ServiceNow separated by commas.",
          "type": "string"
        },
        "serviceNowDomainName": {
          "description": "ServiceNow integration only. The domain name that hosts the RESTful web services for Ticket System integration.",
          "type": "string"
        },
        "siteId": {
          "description": "Ticket System Site",
          "type": "integer",
          "format": "int32"
        },
        "systemCredentialSecretId": {
          "description": "Privilged Secret Id for credentials to connect to integrated Ticket Systems.",
          "type": "integer",
          "format": "int32"
        },
        "ticketNumberErrorMessage": {
          "description": "Ticket Number Validation Error Message",
          "type": "string"
        },
        "ticketNumberValidation": {
          "description": "Ticket Number Validation Regex",
          "type": "string"
        },
        "ticketSystemId": {
          "description": "The unique Id of the ticket system.",
          "type": "integer",
          "format": "int32"
        },
        "ticketSystemType": {
          "$ref": "#/definitions/TicketSystemTypes",
          "description": "Ticket System Type"
        },
        "viewTicketUrl": {
          "description": "Ticket System URL pattern",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationUserExperienceModel": {
      "description": "User Experience configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationUserExperienceModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfConfigurationUserInterfaceModel": {
      "description": "User Interface configuration",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/ConfigurationUserInterfaceModel",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "SecretServerSettingsModel": {
      "description": "SecretServerSettingsModel",
      "properties": {
        "advancedSettings": {
          "description": "Advanced Configuration Settings",
          "items": {
            "$ref": "#/definitions/ConfigurationAdvancedModel"
          },
          "type": "array"
        },
        "applicationSettings": {
          "$ref": "#/definitions/ConfigurationApplicationSettingsModel",
          "description": "General Application Configuration Settings"
        },
        "configurationVersion": {
          "description": "Export Configuration Version",
          "type": "string"
        },
        "email": {
          "$ref": "#/definitions/ConfigurationEmailModel",
          "description": "Email server configuration"
        },
        "externalInstanceId": {
          "description": "ID for specific instance",
          "type": "string",
          "format": "uuid"
        },
        "folderSettings": {
          "$ref": "#/definitions/ConfigurationFoldersModel",
          "description": "Folders Configuration"
        },
        "launcherSettings": {
          "$ref": "#/definitions/ConfigurationLauncherSettingsModel",
          "description": "Launcher Settings Configuration"
        },
        "licenses": {
          "description": "License Keys",
          "items": {
            "$ref": "#/definitions/LicenseModel"
          },
          "type": "array"
        },
        "localUserPasswords": {
          "$ref": "#/definitions/ConfigurationLocalUserPasswordsModel",
          "description": "Local User Passwords configuration"
        },
        "login": {
          "$ref": "#/definitions/ConfigurationLoginModel",
          "description": "Login configuration"
        },
        "permissionOptions": {
          "$ref": "#/definitions/ConfigurationPermissionOptionsModel",
          "description": "Permission Options Configuration"
        },
        "protocolHandlerSettings": {
          "$ref": "#/definitions/ConfigurationProtocolHandlerSettingsModel",
          "description": "Protocol Handler Settings Configuration"
        },
        "saml": {
          "$ref": "#/definitions/ConfigurationSamlModel",
          "description": "Saml configuration"
        },
        "security": {
          "$ref": "#/definitions/ConfigurationSecurityModel",
          "description": "Security configuration"
        },
        "sessionRecording": {
          "$ref": "#/definitions/ConfigurationSessionRecordingModel",
          "description": "Session Recording Configuration"
        },
        "sshCommands": {
          "$ref": "#/definitions/ConfigurationSshCommandExportModel",
          "description": "SSH Command configuration"
        },
        "ticketSystem": {
          "$ref": "#/definitions/ConfigurationTicketSystemModel",
          "description": "Ticket Systems Configuration"
        },
        "userExperience": {
          "$ref": "#/definitions/ConfigurationUserExperienceModel",
          "description": "User Experience Configuration"
        },
        "userInterface": {
          "$ref": "#/definitions/ConfigurationUserInterfaceModel",
          "description": "User Interface Configuration Settings"
        }
      },
      "type": "object"
    },
    "SecretServerSettingsImportArgs": {
      "description": "SecretServerSettingsImportArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SecretServerSettingsPatchModel",
          "description": "Data"
        },
        "filter": {
          "$ref": "#/definitions/SecretServerSettingsQuery",
          "description": "Filter"
        }
      },
      "type": "object"
    },
    "SecretServerSettingsPatchModel": {
      "description": "Data",
      "properties": {
        "advancedSettings": {
          "description": "Advanced Configuration Settings",
          "items": {
            "$ref": "#/definitions/ConfigurationAdvancedUpdateArgs"
          },
          "type": "array"
        },
        "applicationSettings": {
          "$ref": "#/definitions/ConfigurationApplicationSettingsPatchModel",
          "description": "Application settings configuration"
        },
        "configurationVersion": {
          "description": "Export Configuration Version",
          "type": "string"
        },
        "email": {
          "$ref": "#/definitions/ConfigurationEmailPatchModel",
          "description": "Email configuration"
        },
        "externalInstanceId": {
          "description": "ID for specific instance",
          "type": "string",
          "format": "uuid"
        },
        "folderSettings": {
          "$ref": "#/definitions/ConfigurationFoldersPatchModel",
          "description": "Folder configuration"
        },
        "launcherSettings": {
          "$ref": "#/definitions/ConfigurationLauncherSettingsPatchModel",
          "description": "Laucher settings configuration"
        },
        "licenses": {
          "description": "Licenses (on-perm only)",
          "items": {
            "$ref": "#/definitions/LicenseModel"
          },
          "type": "array"
        },
        "localUserPasswords": {
          "$ref": "#/definitions/ConfigurationLocalPasswordPatchModel",
          "description": "Local User Password configuration"
        },
        "login": {
          "$ref": "#/definitions/ConfigurationLoginPatchModel",
          "description": "Login configuration"
        },
        "permissionOptions": {
          "$ref": "#/definitions/ConfigurationPermissionOptionsPatchModel",
          "description": "Permission configuration"
        },
        "protocolHandlerSettings": {
          "$ref": "#/definitions/ConfigurationProtocolHandlerSettingsPatchModel",
          "description": "Protocol handler settings configuration"
        },
        "saml": {
          "$ref": "#/definitions/ConfigurationSamlPatchModel",
          "description": "SAML configuration"
        },
        "security": {
          "$ref": "#/definitions/ConfigurationSecurityPatchModel",
          "description": "Security configuration"
        },
        "sessionRecording": {
          "$ref": "#/definitions/ConfigurationSessionRecordingPatchModel",
          "description": "Session Recording configuration"
        },
        "sshCommands": {
          "$ref": "#/definitions/ConfigurationSshCommandImportModel",
          "description": "SSH Commands configuration"
        },
        "ticketSystem": {
          "$ref": "#/definitions/ConfigurationTicketSystemListCreateOrPatchModel",
          "description": "Ticket Systems Configuration"
        },
        "userExperience": {
          "$ref": "#/definitions/ConfigurationUserExperiencePatchModel",
          "description": "User experience configuration"
        },
        "userInterface": {
          "$ref": "#/definitions/ConfigurationUserInterfacePatchModel",
          "description": "User interface configuration"
        }
      },
      "type": "object"
    },
    "ConfigurationAdvancedUpdateArgs": {
      "description": "Advanced Configuration Settings",
      "required": [
        "advancedSettingId"
      ],
      "properties": {
        "advancedSettingId": {
          "description": "Setting Id",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Setting Value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationSshCommandImportModel": {
      "description": "SSH Commands configuration",
      "properties": {
        "sshCommandBlocklists": {
          "description": "SshCommandBlocklists",
          "items": {
            "$ref": "#/definitions/SshCommandBlocklistPatchModel"
          },
          "type": "array"
        },
        "sshCommandMenuMaps": {
          "description": "SshCommandMenuMaps",
          "items": {
            "$ref": "#/definitions/ConfigurationSshCommandMenuMapModel"
          },
          "type": "array"
        },
        "sshCommandMenus": {
          "description": "SshCommandMenus",
          "items": {
            "$ref": "#/definitions/ConfigurationSshCommandMenuModel"
          },
          "type": "array"
        },
        "sshCommands": {
          "description": "SshCommands",
          "items": {
            "$ref": "#/definitions/SshCommandPatchModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SshCommandBlocklistPatchModel": {
      "description": "SshCommandBlocklists",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Active"
        },
        "description": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Description"
        },
        "name": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Name"
        },
        "sshCommandBlocklistId": {
          "description": "SshCommandBlocklistId",
          "type": "string",
          "format": "uuid"
        },
        "sshCommandIds": {
          "$ref": "#/definitions/UpdateFieldValueOfGuid[]",
          "description": "SshCommandIds"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfGuid[]": {
      "description": "SshCommandIds",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "description": "Value",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SshCommandPatchModel": {
      "description": "SshCommands",
      "properties": {
        "command": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Command"
        },
        "name": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Name"
        },
        "sortOrder": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "SortOrder"
        },
        "sshCommandGuid": {
          "description": "SshCommandGuid",
          "type": "string",
          "format": "uuid"
        },
        "sshCommandId": {
          "description": "SshCommandId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretServerSettingsQuery": {
      "description": "Filter",
      "properties": {
        "loadAdvancedSettings": {
          "description": "LoadAdvancedSettings",
          "type": "boolean"
        },
        "loadAll": {
          "description": "LoadAll",
          "type": "boolean"
        },
        "loadApplicationSettings": {
          "description": "LoadApplicationSettings",
          "type": "boolean"
        },
        "loadEmail": {
          "description": "LoadEmail",
          "type": "boolean"
        },
        "loadFolderSettings": {
          "description": "LoadFolderSettings",
          "type": "boolean"
        },
        "loadLauncherSettings": {
          "description": "LoadLauncherSettings",
          "type": "boolean"
        },
        "loadLicenses": {
          "description": "LoadLicenses",
          "type": "boolean"
        },
        "loadLocalUserPasswords": {
          "description": "LoadLocalUserPasswords",
          "type": "boolean"
        },
        "loadLogin": {
          "description": "LoadLogin",
          "type": "boolean"
        },
        "loadPermissionOptions": {
          "description": "LoadPermissionOptions",
          "type": "boolean"
        },
        "loadProtocolHandlerSettings": {
          "description": "LoadProtocolHandlerSettings",
          "type": "boolean"
        },
        "loadSaml": {
          "description": "LoadSaml",
          "type": "boolean"
        },
        "loadSecurity": {
          "description": "LoadSecurity",
          "type": "boolean"
        },
        "loadSessionRecording": {
          "description": "LoadSessionRecording",
          "type": "boolean"
        },
        "loadSshCommands": {
          "description": "LoadSshCommands",
          "type": "boolean"
        },
        "loadTicketSystem": {
          "description": "LoadTicketSystem",
          "type": "boolean"
        },
        "loadUserExperience": {
          "description": "LoadUserExperience",
          "type": "boolean"
        },
        "loadUserInterface": {
          "description": "LoadUserInterface",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SecretServerSettingsImportResultModel": {
      "description": "Secret Server Settings import results",
      "properties": {
        "errors": {
          "$ref": "#/definitions/DictionaryOfStringAndString",
          "description": "Errors that occurred during the import process"
        },
        "secretServerSettings": {
          "$ref": "#/definitions/SecretServerSettingsModel",
          "description": "The current Secret Server Settings"
        },
        "warnings": {
          "$ref": "#/definitions/DictionaryOfStringAndString",
          "description": "Warnings that occurred during the import process"
        }
      },
      "type": "object"
    },
    "PagingOfSecretTemplateGroupSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretTemplateGroupSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretTemplateGroupSummary": {
      "description": "Query results",
      "properties": {
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "displayNameWithDomain": {
          "description": "DisplayNameWithDomain",
          "type": "string"
        },
        "domainName": {
          "description": "DomainName",
          "type": "string"
        },
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        },
        "isPersonal": {
          "description": "IsPersonal",
          "type": "boolean"
        },
        "secretTypeAccessRoleId": {
          "description": "SecretTypeAccessRoleId",
          "type": "integer",
          "format": "int32"
        },
        "secretTypeId": {
          "description": "SecretTypeId",
          "type": "integer",
          "format": "int32"
        },
        "secretTypeName": {
          "description": "SecretTypeName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecretTemplatePermissionsUpdateArgs": {
      "description": "SecretTemplatePermissionsUpdateArgs",
      "properties": {
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        },
        "permissions": {
          "description": "Permissions",
          "items": {
            "$ref": "#/definitions/PermissionModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PermissionModel": {
      "description": "Permissions",
      "properties": {
        "roleId": {
          "description": "RoleId",
          "type": "integer",
          "format": "int32"
        },
        "secretTypeId": {
          "description": "SecretTypeId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretTemplatePermissionModel": {
      "description": "Secret template",
      "properties": {
        "id": {
          "description": "Secret template ID",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Secret template name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfSecretTemplateSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecretTemplateSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretTemplateSummary": {
      "description": "Secret template summary",
      "properties": {
        "active": {
          "description": "Is Secret template active",
          "type": "boolean"
        },
        "id": {
          "description": "Secret template ID",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Secret template name",
          "type": "string"
        },
        "secretCount": {
          "description": "Number of Secrets associated to the template. Only populated when IncludeCount is set to true.",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretTemplateCreateArgs": {
      "description": "SecretTemplateCreateArgs",
      "properties": {
        "fields": {
          "description": "Secret Template Fields",
          "items": {
            "$ref": "#/definitions/ISecretTemplateFieldCreateArgs"
          },
          "type": "array"
        },
        "name": {
          "description": "Secret Template Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ISecretTemplateFieldCreateArgs": {
      "description": "Secret Template Fields",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "editablePermission": {
          "description": "EditablePermission",
          "type": "integer",
          "format": "int32"
        },
        "editRequires": {
          "$ref": "#/definitions/EditRequiresOptions",
          "description": "EditRequires"
        },
        "fieldSlugName": {
          "description": "FieldSlugName",
          "type": "string"
        },
        "generatePasswordCharacterSet": {
          "description": "GeneratePasswordCharacterSet",
          "type": "string"
        },
        "generatePasswordLength": {
          "description": "GeneratePasswordLength",
          "type": "integer",
          "format": "int32"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "historyLength": {
          "description": "HistoryLength",
          "type": "integer",
          "format": "int32"
        },
        "isExpirationField": {
          "description": "IsExpirationField",
          "type": "boolean"
        },
        "isFile": {
          "description": "IsFile",
          "type": "boolean"
        },
        "isIndexable": {
          "description": "IsIndexable",
          "type": "boolean"
        },
        "isNotes": {
          "description": "IsNotes",
          "type": "boolean"
        },
        "isPassword": {
          "description": "IsPassword",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "isUrl": {
          "description": "IsUrl",
          "type": "boolean"
        },
        "mustEncrypt": {
          "description": "MustEncrypt",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "passwordRequirementId": {
          "description": "PasswordRequirementId",
          "type": "integer",
          "format": "int32"
        },
        "passwordTypeFieldId": {
          "description": "PasswordTypeFieldId",
          "type": "integer",
          "format": "int32"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretTemplateFieldCreateArgs": {
      "description": "SecretTemplateFieldCreateArgs",
      "properties": {
        "description": {
          "description": "Field description",
          "type": "string"
        },
        "displayName": {
          "description": "Field display name",
          "type": "string"
        },
        "editablePermission": {
          "description": "Who has editing rights",
          "type": "integer",
          "format": "int32"
        },
        "editRequires": {
          "$ref": "#/definitions/EditRequiresOptions",
          "description": "What option is required to edit this field including Owner, Edit, and Not Editable"
        },
        "fieldSlugName": {
          "description": "Field Slug Name",
          "type": "string"
        },
        "generatePasswordCharacterSet": {
          "description": "Generate password character set. Only returned if user can manage secret templates",
          "type": "string"
        },
        "generatePasswordLength": {
          "description": "Generate password length.  Only returned if user can manage secret templates",
          "type": "integer",
          "format": "int32"
        },
        "hideOnView": {
          "description": "Hide this field when viewing",
          "type": "boolean"
        },
        "historyLength": {
          "description": "History length",
          "type": "integer",
          "format": "int32"
        },
        "isExpirationField": {
          "description": "Is expiration field",
          "type": "boolean"
        },
        "isFile": {
          "description": "Is this field a file type",
          "type": "boolean"
        },
        "isIndexable": {
          "description": "Is able to be indexed",
          "type": "boolean"
        },
        "isNotes": {
          "description": "Is this field a notes field type",
          "type": "boolean"
        },
        "isPassword": {
          "description": "Is this field a password field type",
          "type": "boolean"
        },
        "isRequired": {
          "description": "Is this field required",
          "type": "boolean"
        },
        "isUrl": {
          "description": "Is this field a url field type",
          "type": "boolean"
        },
        "mustEncrypt": {
          "description": "Must encrypt.  Only returned if user can manage secret templates",
          "type": "boolean"
        },
        "name": {
          "description": "Field name",
          "type": "string"
        },
        "passwordRequirementId": {
          "description": "ID For Password Requirement assigned to field",
          "type": "integer",
          "format": "int32"
        },
        "passwordTypeFieldId": {
          "description": "Type of password field",
          "type": "integer",
          "format": "int32"
        },
        "sortOrder": {
          "description": "Sort Order for Field",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretTemplateField": {
      "description": "Secret template field",
      "properties": {
        "description": {
          "description": "Field description",
          "type": "string"
        },
        "displayName": {
          "description": "Field display name",
          "type": "string"
        },
        "editablePermission": {
          "description": "Who has editing rights",
          "type": "integer",
          "format": "int32"
        },
        "editRequires": {
          "$ref": "#/definitions/EditRequiresOptions",
          "description": "What option is required to edit this field including Owner, Edit, and Not Editable"
        },
        "fieldSlugName": {
          "description": "Field Slug Name",
          "type": "string"
        },
        "generatePasswordCharacterSet": {
          "description": "Generate password character set. Only returned if user can manage secret templates",
          "type": "string"
        },
        "generatePasswordLength": {
          "description": "Generate password length.  Only returned if user can manage secret templates",
          "type": "integer",
          "format": "int32"
        },
        "hideOnView": {
          "description": "Hide this field when viewing",
          "type": "boolean"
        },
        "historyLength": {
          "description": "History length",
          "type": "integer",
          "format": "int32"
        },
        "isExpirationField": {
          "description": "Is expiration field",
          "type": "boolean"
        },
        "isFile": {
          "description": "Is this field a file type",
          "type": "boolean"
        },
        "isIndexable": {
          "description": "Is able to be indexed",
          "type": "boolean"
        },
        "isNotes": {
          "description": "Is this field a notes field type",
          "type": "boolean"
        },
        "isPassword": {
          "description": "Is this field a password field type",
          "type": "boolean"
        },
        "isRequired": {
          "description": "Is this field required",
          "type": "boolean"
        },
        "isUrl": {
          "description": "Is this field a url field type",
          "type": "boolean"
        },
        "mustEncrypt": {
          "description": "Must encrypt.  Only returned if user can manage secret templates",
          "type": "boolean"
        },
        "name": {
          "description": "Field name",
          "type": "string"
        },
        "passwordRequirementId": {
          "description": "ID For Password Requirement assigned to field",
          "type": "integer",
          "format": "int32"
        },
        "passwordTypeFieldId": {
          "description": "Type of password field",
          "type": "integer",
          "format": "int32"
        },
        "secretTemplateFieldId": {
          "description": "Field Id",
          "type": "integer",
          "format": "int32"
        },
        "sortOrder": {
          "description": "Sort Order for Field",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretTemplateFieldUpdateArgs": {
      "description": "SecretTemplateFieldUpdateArgs",
      "properties": {
        "description": {
          "description": "Field description",
          "type": "string"
        },
        "displayName": {
          "description": "Field display name",
          "type": "string"
        },
        "editablePermission": {
          "description": "Who has editing rights",
          "type": "integer",
          "format": "int32"
        },
        "editRequires": {
          "$ref": "#/definitions/EditRequiresOptions",
          "description": "What option is required to edit this field including Owner, Edit, and Not Editable"
        },
        "fieldSlugName": {
          "description": "Field Slug Name",
          "type": "string"
        },
        "generatePasswordCharacterSet": {
          "description": "Generate password character set. Only returned if user can manage secret templates",
          "type": "string"
        },
        "generatePasswordLength": {
          "description": "Generate password length.  Only returned if user can manage secret templates",
          "type": "integer",
          "format": "int32"
        },
        "hideOnView": {
          "description": "Hide this field when viewing",
          "type": "boolean"
        },
        "historyLength": {
          "description": "History length",
          "type": "integer",
          "format": "int32"
        },
        "isExpirationField": {
          "description": "Is expiration field",
          "type": "boolean"
        },
        "isFile": {
          "description": "Is this field a file type",
          "type": "boolean"
        },
        "isIndexable": {
          "description": "Is able to be indexed",
          "type": "boolean"
        },
        "isNotes": {
          "description": "Is this field a notes field type",
          "type": "boolean"
        },
        "isPassword": {
          "description": "Is this field a password field type",
          "type": "boolean"
        },
        "isRequired": {
          "description": "Is this field required",
          "type": "boolean"
        },
        "isUrl": {
          "description": "Is this field a url field type",
          "type": "boolean"
        },
        "mustEncrypt": {
          "description": "Must encrypt.  Only returned if user can manage secret templates",
          "type": "boolean"
        },
        "name": {
          "description": "Field name",
          "type": "string"
        },
        "passwordRequirementId": {
          "description": "ID For Password Requirement assigned to field",
          "type": "integer",
          "format": "int32"
        },
        "passwordTypeFieldId": {
          "description": "Type of password field",
          "type": "integer",
          "format": "int32"
        },
        "secretTemplateFieldId": {
          "description": "Field Id",
          "type": "integer",
          "format": "int32"
        },
        "sortOrder": {
          "description": "Sort Order for Field",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecretTemplatePatchArgs": {
      "description": "SecretTemplatePatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SecretTemplatePatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SecretTemplatePatchModel": {
      "description": "Data",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Is Template Active"
        }
      },
      "type": "object"
    },
    "PasswordDictionaryModel": {
      "description": "PasswordDictionaryModel[]",
      "properties": {
        "id": {
          "description": "The dictionary ID",
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "description": "A list of dictionary entries",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the dictionary",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AddPasswordDictionaryArgs": {
      "description": "AddPasswordDictionaryArgs",
      "properties": {
        "dictionaryName": {
          "description": "Dictionary Name",
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/HttpFile",
          "description": "Uploaded file"
        }
      },
      "type": "object"
    },
    "UpdatePasswordDictionaryArgs": {
      "description": "UpdatePasswordDictionaryArgs",
      "properties": {
        "dictionaryId": {
          "description": "Dictionary ID to Update",
          "type": "integer",
          "format": "int32"
        },
        "dictionaryName": {
          "description": "Dictionary Name",
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/HttpFile",
          "description": "Uploaded file"
        }
      },
      "type": "object"
    },
    "PagingOfSecurityAuditLogSummaryAndSecurityAuditLogFilter": {
      "description": "Specify filtering, paging, sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "filter": {
          "$ref": "#/definitions/SecurityAuditLogFilter",
          "description": "Additional query options"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SecurityAuditLogSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SecurityAuditLogFilter": {
      "description": "Additional query options",
      "properties": {
        "searchText": {
          "description": "SearchText",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SecurityAuditLogSummary": {
      "description": "Query results",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "byUserDisplayName": {
          "description": "ByUserDisplayName",
          "type": "string"
        },
        "databaseName": {
          "description": "DatabaseName",
          "type": "string"
        },
        "dateRecorded": {
          "description": "DateRecorded",
          "type": "string",
          "format": "date-time"
        },
        "dateRecordedDisplay": {
          "description": "DateRecordedDisplay",
          "type": "string"
        },
        "eventEntityType": {
          "description": "EventEntityType",
          "type": "string"
        },
        "ipAddress": {
          "description": "IpAddress",
          "type": "string"
        },
        "logSourceName": {
          "description": "LogSourceName",
          "type": "string"
        },
        "machineName": {
          "description": "MachineName",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SiteModel": {
      "description": "SiteModel[]",
      "properties": {
        "active": {
          "description": "Active flag",
          "type": "boolean"
        },
        "siteId": {
          "description": "Site Id",
          "type": "integer",
          "format": "int32"
        },
        "siteName": {
          "description": "Site Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SlackResponse": {
      "description": "SlackResponse",
      "properties": {
        "error": {
          "description": "error",
          "type": "string"
        },
        "ok": {
          "description": "ok",
          "type": "boolean"
        },
        "response_metadata": {
          "$ref": "#/definitions/SlackResponseMetadata",
          "description": "response_metadata"
        },
        "warning": {
          "description": "warning",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SlackResponseMetadata": {
      "description": "response_metadata",
      "properties": {
        "messages": {
          "description": "messages",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "warnings": {
          "description": "warnings",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SlackConfigurationUpdateArgs": {
      "description": "SlackConfigurationUpdateArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SlackConfigurationUpdateModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SlackConfigurationUpdateModel": {
      "description": "Update Slack Configuration",
      "properties": {
        "appId": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Id of App"
        },
        "botToken": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Bot Token"
        },
        "enabled": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Enabled"
        },
        "signatureKey": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Signature Key"
        }
      },
      "type": "object"
    },
    "SshCommandCreateArgs": {
      "description": "Options to create SSH Command",
      "properties": {
        "data": {
          "$ref": "#/definitions/SshCommandCreateModel",
          "description": "SSH Command to create"
        }
      },
      "type": "object"
    },
    "SshCommandCreateModel": {
      "description": "SSH Command to create",
      "properties": {
        "command": {
          "description": "Command",
          "type": "string"
        },
        "commandPermissionType": {
          "$ref": "#/definitions/CommandPermissionType",
          "description": "CommandPermissionType"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "sshCommandGuid": {
          "description": "SshCommandGuid",
          "type": "string",
          "format": "uuid"
        }
      },
      "type": "object"
    },
    "SshCommandViewModel": {
      "description": "SSH Command",
      "properties": {
        "command": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SSH command"
        },
        "commandPermissionType": {
          "$ref": "#/definitions/ViewFieldValueOfCommandPermissionType",
          "description": "Allowed or Blocked"
        },
        "name": {
          "$ref": "#/definitions/ViewFieldValueOfString",
          "description": "SSH command name"
        },
        "sortOrder": {
          "$ref": "#/definitions/ViewFieldValueOfOptionalInt32",
          "description": "Sort order"
        },
        "sshCommandGuid": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfGuid",
          "description": "SSH command Guid"
        },
        "sshCommandId": {
          "$ref": "#/definitions/ViewFieldValueReadOnlyOfInt32",
          "description": "SSH command ID"
        }
      },
      "type": "object"
    },
    "ViewFieldValueOfCommandPermissionType": {
      "description": "Allowed or Blocked",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/CommandPermissionType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "ViewFieldValueReadOnlyOfGuid": {
      "description": "SSH command Guid",
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "fieldInputType": {
          "description": "FieldInputType",
          "type": "string"
        },
        "hasHistory": {
          "description": "HasHistory",
          "type": "boolean"
        },
        "helpLink": {
          "description": "HelpLink",
          "type": "string"
        },
        "hidden": {
          "description": "Hidden",
          "type": "boolean"
        },
        "hideOnView": {
          "description": "HideOnView",
          "type": "boolean"
        },
        "isRequired": {
          "description": "IsRequired",
          "type": "boolean"
        },
        "label": {
          "description": "Label",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly",
          "type": "boolean"
        },
        "readOnlyReason": {
          "description": "ReadOnlyReason",
          "type": "string"
        },
        "sortOrder": {
          "description": "SortOrder",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Value",
          "type": "string",
          "format": "uuid"
        }
      },
      "type": "object"
    },
    "SshCommandPatchArgs": {
      "description": "SshCommandPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SshCommandPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "PagingOfSshCommandSummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SshCommandSummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SshCommandSummaryModel": {
      "description": "SSH command",
      "properties": {
        "command": {
          "description": "SSH command",
          "type": "string"
        },
        "commandPermissionType": {
          "$ref": "#/definitions/CommandPermissionType",
          "description": "Allowed or Blocked"
        },
        "name": {
          "description": "SSH command name",
          "type": "string"
        },
        "sortOrder": {
          "description": "Sort order",
          "type": "integer",
          "format": "int32"
        },
        "sshCommandGuid": {
          "description": "SSH command Guid",
          "type": "string",
          "format": "uuid"
        },
        "sshCommandId": {
          "description": "SSH command ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SshCommandDto": {
      "description": "SshCommandDto",
      "properties": {
        "command": {
          "description": "Command",
          "type": "string"
        },
        "commandPermissionType": {
          "$ref": "#/definitions/CommandPermissionType",
          "description": "CommandPermissionType"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "sshCommandGuid": {
          "description": "SshCommandGuid",
          "type": "string",
          "format": "uuid"
        },
        "sshCommandId": {
          "description": "SshCommandId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SshCommandBlocklistCreateArgs": {
      "description": "Options to create SSH Command Blocklist",
      "properties": {
        "data": {
          "$ref": "#/definitions/SshCommandBlocklistCreateModel",
          "description": "SSH Command Blocklist to create"
        }
      },
      "type": "object"
    },
    "SshCommandBlocklistCreateModel": {
      "description": "SSH Command Blocklist to create",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "sshCommandBlocklistId": {
          "description": "SshCommandBlocklistId",
          "type": "string",
          "format": "uuid"
        },
        "sshCommandIds": {
          "description": "SshCommandIds",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SshCommandBlocklistPatchArgs": {
      "description": "SshCommandBlocklistPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SshCommandBlocklistPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "PagingOfSshCommandBlocklistSummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SshCommandBlocklistSummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SshCommandBlocklistSummaryModel": {
      "description": "SSH command Blocklist",
      "properties": {
        "active": {
          "description": "If the Command Blocklist is enabled",
          "type": "boolean"
        },
        "description": {
          "description": "A description of the Command Blocklist",
          "type": "string"
        },
        "name": {
          "description": "Name the Command Blocklist",
          "type": "string"
        },
        "sshCommandBlocklistId": {
          "description": "ID of the Command Blocklist",
          "type": "string",
          "format": "uuid"
        }
      },
      "type": "object"
    },
    "PagingOfBlocklistSecretPolicySummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/BlocklistSecretPolicySummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "BlocklistSecretPolicySummaryModel": {
      "description": "Query results",
      "properties": {
        "secretPolicyId": {
          "description": "The Id of the Secret Policy",
          "type": "integer",
          "format": "int32"
        },
        "secretPolicyName": {
          "description": "The Name of the Secret Policy",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SshCommandBlocklistDto": {
      "description": "SshCommandBlocklistDto",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "sshCommandBlocklistId": {
          "description": "SshCommandBlocklistId",
          "type": "string",
          "format": "uuid"
        }
      },
      "type": "object"
    },
    "PagingOfSshCommandItemAuditSummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SshCommandItemAuditSummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SshCommandItemAuditSummaryModel": {
      "description": "SSH Command Info Audits (Menu, Blocklist, Command)",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "dateRecorded": {
          "description": "The date of the change",
          "type": "string",
          "format": "date-time"
        },
        "itemName": {
          "description": "The name of the item",
          "type": "string"
        },
        "itemType": {
          "description": "Item Type (Command, Menu, Blocklist)",
          "type": "string"
        },
        "newCommands": {
          "description": "New Commands (Menu only)",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        },
        "oldCommands": {
          "description": "Old Commands (Menu only)",
          "type": "string"
        },
        "userDisplayName": {
          "description": "Display name of the user making the change",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SshCommandMenuCreateArgs": {
      "description": "Options to create SSH Command Menu",
      "properties": {
        "data": {
          "$ref": "#/definitions/SshCommandMenuCreateModel",
          "description": "SSH Command Menu to create"
        }
      },
      "type": "object"
    },
    "SshCommandMenuCreateModel": {
      "description": "Create a new SSH Command Menu",
      "required": [
        "name",
        "active",
        "description",
        "sshCommands"
      ],
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "sshCommands": {
          "description": "SSH Commands should be in the format of commandname = command.  Each command should be separated by a carriage return and line feed",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SshCommandMenuModel": {
      "description": "SSH Command Menu",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "sshCommandMenuGuid": {
          "description": "Ssh Command Menu Guid Id",
          "type": "string",
          "format": "uuid"
        },
        "sshCommandMenuId": {
          "description": "Ssh Command Menu Id",
          "type": "integer",
          "format": "int32"
        },
        "sshCommands": {
          "description": "SshCommands",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SshCommandMenuPatchArgs": {
      "description": "SshCommandMenuPatchArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/SshCommandMenuPatchModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "SshCommandMenuPatchModel": {
      "description": "Patch SSH Command Menu",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Active"
        },
        "description": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Description"
        },
        "name": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Name"
        },
        "sshCommandMenuGuid": {
          "description": "Ssh Command Menu Guid Id",
          "type": "string",
          "format": "uuid"
        },
        "sshCommandMenuId": {
          "description": "Ssh Command Menu Id",
          "type": "integer",
          "format": "int32"
        },
        "sshCommands": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "SSH Commands should be in the format of commandname = command.  Each command should be separated by a carriage return and line feed"
        }
      },
      "type": "object"
    },
    "PagingOfSshCommandMenuAuditSummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SshCommandMenuAuditSummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SshCommandMenuAuditSummaryModel": {
      "description": "SSH Command Menu Audits",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "dateRecorded": {
          "description": "The date of the change",
          "type": "string",
          "format": "date-time"
        },
        "newCommands": {
          "description": "New Commands",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        },
        "oldCommands": {
          "description": "Old Commands",
          "type": "string"
        },
        "sshCommandMenuName": {
          "description": "The name of the command menu",
          "type": "string"
        },
        "userDisplayName": {
          "description": "Display name of the user making the change",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfSshCommandMenuSummaryModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/SshCommandMenuSummaryModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SshCommandMenuSummaryModel": {
      "description": "SSH Command Menu Summary",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "sshCommandMenuId": {
          "description": "ID of the SSH Command Menu",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "SshCommandMenuStateModel": {
      "description": "Available state that can be performed on the SSH command feature such as actions",
      "properties": {
        "actions": {
          "description": "Actions the current user can perform",
          "items": {
            "$ref": "#/definitions/SshCommandMenuActions"
          },
          "type": "array"
        },
        "viewPolicy": {
          "description": "ViewPolicy",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SshCommandMenuActions": {
      "description": "Actions the current user can perform",
      "properties": {},
      "type": "string",
      "enum": [
        "CanCreate"
      ]
    },
    "PagingOfTeamDetailModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/TeamDetailModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "TeamDetailModel": {
      "description": "Query results",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "domainId": {
          "description": "Domain Id",
          "type": "integer",
          "format": "int32"
        },
        "shouldRestrictSites": {
          "description": "ShouldRestrictSites",
          "type": "boolean"
        },
        "teamDescription": {
          "description": "Team Description",
          "type": "string"
        },
        "teamId": {
          "description": "TeamId",
          "type": "integer",
          "format": "int32"
        },
        "teamName": {
          "description": "Team Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TeamCreateArgs": {
      "description": "Available options for creating a team",
      "required": [
        "teamName"
      ],
      "properties": {
        "domainId": {
          "description": "Id of domain team is in",
          "type": "integer",
          "format": "int32"
        },
        "teamDescription": {
          "description": "User description of team",
          "type": "string"
        },
        "teamName": {
          "description": "Name of the team",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TeamDetailUpdateModel": {
      "description": "TeamDetailUpdateModel",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "Active"
        },
        "domainId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "Domain Id"
        },
        "teamDescription": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Team Description"
        },
        "teamName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Team Name"
        }
      },
      "type": "object"
    },
    "PagingOfTeamAuditModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/TeamAuditModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "TeamAuditModel": {
      "description": "Query results",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "databaseName": {
          "description": "Database Name",
          "type": "string"
        },
        "dateRecorded": {
          "description": "Date Recordd",
          "type": "string",
          "format": "date-time"
        },
        "delegatedUserId": {
          "description": "Delegated User Id",
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "description": "Display Name",
          "type": "string"
        },
        "ipAddress": {
          "description": "IP Address",
          "type": "string"
        },
        "machineName": {
          "description": "Machine Name",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        },
        "teamAuditId": {
          "description": "TeamAuditId",
          "type": "integer",
          "format": "int32"
        },
        "teamId": {
          "description": "Team Id",
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "description": "User Id",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TeamGroupMembershipModel": {
      "description": "TeamGroupMembershipModel[]",
      "properties": {
        "groupDisplayName": {
          "description": "GroupDisplayName",
          "type": "string"
        },
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        },
        "teamGroupMembershipId": {
          "description": "TeamGroupMembershipId",
          "type": "integer",
          "format": "int32"
        },
        "teamId": {
          "description": "TeamId",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "Type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TeamMemberUpdateArgs": {
      "description": "TeamMemberUpdateArgs",
      "properties": {
        "domainId": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "DomainId"
        },
        "groupIds": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32[]",
          "description": "GroupIds"
        }
      },
      "type": "object"
    },
    "TeamSiteMap": {
      "description": "TeamSiteMap[]",
      "properties": {
        "siteId": {
          "description": "SiteId",
          "type": "integer",
          "format": "int32"
        },
        "siteName": {
          "description": "SiteName",
          "type": "string"
        },
        "teamId": {
          "description": "TeamId",
          "type": "integer",
          "format": "int32"
        },
        "teamSiteMapId": {
          "description": "TeamSiteMapId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "TeamSiteUpdateArgs": {
      "description": "TeamSiteUpdateArgs",
      "properties": {
        "shouldRestrictSites": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "ShouldRestrictSites"
        },
        "siteIds": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32[]",
          "description": "SiteIds"
        }
      },
      "type": "object"
    },
    "TicketSystemModel": {
      "description": "TicketSystemModel[]",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "displayMessage": {
          "description": "DisplayMessage",
          "type": "string"
        },
        "forceRequireTicketNumber": {
          "description": "ForceRequireTicketNumber",
          "type": "integer",
          "format": "int32"
        },
        "isDefault": {
          "description": "IsDefault",
          "type": "boolean"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "ticketSystemId": {
          "description": "TicketSystemId",
          "type": "integer",
          "format": "int32"
        },
        "ticketSystemTypeId": {
          "description": "TicketSystemTypeId",
          "type": "integer",
          "format": "int32"
        },
        "viewTicketUrl": {
          "description": "ViewTicketUrl",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfUserSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/UserSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UserSummary": {
      "description": "User summary",
      "properties": {
        "created": {
          "description": "User creation time",
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "description": "Display name",
          "type": "string"
        },
        "domainId": {
          "description": "Active Directory domain ID",
          "type": "integer",
          "format": "int32"
        },
        "domainName": {
          "description": "Active Directory Domain Name",
          "type": "string"
        },
        "emailAddress": {
          "description": "Email address",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the user account is enabled",
          "type": "boolean"
        },
        "id": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        },
        "isApplicationAccount": {
          "description": "IsApplicationAccount",
          "type": "boolean"
        },
        "isLockedOut": {
          "description": "Whether the user is locked out",
          "type": "boolean"
        },
        "lastLogin": {
          "description": "Time of last login",
          "type": "string",
          "format": "date-time"
        },
        "loginFailures": {
          "description": "Number of login failures",
          "type": "integer",
          "format": "int32"
        },
        "twoFactorMethod": {
          "$ref": "#/definitions/MultifactorAuthenticationProviderTypes",
          "description": "Name of the method used for two factor authentication"
        },
        "userName": {
          "description": "User name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MultifactorAuthenticationProviderTypes": {
      "description": "Domain multifactor authentication providers.",
      "properties": {},
      "type": "string",
      "enum": [
        "None",
        "Radius",
        "TOTPAuthenticator",
        "Duo",
        "Fido2",
        "Email"
      ]
    },
    "UserCreateArgs": {
      "description": "User create options",
      "required": [
        "userName",
        "password",
        "displayName"
      ],
      "properties": {
        "adGuid": {
          "description": "Active Directory unique identifier",
          "type": "string",
          "maxLength": 50
        },
        "displayName": {
          "description": "User display name",
          "type": "string"
        },
        "domainId": {
          "description": "Active Directory domain ID",
          "type": "integer",
          "format": "int32",
          "minimum": -1
        },
        "duoTwoFactor": {
          "description": "Whether Duo two-factor authentication is enabled",
          "type": "boolean"
        },
        "emailAddress": {
          "description": "User email address",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the user account is enabled",
          "type": "boolean"
        },
        "fido2TwoFactor": {
          "description": "Whether Duo two-factor authentication is enabled",
          "type": "boolean"
        },
        "isApplicationAccount": {
          "description": "IsApplicationAccount",
          "type": "boolean"
        },
        "oathTwoFactor": {
          "description": "Whether OATH two-factor authentication is enabled",
          "type": "boolean"
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "radiusTwoFactor": {
          "description": "Whether RADIUS two-factor authentication is enabled",
          "type": "boolean"
        },
        "radiusUserName": {
          "description": "RADIUS username",
          "type": "string"
        },
        "twoFactor": {
          "description": "Whether two-factor authentication is enabled",
          "type": "boolean"
        },
        "unixAuthenticationMethod": {
          "$ref": "#/definitions/UnixAuthenticationMethodType",
          "description": "Check password, public key, either, or both"
        },
        "userName": {
          "description": "Username",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UnixAuthenticationMethodType": {
      "description": "Check password, public key, either, or both",
      "properties": {},
      "type": "string",
      "enum": [
        "Password",
        "PublicKey",
        "PasswordOrPublicKey",
        "PasswordAndPublicKey"
      ]
    },
    "UserModel": {
      "description": "User",
      "properties": {
        "adAccountExpires": {
          "description": "Active Directory account expiration time",
          "type": "string",
          "format": "date-time"
        },
        "adGuid": {
          "description": "Active Directory unique identifier",
          "type": "string"
        },
        "created": {
          "description": "User creation time",
          "type": "string",
          "format": "date-time"
        },
        "dateOptionId": {
          "description": "DateOptionId",
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "description": "Display name",
          "type": "string"
        },
        "domainId": {
          "description": "Active Directory domain ID",
          "type": "integer",
          "format": "int32"
        },
        "duoTwoFactor": {
          "description": "Whether Duo two-factor authentication is enabled",
          "type": "boolean"
        },
        "emailAddress": {
          "description": "Email address",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the user account is enabled",
          "type": "boolean"
        },
        "fido2TwoFactor": {
          "description": "Whether FIDO2 two-factor authentication is enabled",
          "type": "boolean"
        },
        "id": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        },
        "isApplicationAccount": {
          "description": "IsApplicationAccount",
          "type": "boolean"
        },
        "isEmailCopiedFromAD": {
          "description": "Whether the email address is derived from the Active Directory account",
          "type": "boolean"
        },
        "isEmailVerified": {
          "description": "Whether the email address has been verified",
          "type": "boolean"
        },
        "isLockedOut": {
          "description": "Whether the user is locked out",
          "type": "boolean"
        },
        "lastLogin": {
          "description": "Time of last login",
          "type": "string",
          "format": "date-time"
        },
        "lastSessionActivity": {
          "description": "Time of last session activity",
          "type": "string",
          "format": "date-time"
        },
        "lockOutReason": {
          "description": "The reason for the lock out",
          "type": "string"
        },
        "lockOutReasonDescription": {
          "description": "An optional description of the reason for the lock out",
          "type": "string"
        },
        "loginFailures": {
          "description": "Number of login failures",
          "type": "integer",
          "format": "int32"
        },
        "mustVerifyEmail": {
          "description": "Whether the user must verify their email address",
          "type": "boolean"
        },
        "oathTwoFactor": {
          "description": "Whether OATH two-factor authentication is enabled",
          "type": "boolean"
        },
        "oathVerified": {
          "description": "Whether OATH has been verified",
          "type": "boolean"
        },
        "passwordLastChanged": {
          "description": "Time when the password was last changed",
          "type": "string",
          "format": "date-time"
        },
        "radiusTwoFactor": {
          "description": "Whether RADIUS two-factor authentication is enabled",
          "type": "boolean"
        },
        "radiusUserName": {
          "description": "RADIUS username",
          "type": "string"
        },
        "resetSessionStarted": {
          "description": "ResetSessionStarted",
          "type": "string",
          "format": "date-time"
        },
        "timeOptionId": {
          "description": "TimeOptionId",
          "type": "integer",
          "format": "int32"
        },
        "twoFactor": {
          "description": "Whether two-factor authentication is enabled",
          "type": "boolean"
        },
        "unixAuthenticationMethod": {
          "$ref": "#/definitions/UnixAuthenticationMethodType",
          "description": "Check password, public key, either, or both"
        },
        "userLcid": {
          "description": "UserLcid",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User name",
          "type": "string"
        },
        "verifyEmailSentDate": {
          "description": "Time when the verification email was sent",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "UserUpdateArgs": {
      "description": "User update options",
      "properties": {
        "dateOptionId": {
          "description": "DateOptionId",
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "description": "Display name",
          "type": "string"
        },
        "duoTwoFactor": {
          "description": "Whether Duo two-factor authentication is enabled",
          "type": "boolean"
        },
        "emailAddress": {
          "description": "Email address",
          "type": "string"
        },
        "enabled": {
          "description": "Whether the user account is enabled",
          "type": "boolean"
        },
        "fido2TwoFactor": {
          "description": "Whether FIDO2 two-factor authentication is enabled",
          "type": "boolean"
        },
        "groupOwners": {
          "description": "GroupOwners",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "id": {
          "description": "User ID. Must match ID in path",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "isApplicationAccount": {
          "description": "IsApplicationAccount",
          "type": "boolean"
        },
        "isGroupOwnerUpdate": {
          "description": "IsGroupOwnerUpdate",
          "type": "boolean"
        },
        "isLockedOut": {
          "description": "Whether the user is locked out",
          "type": "boolean"
        },
        "loginFailures": {
          "description": "Number of login failures",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "oathTwoFactor": {
          "description": "Whether OATH two-factor authentication is enabled",
          "type": "boolean"
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "radiusTwoFactor": {
          "description": "Whether RADIUS two-factor authentication is enabled",
          "type": "boolean"
        },
        "radiusUserName": {
          "description": "RADIUS username",
          "type": "string"
        },
        "timeOptionId": {
          "description": "TimeOptionId",
          "type": "integer",
          "format": "int32"
        },
        "twoFactor": {
          "description": "Whether two-factor authentication is enabled",
          "type": "boolean"
        },
        "unixAuthenticationMethod": {
          "$ref": "#/definitions/UnixAuthenticationMethodType",
          "description": "Check password, public key, or both"
        }
      },
      "type": "object"
    },
    "PatchUserModel": {
      "description": "PatchUserModel",
      "properties": {
        "dateOptionId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "DateOptionId"
        },
        "displayName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Display name"
        },
        "duoTwoFactor": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether Duo two-factor authentication is enabled"
        },
        "emailAddress": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Email address"
        },
        "enabled": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether the user account is enabled"
        },
        "fido2TwoFactor": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether FIDO2 two-factor authentication is enabled"
        },
        "groupOwners": {
          "description": "GroupOwners",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "id": {
          "description": "User ID. Must match ID in path",
          "type": "integer",
          "format": "int32"
        },
        "isApplicationAccount": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "IsApplicationAccount"
        },
        "isGroupOwnerUpdate": {
          "description": "IsGroupOwnerUpdate",
          "type": "boolean"
        },
        "isLockedOut": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether the user is locked out"
        },
        "loginFailures": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "Number of login failures"
        },
        "oathTwoFactor": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether OATH two-factor authentication is enabled"
        },
        "password": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Password"
        },
        "radiusTwoFactor": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether RADIUS two-factor authentication is enabled"
        },
        "radiusUserName": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "RADIUS username"
        },
        "timeOptionId": {
          "$ref": "#/definitions/UpdateFieldValueOfInt32",
          "description": "TimeOptionId"
        },
        "twoFactor": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Whether two-factor authentication is enabled"
        },
        "unixAuthenticationMethod": {
          "$ref": "#/definitions/UpdateFieldValueOfUnixAuthenticationMethodType",
          "description": "Check password, public key, either, or both"
        }
      },
      "type": "object"
    },
    "UpdateFieldValueOfUnixAuthenticationMethodType": {
      "description": "Check password, public key, either, or both",
      "properties": {
        "dirty": {
          "description": "Dirty",
          "type": "boolean"
        },
        "value": {
          "$ref": "#/definitions/UnixAuthenticationMethodType",
          "description": "Value"
        }
      },
      "type": "object"
    },
    "GroupAssignments": {
      "description": "Groups to be assigned.",
      "properties": {
        "groupIds": {
          "description": "Group Ids",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GroupChangeStatusModel": {
      "description": "The status of the group change action.",
      "properties": {
        "success": {
          "description": "The success or failure of the user group action.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfUserOwnerSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/UserOwnerSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UserOwnerSummary": {
      "description": "User owner summary",
      "properties": {
        "domainId": {
          "description": "Active Directory domain ID",
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "description": "Group ID",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "User owner ID",
          "type": "integer",
          "format": "int32"
        },
        "isUser": {
          "description": "Whether the owner is a user (true) or a group (false)",
          "type": "boolean"
        },
        "name": {
          "description": "User owner name",
          "type": "string"
        },
        "userId": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UserOwnerCreateArgs": {
      "description": "User owner create options",
      "properties": {
        "groupId": {
          "description": "Group ID",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "Group name",
          "type": "string"
        },
        "userId": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserOwnerModel": {
      "description": "User owner",
      "properties": {
        "domainId": {
          "description": "Active Directory domain ID",
          "type": "integer",
          "format": "int32"
        },
        "groupId": {
          "description": "Group ID",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "User owner ID",
          "type": "integer",
          "format": "int32"
        },
        "isUser": {
          "description": "Whether the owner is a user (true) or a group (false)",
          "type": "boolean"
        },
        "name": {
          "description": "User owner name",
          "type": "string"
        },
        "userId": {
          "description": "User ID",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UserOwnerPatchUserModel": {
      "description": "Update a list of add and removed owners owners of the user",
      "properties": {
        "addedGroupIds": {
          "description": "Group IDs to add as owners of the user",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        },
        "removeAllOwners": {
          "description": "Set to remove all owners to make user to be managed by user admins",
          "type": "boolean"
        },
        "removeGroupIds": {
          "description": "Group IDs to remove as owners of the user",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserOwnerPatchResult": {
      "description": "UserOwnerPatchResult",
      "properties": {
        "success": {
          "description": "Success of the patch",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfUserAuditSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/UserAuditSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UserAuditSummary": {
      "description": "Query results",
      "properties": {
        "action": {
          "description": "Action that occurred",
          "type": "string"
        },
        "databaseName": {
          "description": "Database name",
          "type": "string"
        },
        "dateRecorded": {
          "description": "Date Recorded",
          "type": "string",
          "format": "date-time"
        },
        "displayName": {
          "description": "The name of the user that made the change",
          "type": "string"
        },
        "displayNameAffected": {
          "description": "The display name that was affected by this change",
          "type": "string"
        },
        "ipAddress": {
          "description": "IP Address",
          "type": "string"
        },
        "machineName": {
          "description": "Machine name",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        },
        "userId": {
          "description": "The user id of the user that made the change",
          "type": "integer",
          "format": "int32"
        },
        "userIdAffected": {
          "description": "The user id that was affected by this change",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "LockOutArgs": {
      "description": "LockOutArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/LockOutRequestModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "LockOutRequestModel": {
      "description": "Request a lock out",
      "properties": {
        "description": {
          "description": "An optional description of the reason for the lock out",
          "type": "string"
        },
        "reasonType": {
          "$ref": "#/definitions/LockOutReasonType",
          "description": "The reason for the lock out"
        }
      },
      "type": "object"
    },
    "LockOutReasonType": {
      "description": "Available types of reasons for lock out",
      "properties": {},
      "type": "string",
      "enum": [
        "SuspiciousActivity",
        "LoginAttemptsExceeded",
        "Other"
      ]
    },
    "LockOutResponseModel": {
      "description": "The result of the lock out",
      "properties": {
        "success": {
          "description": "Did the lock out succeed",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PasswordResetArgs": {
      "description": "PasswordResetArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/PasswordResetRequestModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "PasswordResetRequestModel": {
      "description": "Reset a users password",
      "required": [
        "userId",
        "password"
      ],
      "properties": {
        "password": {
          "description": "The new password for this user",
          "type": "string"
        },
        "userId": {
          "description": "The user id to reset",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PasswordResetResultModel": {
      "description": "PasswordResetResultModel",
      "properties": {
        "success": {
          "description": "Success",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ResetTwoFactorArgs": {
      "description": "ResetTwoFactorArgs",
      "properties": {
        "data": {
          "$ref": "#/definitions/ResetTwoFactorRequestModel",
          "description": "Data"
        }
      },
      "type": "object"
    },
    "ResetTwoFactorRequestModel": {
      "description": "Request a 2FA reset",
      "properties": {
        "twoFactorType": {
          "$ref": "#/definitions/TwoFactorResetType",
          "description": "The 2FA method set for this user"
        }
      },
      "type": "object"
    },
    "TwoFactorResetType": {
      "description": "Available types of 2FA options that can be reset",
      "properties": {},
      "type": "string",
      "enum": [
        "Oath",
        "Fido"
      ]
    },
    "ResetTwoFactorResponseModel": {
      "description": "The result of the 2FA reset",
      "properties": {
        "success": {
          "description": "Did the 2FA reset succeed",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PagingOfUserRoleSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/UserRoleSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UserRoleSummary": {
      "description": "All of the roles a user has",
      "properties": {
        "groups": {
          "description": "All of the groups to which the user belongs that have this role",
          "items": {
            "$ref": "#/definitions/GroupAssignedRoleModel"
          },
          "type": "array"
        },
        "isDirectAssignment": {
          "description": "Is the role directly assigned to the user",
          "type": "boolean"
        },
        "roleId": {
          "description": "aaa",
          "type": "integer",
          "format": "int32"
        },
        "roleName": {
          "description": "aaa",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupAssignedRoleModel": {
      "description": "All of the groups to which the user belongs that have this role",
      "properties": {
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "GroupName",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfUserTeamSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/UserTeamSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UserTeamSummary": {
      "description": "Query results",
      "properties": {
        "active": {
          "description": "Team Active State",
          "type": "boolean"
        },
        "domainId": {
          "description": "Team Domain Id",
          "type": "integer",
          "format": "int32"
        },
        "isDirectlyAssigned": {
          "description": "If the user is directly assigned to the team",
          "type": "boolean"
        },
        "teamDescription": {
          "description": "Team Description",
          "type": "string"
        },
        "teamGroupMemberships": {
          "description": "The memberships a user has to a team.",
          "items": {
            "$ref": "#/definitions/TeamGroupSummary"
          },
          "type": "array"
        },
        "teamId": {
          "description": "Team Id",
          "type": "integer",
          "format": "int32"
        },
        "teamName": {
          "description": "Team Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TeamGroupSummary": {
      "description": "Team Group Summary",
      "properties": {
        "groupId": {
          "description": "Group Id",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "Group Name",
          "type": "string"
        },
        "isPersonal": {
          "description": "Is Personal Group",
          "type": "boolean"
        },
        "teamId": {
          "description": "Team Id",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UserChangePasswordArgs": {
      "description": "User change password options",
      "required": [
        "currentPassword",
        "newPassword"
      ],
      "properties": {
        "currentPassword": {
          "description": "Current user password",
          "type": "string"
        },
        "newPassword": {
          "description": "New user password",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CurrentUserModel": {
      "description": "Current User",
      "properties": {
        "adminLinks": {
          "description": "List of admin link options for current user",
          "items": {
            "$ref": "#/definitions/MenuLink"
          },
          "type": "array"
        },
        "dateOptionId": {
          "description": "Date option of current user",
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "description": "Display Name of current user",
          "type": "string"
        },
        "emailAddress": {
          "description": "Email Address of current user",
          "type": "string"
        },
        "id": {
          "description": "Id of current user",
          "type": "integer",
          "format": "int32"
        },
        "permissions": {
          "description": "Permissions assigned to current user",
          "items": {
            "$ref": "#/definitions/RestRolePermission"
          },
          "type": "array"
        },
        "profileLinks": {
          "description": "List of profile options for current user",
          "items": {
            "$ref": "#/definitions/MenuLink"
          },
          "type": "array"
        },
        "timeOptionId": {
          "description": "Time option of current user",
          "type": "integer",
          "format": "int32"
        },
        "userLcid": {
          "description": "Language of current user",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "User Name of current user",
          "type": "string"
        },
        "userTheme": {
          "description": "The current users theme",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MenuLink": {
      "description": "List of admin link options for current user",
      "properties": {
        "link": {
          "description": "Link",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RestRolePermission": {
      "description": "Permissions assigned to current user",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PreferenceModel": {
      "description": "Preference Model",
      "properties": {
        "settingCode": {
          "description": "Setting Code",
          "type": "string"
        },
        "settingId": {
          "description": "Setting Id",
          "type": "integer",
          "format": "int32"
        },
        "settingKey": {
          "description": "Setting Key",
          "type": "string"
        },
        "settingName": {
          "description": "Setting Name",
          "type": "string"
        },
        "settingValue": {
          "description": "Setting Value",
          "type": "string"
        },
        "userId": {
          "description": "User Id",
          "type": "integer",
          "format": "int32"
        },
        "userSettingId": {
          "description": "User Setting Id",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "RestPreferenceUpdateArgs": {
      "description": "Preference update options",
      "properties": {
        "settingCode": {
          "description": "Setting Code",
          "type": "string"
        },
        "settingName": {
          "description": "Setting Name",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Object",
          "description": "Value (True/False for legacy preferences)"
        }
      },
      "type": "object"
    },
    "PagingOfUserPublicSshKeySummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/UserPublicSshKeySummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "UserPublicSshKeySummary": {
      "description": "User public ssh key",
      "properties": {
        "active": {
          "description": "Whether the user public ssh key is active",
          "type": "boolean"
        },
        "dateCreated": {
          "description": "User public ssh key creation time",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "expired": {
          "description": "Whether the user public ssh key is expired",
          "type": "boolean"
        },
        "format": {
          "description": "The Format of the key",
          "type": "string"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "publicSshKey": {
          "description": "Public ssh key",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserPublicSshKeyCreateArgs": {
      "description": "User public ssh key create options",
      "required": [
        "description",
        "format"
      ],
      "properties": {
        "description": {
          "description": "Description",
          "type": "string"
        },
        "format": {
          "description": "Format of private key file",
          "type": "string"
        },
        "passphrase": {
          "description": "Passphrase",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserPasswordVerifyArgs": {
      "description": "UserPasswordVerifyArgs",
      "properties": {
        "password": {
          "description": "Password",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PagingOfScriptSummary": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/ScriptSummary"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ScriptSummary": {
      "description": "Script Summary",
      "properties": {
        "active": {
          "description": "Whether the Script is Active",
          "type": "boolean"
        },
        "concurrencyId": {
          "description": "Unique Script Concurrency Id",
          "type": "string"
        },
        "description": {
          "description": "Script Description",
          "type": "string"
        },
        "name": {
          "description": "Script Name",
          "type": "string"
        },
        "scriptCategoryId": {
          "description": "Script Catagory Id",
          "type": "integer",
          "format": "int32"
        },
        "scriptCategoryName": {
          "description": "Script Catagory Name",
          "type": "string"
        },
        "scriptId": {
          "description": "Script Id",
          "type": "integer",
          "format": "int32"
        },
        "scriptType": {
          "$ref": "#/definitions/UserScriptType",
          "description": "Script Type (Powershell = 1, SQL = 2, SSH = 3)"
        }
      },
      "type": "object"
    },
    "UserScriptType": {
      "description": "Script Type (Powershell = 1, SQL = 2, SSH = 3)",
      "properties": {},
      "type": "string",
      "enum": [
        "PowerShell",
        "SQL",
        "SSH"
      ]
    },
    "ScriptCreateArgs": {
      "description": "Script Create Options",
      "properties": {
        "active": {
          "description": "Whether the Script is Active",
          "type": "boolean"
        },
        "additionalData": {
          "description": "Additional Data",
          "type": "string"
        },
        "description": {
          "description": "Script Description",
          "type": "string"
        },
        "name": {
          "description": "Script Name",
          "type": "string"
        },
        "odbcConnectionStringArgs": {
          "description": "ODBC Connection String Options",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "script": {
          "description": "Script Text",
          "type": "string"
        },
        "scriptCategoryId": {
          "description": "Script Catagory Id",
          "type": "integer",
          "format": "int32"
        },
        "scriptCategoryName": {
          "description": "Script Catagory Name",
          "type": "string"
        },
        "scriptType": {
          "$ref": "#/definitions/UserScriptType",
          "description": "Script Type (Powershell = 1, SQL = 2, SSH = 3)"
        },
        "usageCount": {
          "description": "Usage Count ",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "ScriptModel": {
      "description": "Script",
      "properties": {
        "active": {
          "description": "Whether the Script is Active",
          "type": "boolean"
        },
        "additionalData": {
          "description": "Addition Data",
          "type": "string"
        },
        "concurrencyId": {
          "description": "Unique Script Concurrency Id",
          "type": "string"
        },
        "description": {
          "description": "Script Description",
          "type": "string"
        },
        "name": {
          "description": "Script Name",
          "type": "string"
        },
        "odbcConnectionStringArgs": {
          "description": "ODBC Connection String Options",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "script": {
          "description": "Script Text",
          "type": "string"
        },
        "scriptCategoryId": {
          "description": "Script Catagory Id",
          "type": "integer",
          "format": "int32"
        },
        "scriptCategoryName": {
          "description": "Script Catagory Name",
          "type": "string"
        },
        "scriptId": {
          "description": "Script Id",
          "type": "integer",
          "format": "int32"
        },
        "scriptType": {
          "$ref": "#/definitions/UserScriptType",
          "description": "Script Type (Powershell = 1, SQL = 2, SSH = 3)"
        },
        "usageCount": {
          "description": "Usage Count",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "WorkflowInstanceDto": {
      "description": "WorkflowInstanceDto[]",
      "properties": {
        "configurationJson": {
          "description": "ConfigurationJson",
          "type": "string"
        },
        "currentState": {
          "description": "CurrentState",
          "type": "string"
        },
        "currentStateInfoJson": {
          "description": "CurrentStateInfoJson",
          "type": "string"
        },
        "currentStepId": {
          "description": "CurrentStepId",
          "type": "integer",
          "format": "int32"
        },
        "currentStepState": {
          "$ref": "#/definitions/AccessRequestState",
          "description": "CurrentStepState"
        },
        "endTime": {
          "description": "EndTime",
          "type": "string",
          "format": "date-time"
        },
        "entityWorkflowMapId": {
          "description": "EntityWorkflowMapId",
          "type": "integer",
          "format": "int32"
        },
        "expirationTime": {
          "description": "ExpirationTime",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "pendingTransaction": {
          "description": "PendingTransaction",
          "type": "boolean"
        },
        "startTime": {
          "description": "StartTime",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "Status",
          "type": "string"
        },
        "workflowTemplateId": {
          "description": "WorkflowTemplateId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfWorkflowTemplateDetailModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/WorkflowTemplateDetailModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "WorkflowTemplateDetailModel": {
      "description": "Query results",
      "properties": {
        "active": {
          "description": "Active",
          "type": "boolean"
        },
        "configurationJson": {
          "description": "ConfigurationJson",
          "type": "string"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "expirationMinutes": {
          "description": "ExpirationMinutes",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "reusable": {
          "description": "Reusable",
          "type": "boolean"
        },
        "typeName": {
          "description": "TypeName",
          "type": "string"
        },
        "workflowTemplateId": {
          "description": "WorkflowTemplateId",
          "type": "integer",
          "format": "int32"
        },
        "workflowType": {
          "$ref": "#/definitions/WorkflowType",
          "description": "WorkflowType"
        }
      },
      "type": "object"
    },
    "WorkflowTemplateCreateArgs": {
      "description": "WorkflowTemplateCreateArgs",
      "required": [
        "workflowType",
        "name"
      ],
      "properties": {
        "configurationJson": {
          "description": "ConfigurationJson",
          "type": "string"
        },
        "description": {
          "description": "Description",
          "type": "string"
        },
        "expirationMinutes": {
          "description": "ExpirationMinutes",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "workflowType": {
          "$ref": "#/definitions/WorkflowType",
          "description": "WorkflowType"
        }
      },
      "type": "object"
    },
    "WorkflowTemplateUpdateModel": {
      "description": "WorkflowTemplateUpdateModel",
      "properties": {
        "active": {
          "$ref": "#/definitions/UpdateFieldValueOfBoolean",
          "description": "Active"
        },
        "configurationJson": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "ConfigurationJson"
        },
        "description": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Description"
        },
        "expirationMinutes": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalInt32",
          "description": "ExpirationMinutes"
        },
        "isCopy": {
          "$ref": "#/definitions/UpdateFieldValueOfOptionalBoolean",
          "description": "IsCopy"
        },
        "name": {
          "$ref": "#/definitions/UpdateFieldValueOfString",
          "description": "Name"
        }
      },
      "type": "object"
    },
    "PagingOfWorkflowTemplateAuditModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/WorkflowTemplateAuditModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "WorkflowTemplateAuditModel": {
      "description": "Query results",
      "properties": {
        "action": {
          "description": "Action",
          "type": "string"
        },
        "databaseName": {
          "description": "DatabaseName",
          "type": "string"
        },
        "dateRecorded": {
          "description": "DateRecorded",
          "type": "string",
          "format": "date-time"
        },
        "delegatedUserName": {
          "description": "DelegatedUserName",
          "type": "string"
        },
        "delegateUserId": {
          "description": "DelegateUserId",
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "formattedDate": {
          "description": "FormattedDate",
          "type": "string"
        },
        "ipAddress": {
          "description": "IpAddress",
          "type": "string"
        },
        "machineName": {
          "description": "MachineName",
          "type": "string"
        },
        "notes": {
          "description": "Notes",
          "type": "string"
        },
        "userId": {
          "description": "UserId",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "UserName",
          "type": "string"
        },
        "workflowTemplateAuditId": {
          "description": "WorkflowTemplateAuditId",
          "type": "integer",
          "format": "int32"
        },
        "workflowTemplateId": {
          "description": "WorkflowTemplateId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "PagingOfWorkflowStepTemplateDetailModel": {
      "description": "Specify paging and sorting options for querying records and returning results",
      "properties": {
        "batchCount": {
          "description": "Number of result batches available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "currentPage": {
          "description": "Index of current result page",
          "type": "integer",
          "format": "int32"
        },
        "hasNext": {
          "description": "Whether there are any results in additional pages",
          "type": "boolean"
        },
        "hasPrev": {
          "description": "Whether there are any results in previous pages",
          "type": "boolean"
        },
        "nextSkip": {
          "description": "Correct value of 'skip' for the next page of results",
          "type": "integer",
          "format": "int32"
        },
        "pageCount": {
          "description": "Number of result pages available with current query options",
          "type": "integer",
          "format": "int32"
        },
        "prevSkip": {
          "description": "Correct value of 'skip' for the previous page of results",
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "description": "Query results",
          "items": {
            "$ref": "#/definitions/WorkflowStepTemplateDetailModel"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/Severity",
          "description": "Severity of any errors"
        },
        "skip": {
          "description": "Number of records to skip before taking results",
          "type": "integer",
          "format": "int32"
        },
        "sortBy": {
          "description": "List of sort properties",
          "items": {
            "$ref": "#/definitions/Sort"
          },
          "type": "array"
        },
        "success": {
          "description": "Whether the query executed successfully",
          "type": "boolean"
        },
        "take": {
          "description": "Maximum number of records to include in results",
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "description": "Total number of results available",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "WorkflowStepTemplateDetailModel": {
      "description": "Query results",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/AccessRequestStepConfiguration",
          "description": "Configuration"
        },
        "expirationMinutes": {
          "description": "ExpirationMinutes",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "order": {
          "description": "Order",
          "type": "integer",
          "format": "int32"
        },
        "workflowStepTemplateId": {
          "description": "WorkflowStepTemplateId",
          "type": "integer",
          "format": "int32"
        },
        "workflowTemplateId": {
          "description": "WorkflowTemplateId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "AccessRequestStepConfiguration": {
      "description": "Configuration",
      "properties": {
        "approverGroups": {
          "description": "ApproverGroups",
          "items": {
            "$ref": "#/definitions/AccessReviewer"
          },
          "type": "array"
        },
        "approveStep": {
          "description": "ApproveStep",
          "type": "integer",
          "format": "int32"
        },
        "expireStep": {
          "description": "ExpireStep",
          "type": "integer",
          "format": "int32"
        },
        "numApprovalsRequired": {
          "description": "NumApprovalsRequired",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "AccessReviewer": {
      "description": "ApproverGroups",
      "properties": {
        "accessReviewerId": {
          "description": "AccessReviewerId",
          "type": "integer",
          "format": "int32"
        },
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "groupId": {
          "description": "GroupId",
          "type": "integer",
          "format": "int32"
        },
        "isOwner": {
          "description": "IsOwner",
          "type": "boolean"
        },
        "isUser": {
          "description": "IsUser",
          "type": "boolean"
        },
        "workflowStepTemplateId": {
          "description": "WorkflowStepTemplateId",
          "type": "integer",
          "format": "int32"
        },
        "workflowTemplateId": {
          "description": "WorkflowTemplateId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "WorkflowStepTemplateCreateArgs": {
      "description": "WorkflowStepTemplateCreateArgs",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/AccessRequestStepConfiguration",
          "description": "Configuration"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "order": {
          "description": "Order",
          "type": "integer",
          "format": "int32"
        },
        "workflowTemplateId": {
          "description": "WorkflowTemplateId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    },
    "WorkflowStepTemplateUpdateArgs": {
      "description": "WorkflowStepTemplateUpdateArgs",
      "properties": {
        "workflowStepTemplates": {
          "description": "WorkflowStepTemplates",
          "items": {
            "$ref": "#/definitions/WorkflowStepTemplateDetailModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "WorkflowStepTemplateUpdateModel": {
      "description": "WorkflowStepTemplateUpdateModel",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/AccessRequestStepConfiguration",
          "description": "Configuration"
        },
        "expirationMinutes": {
          "description": "ExpirationMinutes",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "order": {
          "description": "Order",
          "type": "integer",
          "format": "int32"
        },
        "workflowStepTemplateId": {
          "description": "WorkflowStepTemplateId",
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    }
  },
  "responses": {
    "403": {
      "description": "Authentication failed",
      "schema": {
        "$ref": "#/definitions/AuthenticationFailedResponse"
      }
    },
    "400": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/BadRequestResponse"
      }
    },
    "500": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/InternalServerErrorResponse"
      }
    }
  },
  "securityDefinitions": {
    "BearerToken": {
      "type": "apiKey",
      "description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "BearerToken": []
    }
  ],
  "tags": [
    {
      "name": "Activations",
      "description": "Activate Licenses"
    },
    {
      "name": "ActiveDirectory",
      "description": "View and maintain Active Directory"
    },
    {
      "name": "AppClients",
      "description": "View and maintain app clients"
    },
    {
      "name": "ApplicationAccounts",
      "description": "View and maintain users"
    },
    {
      "name": "ApplicationRequest",
      "description": "ApplicationRequestController"
    },
    {
      "name": "Configuration",
      "description": "Secret Server Configuration"
    },
    {
      "name": "ConnectionManagerSettings",
      "description": "ConnectionManagerSettingsController"
    },
    {
      "name": "DevOpsSecretsVaultSync",
      "description": "Manage secrets that are synced to DSV Tenants."
    },
    {
      "name": "DevOpsSecretsVaultTenant",
      "description": "Manage the tenants SS can communicate with in DevOps Secrets Vault."
    },
    {
      "name": "Diagnostics",
      "description": "View diagnostics information"
    },
    {
      "name": "DirectoryServices",
      "description": "View and maintain Directory Services integrations"
    },
    {
      "name": "Discovery",
      "description": "DiscoveryController"
    },
    {
      "name": "DistributedEngine",
      "description": "View and maintain Distributed Engine integrations"
    },
    {
      "name": "DomainNameIndex",
      "description": "DomainNameIndexController"
    },
    {
      "name": "DualControls",
      "description": "View and maintain dual controls"
    },
    {
      "name": "Enterprise",
      "description": "View enterprise related data"
    },
    {
      "name": "EventPipeline",
      "description": "EventPipelineController"
    },
    {
      "name": "EventPipelineAudit",
      "description": "EventPipelineAuditController"
    },
    {
      "name": "EventPipelinePolicy",
      "description": "EventPipelinePolicyController"
    },
    {
      "name": "EventPipelineSettings",
      "description": "EventPipelineSettingsController"
    },
    {
      "name": "EventPipelineTrigger",
      "description": "EventPipelineTriggerController"
    },
    {
      "name": "ExtendedFields",
      "description": "Extended Fields provider"
    },
    {
      "name": "FolderPermissions",
      "description": "View and maintain secret folder permissions"
    },
    {
      "name": "Folders",
      "description": "View and maintain secret folders"
    },
    {
      "name": "Groups",
      "description": "View and maintain user security groups"
    },
    {
      "name": "HealthCheck",
      "description": "HealthCheckController"
    },
    {
      "name": "HsmConfiguration",
      "description": "Secret Server HSM Configuration"
    },
    {
      "name": "IpAddressRestrictions",
      "description": "View and maintain IP Address restrictions"
    },
    {
      "name": "KeyManagement",
      "description": "View and configure Key Management settings"
    },
    {
      "name": "LauncherAgents",
      "description": "Manage Launcher Agents and Launcher Agent Collections for Advanced Session Recording"
    },
    {
      "name": "Launchers",
      "description": "View available application launchers"
    },
    {
      "name": "License",
      "description": "LicenseController"
    },
    {
      "name": "Metadata",
      "description": "MetadataController"
    },
    {
      "name": "Mobile",
      "description": "MobileController"
    },
    {
      "name": "OAuthExpiration",
      "description": "Expire the current user session"
    },
    {
      "name": "OneTimePasswordCode",
      "description": "View and maintain one time passwords"
    },
    {
      "name": "PbaConfiguration",
      "description": "View and configure Privilege Behavior Analytics"
    },
    {
      "name": "Proxy",
      "description": "Retrieve and update SSH and RDP proxy configurations"
    },
    {
      "name": "RemotePasswordChanging",
      "description": "View Password Changing Settings "
    },
    {
      "name": "Reports",
      "description": "View and maintain Reports"
    },
    {
      "name": "RolePermissions",
      "description": "RolePermissionsController"
    },
    {
      "name": "Roles",
      "description": "View and maintain user roles"
    },
    {
      "name": "Script",
      "description": "View Scripts"
    },
    {
      "name": "SdkClientAccounts",
      "description": "View and maintain SDK Client Accounts"
    },
    {
      "name": "SdkClientAudits",
      "description": "View SDK Client Audits"
    },
    {
      "name": "SdkClientRules",
      "description": "View and maintain SDK Client Rules"
    },
    {
      "name": "SecretAccessRequests",
      "description": "SecretAccessRequestsController"
    },
    {
      "name": "SecretDependencies",
      "description": "View and maintain Secret Dependencies"
    },
    {
      "name": "SecretExtensions",
      "description": "Specialized calls for Thycotic Secret Server Extensions. \r\n                   Thycotic may change the functionality or signatures under the secret-extensions route.\r\n                   Use at your own risk."
    },
    {
      "name": "SecretHooks",
      "description": "View and maintain Secret hooks"
    },
    {
      "name": "SecretPermissions",
      "description": "View and maintain secret permissions"
    },
    {
      "name": "SecretPolicy",
      "description": "Retrieve and update Secret Policies"
    },
    {
      "name": "Secrets",
      "description": "View and maintain Secrets"
    },
    {
      "name": "SecretServerSettings",
      "description": "Secret Server Settings"
    },
    {
      "name": "SecretSessions",
      "description": "View recorded sessions"
    },
    {
      "name": "SecretTemplatePermissions",
      "description": "Secret Template Permissions"
    },
    {
      "name": "SecretTemplates",
      "description": "View secret templates"
    },
    {
      "name": "SecurityAuditLogs",
      "description": "View Security Audit Logs"
    },
    {
      "name": "ServerNodes",
      "description": "View nodes and update roles or readonly mode"
    },
    {
      "name": "Sites",
      "description": "SitesController"
    },
    {
      "name": "Slack",
      "description": "SlackController"
    },
    {
      "name": "SshCommand",
      "description": "View and maintain SSH Commands"
    },
    {
      "name": "SshCommandBlocklist",
      "description": "View and maintain SSH Command Blocklists"
    },
    {
      "name": "SshCommandMenu",
      "description": "View and maintain SSH Command Menus"
    },
    {
      "name": "Teams",
      "description": "View and maintain user security teams"
    },
    {
      "name": "TicketSystems",
      "description": "TicketSystemsController"
    },
    {
      "name": "Users",
      "description": "View and maintain users"
    },
    {
      "name": "Version",
      "description": "Secret Server Version"
    },
    {
      "name": "WorkflowInstances",
      "description": "View and maintain Workflow Instances"
    },
    {
      "name": "WorkflowStepTemplates",
      "description": "View and maintain Workflow Template Steps"
    },
    {
      "name": "WorkflowTemplates",
      "description": "View and maintain Workflow Templates"
    }
  ]
}